#define FREEGLUT_STATIC
#define _LIB
#define FREEGLUT_LIB_PRAGMAS 0
#define _SECURE_SCL_DEPRECATE 0
#define _CRT_SECURE_NO_WARNINGS 0
#define FREEGLUT_STATIC
#define _LIB
#define FREEGLUT_LIB_PRAGMAS 0
#define PI 3.1415926535897
#define DAQmxErrChk(functionCall) if( DAQmxFailed(error=(functionCall)) ) goto Error; else
#define DAQmx_Val_GroupByChannel 0

#ifndef M_PI
#define M_PI            (3.14159265358979f)
#endif
#define DTOR            (M_PI/180.0)
#define RTOD            (180.0/M_PI)

#define CUBE_MAP_SIZE 800

/* In case your <GL/gl.h> does not advertise EXT_texture_cube_map... */
#ifndef GL_EXT_texture_cube_map
# define GL_NORMAL_MAP_EXT                   0x8511
# define GL_REFLECTION_MAP_EXT               0x8512
# define GL_TEXTURE_CUBE_MAP_EXT             0x8513
# define GL_TEXTURE_BINDING_CUBE_MAP_EXT     0x8514
# define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT  0x8515
# define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT  0x8516
# define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT  0x8517
# define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT  0x8518
# define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT  0x8519
# define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT  0x851A
# define GL_PROXY_TEXTURE_CUBE_MAP_EXT       0x851B
# define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT    0x851C
#endif

// OpenGL is pretty senstive so our header file glut.h has to be the first on our include files
#include <GL/glut.h> // MUST BE FIRST (not including MACROS. Those are fine first.)
#include <GL/GL.h>
#include <GL/GLU.h>
#include <GL/freeglut.h>
#include <time.h>       /* time_t, clock, CLOCKS_PER_SEC */
#include <math.h>       /* sqrt */
#include <iostream>
//#include <vector>
#include <fstream>
#include <GLFW/glfw3.h>
#include <stdio.h>
#include <NIDAQmx.h>
#include <time.h>
#include <windows.h>
#include "wglext.h"
//#include <mutex>
//#include <thread>
//#include <string.h>
//#include <GL/glui.h>
GLuint texture[1];

double angle = 0;
bool clear;
int yp;
int centering = 0;
bool centered = 0;
float viewingAngle = 10;
//float delay = 1200; //0.1 Hz
float delay = 10000.0; //0.1 Hz
bool drifting = 0;
float driftVel = 10;
bool closedLoop = 0;
bool horizontal = 0;
bool spinning = 0;
bool vertical = 1;
bool locust = 0; //The locust stimuli
const float R = 584.6207004;
int single = 360;
bool isSingle = 0;
//const float R = 70;
float weight = 1; // in kg
float length = 1; // in m
float mothWidth = 1; // in m
float gains[5] = { 0.5, 1, 1.5, 2, 2.5 };
int gainIt = 1;
float gain = gains[gainIt]; // This is the gain that we'll be changing.
int increment = 0;
float CLangle = 0;
float angVel = 0;
float OLangle = 0;
const float threshold = 0.0025;
int window1; //Main window
int window2;
int window3;
float oscillationAmp = 180.0; // This is the amplitude of the oscillation in degrees.
bool written = 0;
int d_t = 0;
float Ixx = 2.55e-07;
float Iyy = 2.83e-07;
float Izz = 2.43e-07;
float Ixz = -3.44e-08;
bool vertical2 = 0; //This is to get the roll moment for yaw stimuli
bool spinning2 = 0; //This is to get the yaw moment for roll stimmuli
const int longitudinalSpacing = 6; //Number of degrees between each longitudinal vertex? Something like that.
bool continuousRecording = 0; //Whether we are recording continuously or in 20.

							  //Joy's white noise vector
							  //float whiteNoise[5120] = { 0.0000000e+00, -2.3395572e-01, -7.2977811e-01, -9.8922076e-01, -5.3139221e-01,, 6.3783386e-01,, 1.9063659e+00,, 2.4515883e+00,, 1.8653228e+00,, 4.9924366e-01, -7.6525423e-01, -1.1471558e+00, -4.9462942e-01,, 6.9292326e-01,, 1.7279221e+00,, 2.2717831e+00,, 2.5076484e+00,, 2.8496194e+00,, 3.4907188e+00,, 4.2099913e+00,, 4.6044694e+00,  4.5185077e+00,  4.2610741e+00,  4.3920606e+00,  5.2532874e+00,  6.6652894e+00,  8.0782778e+00,  9.0600295e+00,  9.6843906e+00,  1.0451731e+01,  1.1788528e+01,  1.3572932e+01,  1.5142059e+01,  1.5819293e+01,  1.5517171e+01,  1.4870331e+01,  1.4750365e+01,  1.5566635e+01,  1.6958024e+01,  1.8132521e+01,  1.8526241e+01,  1.8175154e+01,  1.7485520e+01,  1.6676173e+01,  1.5483087e+01,  1.3452050e+01,  1.0548419e+01,  7.4637175e+00,  5.2500405e+00,  4.5413824e+00,  5.0332635e+00,  5.6914339e+00,  5.5263601e+00,  4.2858349e+00,  2.5166924e+00,  1.0134795e+00,  1.7543034e-01, -2.0159303e-01, -6.1293221e-01, -1.3717082e+00, -2.3931456e+00, -3.3476262e+00, -3.9620055e+00, -4.1927025e+00, -4.1933386e+00, -4.1969312e+00, -4.4372046e+00, -5.1045536e+00, -6.2654545e+00, -7.7540109e+00, -9.1523828e+00, -9.9496085e+00, -9.8063471e+00, -8.7311593e+00, -7.0392764e+00, -5.1588320e+00, -3.4655134e+00, -2.2436197e+00, -1.6972272e+00, -1.8853531e+00, -2.5984905e+00, -3.3562192e+00, -3.6587791e+00, -3.3650937e+00, -2.8607798e+00, -2.7893161e+00, -3.5059228e+00, -4.7188680e+00, -5.6746875e+00, -5.7727045e+00, -5.0849954e+00, -4.3125920e+00, -4.2034302e+00, -4.9431631e+00, -6.0528051e+00, -6.8646684e+00, -7.1313327e+00, -7.2244926e+00, -7.7729268e+00, -9.0914687e+00, -1.0908941e+01, -1.2602164e+01, -1.3693070e+01, -1.4174553e+01, -1.4429667e+01, -1.4872743e+01, -1.5637375e+01, -1.6533703e+01, -1.7242074e+01, -1.7543032e+01, -1.7414414e+01, -1.6974695e+01, -1.6367580e+01, -1.5689984e+01, -1.4996294e+01, -1.4340394e+01, -1.3791409e+01, -1.3386592e+01, -1.3046989e+01, -1.2538813e+01, -1.1561070e+01, -9.9494467e+00, -7.8596846e+00, -5.7522255e+00, -4.1263926e+00, -3.1758835e+00, -2.6551572e+00, -2.1071930e+00, -1.2878622e+00, -4.1336362e-01,  1.8187484e-02, -3.0171788e-01, -1.1515128e+00, -1.8992599e+00, -1.9931423e+00, -1.3822505e+00, -4.9038440e-01,  2.0775588e-01,  5.8402775e-01,  8.5301495e-01,  1.2126874e+00,  1.5371699e+00,  1.4606408e+00,  7.6609439e-01, -3.4115535e-01, -1.3811258e+00, -2.0261531e+00, -2.3591006e+00, -2.6867304e+00, -3.1143282e+00, -3.3669858e+00, -3.0992884e+00, -2.3974002e+00, -1.9105300e+00, -2.3701726e+00, -3.8811030e+00, -5.6695137e+00, -6.6088261e+00, -6.1246123e+00, -4.6914033e+00, -3.4670424e+00, -3.3704134e+00, -4.3918390e+00, -5.6926720e+00, -6.3384985e+00, -5.9878176e+00, -4.9803025e+00, -3.8661845e+00, -2.9003374e+00, -1.9656347e+00, -9.1153658e-01,  1.0552600e-01,  6.4762406e-01,  3.6059176e-01, -6.7561439e-01, -1.9310441e+00, -2.7465810e+00, -2.7219732e+00, -1.9020075e+00, -6.9785278e-01,  3.3967182e-01,  7.5885985e-01,  3.9420921e-01, -5.3325255e-01, -1.4694312e+00, -1.7838281e+00, -1.1429187e+00,  2.3906894e-01,  1.6938302e+00,  2.5178488e+00,  2.4176526e+00,  1.6344374e+00, 6.6291170e-01, -1.6956258e-01, -8.8448022e-01, -1.6556460e+00, -2.4657382e+00, -2.9896413e+00, -2.8500410e+00, -2.0095232e+00, -9.0332262e-01, -1.4532411e-01, -4.7747097e-02, -3.9019694e-01, -6.5790441e-01, -5.3456497e-01, -1.9130749e-01, -9.8904127e-02, -5.4090354e-01, -1.2984630e+00, -1.8274266e+00, -1.7817118e+00, -1.3881439e+00, -1.2872162e+00, -1.9426999e+00, -3.1474681e+00, -4.1069639e+00, -4.0796221e+00, -3.0372065e+00, -1.7551529e+00, -1.2246884e+00, -1.8765365e+00, -3.2810207e+00, -4.5734686e+00, -5.2143047e+00, -5.4057871e+00, -5.8107953e+00, -6.8559598e+00, -8.2706612e+00, -9.2849203e+00, -9.3033531e+00, -8.4474208e+00, -7.4903360e+00, -7.2555170e+00, -8.0029206e+00, -9.2971481e+00, -1.0407415e+01, -1.0859597e+01, -1.0706777e+01, -1.0387459e+01, -1.0374235e+01, -1.0897268e+01, -1.1867668e+01, -1.2951185e+01, -1.3714224e+01, -1.3823724e+01, -1.3273764e+01, -1.2509418e+01, -1.2277594e+01, -1.3193990e+01, -1.5286320e+01, -1.7884156e+01, -2.0003275e+01, -2.0968402e+01, -2.0799899e+01, -2.0081985e+01, -1.9470477e+01, -1.9278727e+01, -1.9447589e+01, -1.9812179e+01, -2.0324541e+01, -2.1012426e+01, -2.1787822e+01, -2.2391131e+01, -2.2586938e+01, -2.2415868e+01, -2.2210498e+01, -2.2320082e+01, -2.2806125e+01, -2.3418254e+01, -2.3874111e+01, -2.4148238e+01, -2.4466365e+01, -2.5017604e+01, -2.5702325e+01, -2.6200253e+01, -2.6303941e+01, -2.6176145e+01, -2.6258724e+01, -2.6911003e+01, -2.8120185e+01, -2.9539352e+01, -3.0779399e+01, -3.1660983e+01, -3.2228721e+01, -3.2598212e+01, -3.2838159e+01, -3.2968382e+01, -3.2972181e+01, -3.2728225e+01, -3.1953300e+01, -3.0344314e+01, -2.7923368e+01, -2.5283786e+01, -2.3387213e+01, -2.2930988e+01, -2.3778666e+01, -2.5009635e+01, -2.5635406e+01, -2.5388025e+01, -2.4859591e+01, -2.4850519e+01, -2.5544818e+01, -2.6317072e+01, -2.6366770e+01, -2.5549168e+01, -2.4556496e+01, -2.4239549e+01, -2.4729771e+01, -2.5250553e+01, -2.4844428e+01, -2.3335101e+01, -2.1592737e+01, -2.0832171e+01, -2.1595622e+01, -2.3350975e+01, -2.5020202e+01, -2.5872988e+01, -2.5942835e+01, -2.5676268e+01, -2.5305134e+01, -2.4644698e+01, -2.3493715e+01, -2.2136790e+01, -2.1336737e+01, -2.1753419e+01, -2.3344838e+01, -2.5350405e+01, -2.6889648e+01, -2.7618524e+01, -2.7856986e+01, -2.8133142e+01, -2.8628223e+01, -2.9037171e+01, -2.8908755e+01, -2.8084721e+01, -2.6836485e+01, -2.5645910e+01, -2.4892053e+01, -2.4697986e+01, -2.4957588e+01, -2.5409792e+01, -2.5697955e+01, -2.5482957e+01, -2.4646471e+01, -2.3443694e+01, -2.2394195e+01, -2.1900976e+01, -2.1896044e+01, -2.1872243e+01, -2.1336680e+01, -2.0292694e+01, -1.9273835e+01, -1.8852104e+01, -1.9063133e+01, -1.9309382e+01, -1.8868995e+01, -1.7554899e+01, -1.5907021e+01, -1.4729213e+01, -1.4393685e+01, -1.4544129e+01, -1.4445860e+01, -1.3637795e+01, -1.2298018e+01, -1.1039600e+01, -1.0378897e+01, -1.0366419e+01, -1.0655040e+01, -1.0863220e+01, -1.0875294e+01, -1.0855480e+01, -1.1040462e+01, -1.1528926e+01, -1.2215626e+01, -1.2863000e+01, -1.3229987e+01, -1.3199774e+01, -1.2868681e+01, -1.2535466e+01, -1.2538018e+01, -1.2993289e+01, -1.3634550e+01, -1.3936684e+01, -1.3506683e+01, -1.2453604e+01, -1.1404827e+01, -1.1097208e+01, -1.1835198e+01, -1.3241045e+01, -1.4491453e+01, -1.4844676e+01, -1.4058617e+01, -1.2440879e+01, -1.0588769e+01, -9.0711301e+00, -8.2427612e+00, -8.2002667e+00, -8.7997454e+00, -9.7141630e+00, -1.0573046e+01, -1.1168656e+01, -1.1587109e+01, -1.2113247e+01, -1.2941119e+01, -1.3938308e+01, -1.4713942e+01, -1.4972165e+01, -1.4834328e+01, -1.4797252e+01, -1.5317543e+01, -1.6381574e+01, -1.7469156e+01, -1.7973167e+01, -1.7712934e+01, -1.7083318e+01, -1.6713877e+01, -1.6960910e+01, -1.7694969e+01, -1.8550107e+01, -1.9358189e+01, -2.0325068e+01, -2.1767437e+01, -2.3663560e+01, -2.5465486e+01, -2.6394289e+01, -2.6003200e+01, -2.4542457e+01, -2.2814515e+01, -2.1627702e+01, -2.1277559e+01, -2.1444542e+01, -2.1546012e+01, -2.1223183e+01, -2.0570605e+01, -1.9966444e+01, -1.9706597e+01, -1.9787937e+01, -2.0014588e+01, -2.0282282e+01, -2.0726830e+01, -2.1565347e+01, -2.2783081e+01, -2.4008238e+01, -2.4763470e+01, -2.4904044e+01, -2.4813906e+01, -2.5102915e+01, -2.6017714e+01, -2.7108111e+01, -2.7522928e+01, -2.6742036e+01, -2.5099203e+01, -2.3576098e+01, -2.2990612e+01, -2.3284670e+01, -2.3569312e+01, -2.2911656e+01, -2.1161922e+01, -1.9073491e+01, -1.7622981e+01, -1.7174995e+01, -1.7254603e+01, -1.7086468e+01, -1.6332195e+01, -1.5315685e+01, -1.4583984e+01, -1.4323029e+01, -1.4250892e+01, -1.4061510e+01, -1.3882730e+01, -1.4193064e+01, -1.5237319e+01, -1.6562205e+01, -1.7228452e+01, -1.6581169e+01, -1.4857928e+01, -1.3019158e+01, -1.1923295e+01, -1.1614316e+01, -1.1392669e+01, -1.0587615e+01, -9.2776855e+00, -8.2693596e+00, -8.3652713e+00, -9.6180936e+00, -1.1244001e+01, -1.2224129e+01, -1.2010906e+01, -1.0749664e+01, -8.9593163e+00, -7.1071100e+00, -5.4886200e+00, -4.3868933e+00, -4.1531468e+00, -4.9844192e+00, -6.5965178e+00, -8.2071081e+00, -8.9844218e+00, -8.6342041e+00, -7.6007368e+00, -6.6768800e+00, -6.3576116e+00, -6.5061939e+00, -6.6031338e+00, -6.3061419e+00, -5.7807385e+00, -5.5057556e+00, -5.7639088e+00, -6.3136546e+00, -6.5541855e+00, -6.0344449e+00, -4.8490677e+00, -3.5728635e+00, -2.7921429e+00, -2.6315293e+00, -2.6684571e+00, -2.2998112e+00, -1.2576305e+00,  1.4300677e-01,  1.2216167e+00,  1.4419994e+00,  8.1081513e-01, -1.4526623e-01, -7.9126575e-01, -8.3640468e-01, -4.5680388e-01, -1.4409580e-02,  3.4072376e-01,  7.9973094e-01,  1.6366029e+00,  2.8312184e+00,  3.9771424e+00,  4.6092705e+00,  4.6610785e+00,  4.6005503e+00,  5.0781610e+00,  6.3878976e+00,  8.2313336e+00,  9.9875585e+00,  1.1209528e+01,  1.1875155e+01,  1.2208333e+01,  1.2340243e+01,  1.2216897e+01,  1.1833256e+01,  1.1456995e+01,  1.1482870e+01,  1.1990731e+01,  1.2497256e+01,  1.2286692e+01,  1.1114089e+01,  9.5974541e+00,  8.8130176e+00,  9.3684677e+00,  1.0810390e+01,  1.1984516e+01,  1.2069243e+01,  1.1309829e+01,  1.0719713e+01,  1.1009738e+01,  1.1794930e+01,  1.1903569e+01,  1.0548901e+01,  8.2457001e+00,  6.5424404e+00,  6.7462987e+00,  8.7879689e+00,  1.1268359e+01,  1.2644614e+01,  1.2480415e+01,  1.1668243e+01,  1.1506664e+01,  1.2534437e+01,  1.4152445e+01,  1.5261485e+01, 1.5229100e+01,  1.4311657e+01,  1.3273413e+01,  1.2688942e+01,  1.2591975e+01,  1.2679278e+01,  1.2729419e+01,  1.2784912e+01,  1.2988992e+01,  1.3338928e+01,  1.3644326e+01,  1.3704176e+01,  1.3480443e+01,  1.3085004e+01,  1.2619030e+01,  1.2046060e+01,  1.1215118e+01,  9.9922974e+00,  8.3873790e+00,  6.6103548e+00,  5.0534159e+00,  4.1917554e+00,  4.3888366e+00,  5.6637494e+00,  7.5846018e+00,  9.4362156e+00,  1.0608696e+01,  1.0929041e+01,  1.0663066e+01,  1.0198087e+01,  9.7172096e+00,  9.1720758e+00,  8.5320421e+00,  7.9765636e+00,  7.7589171e+00,  7.8634153e+00,  7.8738157e+00,  7.3009009e+00,  6.1131215e+00,  4.9149512e+00,  4.5027913e+00,  5.1647196e+00,  6.4183819e+00,  7.4994098e+00,  8.1505564e+00,  8.8982237e+00,  1.0468098e+01,  1.2872187e+01,  1.5106592e+01,  1.5867727e+01,  1.4698995e+01,  1.2500947e+01,  1.0883903e+01,  1.0913050e+01,  1.2358800e+01,  1.4075486e+01,  1.5075466e+01,  1.5270182e+01,  1.5259706e+01,  1.5511941e+01,  1.5816832e+01,  1.5534357e+01,  1.4313811e+01,  1.2518773e+01, 1.0952172e+01,  1.0204491e+01,  1.0277487e+01,  1.0775918e+01,  1.1356545e+01,  1.1931082e+01,  1.2492170e+01,  1.2896623e+01,  1.2958557e+01,  1.2774568e+01,  1.2846031e+01,  1.3725208e+01,  1.5446448e+01,  1.7320351e+01,  1.8379786e+01,  1.8130345e+01,  1.6926101e+01,  1.5624754e+01,  1.4855580e+01,  1.4583516e+01,  1.4334594e+01,  1.3797446e+01,  1.3183463e+01,  1.3015305e+01,  1.3592134e+01,  1.4663952e+01,  1.5595019e+01,  1.5815119e+01,  1.5139064e+01,  1.3742834e+01,  1.1937082e+01,  1.0001384e+01,  8.1698918e+00,  6.6511578e+00,  5.5685277e+00,  4.8765205e+00,  4.3937525e+00,  3.9673727e+00,  3.6029263e+00,  3.4005082e+00,  3.3547691e+00,  3.2560697e+00,  2.8424274e+00,  2.0694802e+00,  1.2051899e+00,  6.2058427e-01,  4.7618860e-01,  6.2987041e-01,  8.5629554e-01,  1.1187066e+00,  1.5669892e+00,  2.2492418e+00,  2.8802288e+00,  2.9933485e+00,  2.3917370e+00,  1.4411320e+00,  8.4557800e-01,  1.0611743e+00,  1.9073067e+00,  2.7774962e+00,  3.2567373e+00,  3.5233880e+00,  4.1145506e+00,  5.2830947e+00, 6.6093447e+00,  7.2895978e+00,  6.8396974e+00,  5.5249348e+00,  4.1011959e+00,  3.1465311e+00,  2.6600326e+00,  2.2986514e+00,  1.9409209e+00,  1.9288889e+00,  2.7002650e+00,  4.1981171e+00,  5.7168321e+00,  6.4133217e+00,  6.0210071e+00,  5.0702584e+00,  4.3924083e+00,  4.3859317e+00,  4.7421610e+00,  4.8531844e+00,  4.4516566e+00,  3.8407281e+00,  3.5293560e+00,  3.6979006e+00,  4.0550311e+00,  4.1992805e+00,  4.0623209e+00,  3.9488697e+00,  4.1440475e+00,  4.5328472e+00,  4.6649379e+00,  4.2210530e+00,  3.4025952e+00,  2.8290334e+00,  3.0200999e+00,  3.9535809e+00,  5.1086686e+00,  5.9253226e+00,  6.2230254e+00,  6.2032171e+00,  6.0987611e+00,  5.8729443e+00,  5.2809544e+00,  4.2080130e+00,  2.9100621e+00,  1.8881976e+00,  1.5020318e+00,  1.6871152e+00,  2.0387427e+00,  2.1755862e+00,  2.0444548e+00,  1.8991341e+00,  1.9929359e+00,  2.2745238e+00,  2.3580951e+00,  1.7946272e+00,  4.2524930e-01, -1.4554023e+00, -3.2432536e+00, -4.3707425e+00, -4.6204776e+00, -4.2099126e+00, -3.6103812e+00, -3.2353239e+00, -3.2072993e+00, -3.3461056e+00, -3.3578473e+00, -3.0630292e+00, -2.4878446e+00, -1.7679514e+00, -9.7444161e-01, -3.0546760e-02,  1.2041291e+00,  2.7614128e+00,  4.4621939e+00,  5.9754620e+00,  6.9886658e+00,  7.3544372e+00,  7.1181327e+00,  6.4412673e+00,  5.5091741e+00,  4.4922152e+00,  3.5582091e+00,  2.8864078e+00,  2.6444142e+00,  2.9317759e+00,  3.7254660e+00,  4.8684712e+00,  6.1290970e+00,  7.3244155e+00,  8.4454804e+00,  9.6782881e+00,  1.1248438e+01,  1.3152905e+01,  1.4990303e+01,  1.6101408e+01,  1.6012679e+01,  1.4878877e+01,  1.3525090e+01,  1.2950611e+01,  1.3611585e+01,  1.5050621e+01,  1.6217171e+01,  1.6264040e+01,  1.5188557e+01,  1.3799314e+01,  1.3054546e+01,  1.3340367e+01,  1.4272973e+01,  1.5120883e+01,  1.5413315e+01,  1.5205986e+01,  1.4859588e+01,  1.4643585e+01,  1.4572806e+01,  1.4573404e+01,  1.4716250e+01,  1.5217970e+01,  1.6197957e+01,  1.7460924e+01,  1.8549889e+01,  1.9029772e+01,  1.8735463e+01,  1.7783250e+01,  1.6404163e+01,  1.4813248e+01,  1.3221897e+01,  1.1883932e+01, 1.1015105e+01,  1.0609649e+01,  1.0371586e+01,  9.9211589e+00,  9.1474838e+00,  8.3665479e+00,  8.0766042e+00,  8.4905495e+00,  9.2793955e+00,  9.7958762e+00,  9.5970542e+00,  8.7914028e+00,  7.9005793e+00,  7.3909049e+00,  7.3300462e+00,  7.4649269e+00,  7.5742956e+00,  7.6857256e+00,  7.9267841e+00,  8.1990069e+00,  8.0699022e+00,  7.0532713e+00,  5.0325570e+00,  2.4166827e+00, -1.2372236e-01, -2.0827550e+00, -3.3166432e+00, -3.8877001e+00, -3.8034842e+00, -2.9819877e+00, -1.4894343e+00,  2.3622145e-01,  1.4822738e+00,  1.6671962e+00,  7.2359377e-01, -8.6665290e-01, -2.3936807e+00, -3.3114672e+00, -3.4221516e+00, -2.8282154e+00, -1.8242370e+00, -8.4303139e-01, -3.8238170e-01, -7.9498825e-01, -2.0136407e+00, -3.4807109e+00, -4.4691154e+00, -4.6266109e+00, -4.2914571e+00, -4.2524592e+00, -5.1055372e+00, -6.7508756e+00, -8.4775562e+00, -9.5566510e+00, -9.8014648e+00, -9.6024929e+00, -9.4571210e+00, -9.4868403e+00, -9.4082517e+00, -8.9406726e+00, -8.1893121e+00, -7.5851382e+00, -7.4379021e+00, -7.5752938e+00, -7.4704719e+00, -6.7703710e+00, -5.7204095e+00, -5.0566798e+00, -5.4337951e+00, -6.8919170e+00, -8.8257332e+00, -1.0455192e+01, -1.1363412e+01, -1.1657934e+01, -1.1696817e+01, -1.1705684e+01, -1.1642569e+01, -1.1366049e+01, -1.0864438e+01, -1.0298870e+01, -9.8617060e+00, -9.6587727e+00, -9.7658844e+00, -1.0366802e+01, -1.1738800e+01, -1.3993922e+01, -1.6780635e+01, -1.9285082e+01, -2.0661763e+01, -2.0626272e+01, -1.9725765e+01, -1.9002627e+01, -1.9250638e+01, -2.0425154e+01, -2.1683063e+01, -2.2041395e+01, -2.1148225e+01, -1.9565761e+01, -1.8353528e+01, -1.8292021e+01, -1.9355896e+01, -2.0822929e+01, -2.1888179e+01, -2.2269213e+01, -2.2336425e+01, -2.2714849e+01, -2.3723356e+01, -2.5108198e+01, -2.6249406e+01, -2.6631642e+01, -2.6195441e+01, -2.5330040e+01, -2.4571777e+01, -2.4269715e+01, -2.4442282e+01, -2.4859378e+01, -2.5226450e+01, -2.5327626e+01, -2.5068240e+01, -2.4441900e+01, -2.3477636e+01, -2.2214505e+01, -2.0732217e+01, -1.9230799e+01, -1.8090987e+01, -1.7805178e+01, -1.8726511e+01, -2.0751358e+01, -2.3198711e+01, -2.5095530e+01, -2.5781197e+01, -2.5418491e+01, -2.4961770e+01, -2.5503740e+01, -2.7444103e+01, -3.0138874e+01, -3.2352794e+01, -3.3185065e+01, -3.2725420e+01, -3.1906743e+01, -3.1694212e+01, -3.2305911e+01, -3.3108192e+01, -3.3225848e+01, -3.2299761e+01, -3.0745874e+01, -2.9353784e+01, -2.8639938e+01, -2.8523492e+01, -2.8535555e+01, -2.8287436e+01, -2.7760520e+01, -2.7230645e+01, -2.6997901e+01, -2.7204969e+01, -2.7844138e+01, -2.8830992e+01, -3.0009341e+01, -3.1118593e+01, -3.1859219e+01, -3.2081811e+01, -3.1927016e+01, -3.1719252e+01, -3.1647458e+01, -3.1525899e+01, -3.0912714e+01, -2.9536163e+01, -2.7647963e+01, -2.5944410e+01, -2.5086231e+01, -2.5236535e+01, -2.6026691e+01, -2.6945932e+01, -2.7742877e+01, -2.8443968e+01, -2.9022361e+01, -2.9144283e+01, -2.8351949e+01, -2.6561463e+01, -2.4357836e+01, -2.2699362e+01, -2.2212528e+01, -2.2705048e+01, -2.3370756e+01, -2.3516315e+01, -2.3128202e+01, -2.2743276e+01, -2.2771731e+01, -2.2977242e+01, -2.2676811e+01, -2.1497295e+01, -1.9929634e+01, -1.9069539e+01, -1.9714513e+01, -2.1645894e+01, -2.3793040e+01, -2.5148844e+01, -2.5574732e+01, -2.5727677e+01, -2.6197145e+01, -2.6733482e+01, -2.6388477e+01, -2.4497911e+01, -2.1563058e+01, -1.9101564e+01, -1.8474885e+01, -1.9697223e+01, -2.1330892e+01, -2.1638056e+01, -2.0026235e+01, -1.7536727e+01, -1.5955462e+01, -1.6325279e+01, -1.8130468e+01, -1.9793751e+01, -1.9977034e+01, -1.8546258e+01, -1.6459493e+01, -1.4827262e+01, -1.4050802e+01, -1.3731661e+01, -1.3264311e+01, -1.2447910e+01, -1.1571746e+01, -1.1024138e+01, -1.0914112e+01, -1.1083291e+01, -1.1415058e+01, -1.2041853e+01, -1.3204368e+01, -1.4921939e+01, -1.6842290e+01, -1.8443246e+01, -1.9390346e+01, -1.9709923e+01, -1.9652762e+01, -1.9445378e+01, -1.9203655e+01, -1.9051167e+01, -1.9220771e+01, -1.9931145e+01, -2.1113294e+01, -2.2296742e+01, -2.2865981e+01, -2.2532521e+01, -2.1605215e+01, -2.0773764e+01, -2.0551886e+01, -2.0853049e+01, -2.1074006e+01, -2.0620015e+01, -1.9422929e+01, -1.8019669e+01, -1.7142324e+01, -1.7170604e+01, -1.7878714e+01, -1.8641090e+01, -1.8900881e+01, -1.8537818e+01, -1.7885221e+01, -1.7411216e+01, -1.7302678e+01, -1.7250373e+01, -1.6612758e+01, -1.4893269e+01, -1.2224336e+01, -9.4756468e+00, -7.8077446e+00, -7.8984406e+00, -9.3886240e+00, -1.1018679e+01, -1.1432749e+01, -1.0078344e+01, -7.5079773e+00, -4.8564997e+00, -2.9524877e+00, -1.8179357e+00, -9.3469208e-01,  5.5093254e-02,  9.2939017e-01,  1.1536009e+00,  5.4282994e-01, -3.7590494e-01, -7.0644673e-01,  6.2467813e-02,  1.6024180e+00,  3.0229120e+00,  3.6179498e+00,  3.3869184e+00,  2.8807343e+00,  2.5835838e+00,  2.4567658e+00,  2.0566764e+00,  1.0471459e+00, -4.3500950e-01, -1.8983201e+00, -2.9221890e+00, -3.4349275e+00, -3.6048150e+00, -3.5390820e+00, -3.1601535e+00, -2.3806255e+00, -1.3357913e+00, -3.6994470e-01,  2.3130032e-01,  4.6694069e-01,  5.5251072e-01,  6.4828712e-01,  7.1672925e-01,  6.8976996e-01,  7.3713408e-01,  1.2532078e+00,  2.4621514e+00,  4.0075413e+00,  5.0225748e+00,  4.7640532e+00,  3.3095184e+00,  1.6615046e+00,  1.0834567e+00,  2.1812013e+00, 4.4854320e+00,  6.8505862e+00,  8.2849021e+00,  8.5178610e+00,  7.9371676e+00,  7.1138376e+00,  6.4067759e+00,  5.9058907e+00,  5.5697919e+00,  5.2901512e+00,  4.8433000e+00,  3.9288550e+00,  2.4172657e+00,  6.1500301e-01, -7.9169756e-01, -1.1928331e+00, -5.5127845e-01,  5.4645885e-01,  1.3883109e+00,  1.7407262e+00,  1.9758133e+00,  2.5890039e+00,  3.5876423e+00,  4.3802535e+00,  4.3061151e+00,  3.2935869e+00,  1.9837809e+00,  1.1710868e+00,  1.0875310e+00,  1.2204399e+00,  8.4053507e-01, -2.6137331e-01, -1.5152527e+00, -2.0090847e+00, -1.2019383e+00,  7.0702652e-01,  2.9936122e+00,  4.9157736e+00,  6.0550047e+00,  6.3208583e+00,  5.8112392e+00,  4.7702097e+00,  3.6305309e+00,  2.9281525e+00,  2.9992544e+00,  3.6812710e+00,  4.3525535e+00,  4.3741223e+00,  3.5884585e+00,  2.4196069e+00,  1.4601569e+00,  9.1177178e-01,  3.9395351e-01, -7.0187742e-01, -2.6354220e+00, -5.0284859e+00, -7.0956915e+00, -8.1717271e+00, -8.1049241e+00, -7.2692674e+00, -6.2837457e+00, -5.6938118e+00, -5.7786693e+00, -6.4845187e+00, -7.4444765e+00, -8.1133360e+00, -8.0471961e+00, -7.2177936e+00, -6.1165859e+00, -5.4844059e+00, -5.8009713e+00, -6.9215788e+00, -8.1791439e+00, -8.8930853e+00, -8.8712148e+00, -8.4919390e+00, -8.3202243e+00, -8.6077907e+00, -9.1001355e+00, -9.2779870e+00, -8.7899342e+00, -7.7144313e+00, -6.4853035e+00, -5.6031224e+00, -5.3773458e+00, -5.8458661e+00, -6.8485437e+00, -8.1506608e+00, -9.5413206e+00, -1.0882892e+01, -1.2102650e+01, -1.3127614e+01, -1.3809860e+01, -1.3933751e+01, -1.3353544e+01, -1.2175283e+01, -1.0798234e+01, -9.7073743e+00, -9.1345459e+00, -8.8731074e+00, -8.4438255e+00, -7.5079313e+00, -6.1794396e+00, -4.9524111e+00, -4.2952108e+00, -4.2662093e+00, -4.4865912e+00, -4.4820740e+00, -4.0820087e+00, -3.5369425e+00, -3.2874062e+00, -3.6141531e+00, -4.4564683e+00, -5.4913657e+00, -6.3438718e+00, -6.7497267e+00, -6.6074919e+00, -5.9704594e+00, -5.0254339e+00, -4.0389829e+00, -3.2467542e+00, -2.7402863e+00, -2.4565969e+00, -2.3007810e+00, -2.2891227e+00, -2.5557299e+00, -3.1966378e+00, -4.1075707e+00, -5.0004391e+00, -5.6074503e+00, -5.8792849e+00, -5.9795074e+00, -6.0871273e+00, -6.2185452e+00, -6.2475212e+00, -6.0733717e+00, -5.7264713e+00, -5.2974220e+00, -4.8173488e+00, -4.2976773e+00, -3.9253566e+00, -4.1359392e+00, -5.3184177e+00, -7.3031678e+00, -9.1551177e+00, -9.6653971e+00, -8.3008653e+00, -5.8095309e+00, -3.8233961e+00, -3.6484606e+00, -5.2381448e+00, -7.2892718e+00, -8.4259684e+00, -8.4111939e+00, -8.2504718e+00, -9.0713649e+00, -1.0847572e+01, -1.2237694e+01, -1.1778327e+01, -9.3562851e+00, -6.5505356e+00, -5.4399677e+00, -6.8948933e+00, -9.8673125e+00, -1.2292601e+01, -1.2762515e+01, -1.1483835e+01, -9.7691928e+00, -8.6794242e+00, -8.1444623e+00, -7.3155729e+00, -5.6691899e+00, -3.6999470e+00, -2.5190136e+00, -2.7807397e+00, -3.9977324e+00, -4.8931953e+00, -4.4382031e+00, -2.6160774e+00, -2.8162098e-01,  1.6464502e+00,  2.8667384e+00,  3.6936070e+00,  4.5248361e+00,  5.3863953e+00,  5.9732814e+00,  6.0465556e+00,  5.7127492e+00,  5.2996105e+00,  4.9970262e+00,  4.6650964e+00,  4.0112729e+00, 2.9487791e+00,  1.7749042e+00,  9.9918920e-01,  9.8526434e-01,  1.7157911e+00,  2.8425258e+00,  3.9274232e+00,  4.6633167e+00,  4.9480989e+00,  4.8370357e+00,  4.4596532e+00,  3.9472261e+00,  3.3722364e+00,  2.7149639e+00,  1.8988824e+00,  9.0056614e-01, -1.4549666e-01, -9.5954567e-01, -1.2726558e+00, -1.0136685e+00, -3.6753801e-01,  3.4616436e-01,  8.6297682e-01,  1.0684917e+00,  9.4889836e-01,  5.0239079e-01, -2.5745595e-01, -1.2083881e+00, -2.0795816e+00, -2.5858794e+00, -2.6709293e+00, -2.6338922e+00, -2.9677089e+00, -3.9851569e+00, -5.5260941e+00, -7.0065398e+00, -7.7962299e+00, -7.6352877e+00, -6.7704051e+00, -5.7301729e+00, -4.9495118e+00, -4.5423707e+00, -4.3541738e+00, -4.1765612e+00, -3.9041365e+00, -3.5239193e+00, -3.0171828e+00, -2.3296750e+00, -1.4686498e+00, -6.2648870e-01, -1.7513498e-01, -4.7925158e-01, -1.6419063e+00, -3.3733218e+00, -5.0938724e+00, -6.2157891e+00, -6.4280330e+00, -5.8193402e+00, -4.7911225e+00, -3.8390294e+00, -3.3366023e+00, -3.4215395e+00, -4.0086312e+00, -4.8883349e+00, -5.8437276e+00, -6.7281463e+00, -7.4766817e+00, -8.0639504e+00, -8.4537579e+00, -8.5926271e+00, -8.4638834e+00, -8.1569130e+00, -7.8674120e+00, -7.7796173e+00, -7.8865042e+00, -7.8985776e+00, -7.3732857e+00, -6.0391515e+00, -4.0973362e+00, -2.2329756e+00, -1.2487955e+00, -1.5369664e+00, -2.7826131e+00, -4.1594179e+00, -4.9019969e+00, -4.8208462e+00, -4.3509579e+00, -4.1022677e+00, -4.2999453e+00, -4.5959478e+00, -4.4058809e+00, -3.4600940e+00, -2.0713253e+00, -8.8263007e-01, -3.2967446e-01, -3.0042227e-01, -2.8103388e-01,  1.6894307e-01,  1.0481016e+00,  1.9539087e+00,  2.4409769e+00,  2.3379813e+00,  1.7630811e+00,  9.0914650e-01, -1.1839750e-01, -1.2420833e+00, -2.2550324e+00, -2.8270169e+00, -2.7544526e+00, -2.2238866e+00, -1.7665440e+00, -1.8478738e+00, -2.4225880e+00, -2.8957905e+00, -2.6084411e+00, -1.4760080e+00, -2.0969608e-01,  1.4212598e-01, -9.7939478e-01, -3.1038299e+00, -4.9380057e+00, -5.1978358e+00, -3.4576392e+00, -4.0469735e-01,  2.6525404e+00,  4.6300462e+00,  5.2607546e+00,  5.0668302e+00, 4.8153350e+00,  4.9039869e+00,  5.1177358e+00,  4.8888862e+00,  3.8255511e+00,  2.0983499e+00,  3.9687060e-01, -5.1215912e-01, -3.0169836e-01,  7.0125574e-01,  1.7554397e+00,  2.2101765e+00,  1.8930871e+00,  1.1088474e+00,  3.0239186e-01, -2.9400448e-01, -7.3206653e-01, -1.1244534e+00, -1.3971723e+00, -1.3011102e+00, -6.9552123e-01,  1.7985026e-01,  7.5526832e-01,  5.3027740e-01, -4.9334626e-01, -1.7343031e+00, -2.4217015e+00, -2.1709342e+00, -1.2993585e+00, -6.3788997e-01, -9.8398198e-01, -2.5935896e+00, -5.0429379e+00, -7.4995604e+00, -9.1772393e+00, -9.6891055e+00, -9.1408625e+00, -7.9803701e+00, -6.7244988e+00, -5.7025598e+00, -4.9263312e+00, -4.1411993e+00, -3.0292159e+00, -1.4458464e+00,  4.5877305e-01,  2.3107619e+00,  3.7168124e+00,  4.4542646e+00,  4.5332559e+00,  4.1349770e+00,  3.5139599e+00,  2.9303362e+00,  2.5996188e+00,  2.6221486e+00,  2.9174053e+00,  3.2513563e+00,  3.3978740e+00,  3.3325830e+00,  3.2722466e+00,  3.4766633e+00,  3.9631372e+00,  4.4160869e+00,  4.4326625e+00,  3.9207367e+00, 3.2674083e+00,  3.0568369e+00,  3.5320361e+00,  4.2831089e+00,  4.4973867e+00,  3.6147218e+00,  1.8335758e+00, -5.5142932e-05, -1.0625234e+00, -1.2202036e+00, -1.1183318e+00, -1.6129006e+00, -3.0361038e+00, -4.9166351e+00, -6.3640366e+00, -6.7559745e+00, -6.1464799e+00, -5.1071342e+00, -4.2175556e+00, -3.6736884e+00, -3.2947799e+00, -2.8132440e+00, -2.1165180e+00, -1.2442504e+00, -2.3973482e-01,  9.0957142e-01,  2.1536093e+00,  3.2394376e+00,  3.7694363e+00,  3.4818473e+00,  2.5210434e+00,  1.4218519e+00,  7.6790595e-01,  7.8427053e-01,  1.2022145e+00,  1.5070512e+00,  1.3520736e+00,  7.8996438e-01,  1.5128948e-01, -2.8289114e-01, -5.0117127e-01, -6.8808578e-01, -9.5794772e-01, -1.1742976e+00, -1.0390163e+00, -3.6756759e-01,  7.1772480e-01,  1.8712033e+00,  2.8165707e+00,  3.5763118e+00,  4.4137111e+00,  5.5262857e+00,  6.7674192e+00,  7.6641364e+00,  7.7442844e+00,  6.9115973e+00,  5.5580992e+00,  4.3222530e+00,  3.6905012e+00,  3.7461415e+00,  4.2155856e+00,  4.7080877e+00,  4.9256254e+00,  4.7187701e+00, 4.0479084e+00,  2.9764324e+00,  1.7180322e+00,  6.2620560e-01,  2.8872428e-02, -1.5990654e-02,  1.7801754e-01,  1.1915822e-01, -4.8106973e-01, -1.4533770e+00, -2.2874556e+00, -2.5478845e+00, -2.2384390e+00, -1.7949744e+00, -1.7135207e+00, -2.1430598e+00, -2.7911299e+00, -3.1946554e+00, -3.0859668e+00, -2.5353061e+00, -1.7976463e+00, -1.0697195e+00, -4.0178625e-01,  1.9926404e-01,  6.4963701e-01,  8.1576266e-01,  6.5625603e-01,  2.9947185e-01, -4.8740100e-02, -2.6780705e-01, -3.6668716e-01, -3.6233582e-01, -1.6060739e-01,  3.6672595e-01,  1.1422433e+00,  1.7548556e+00,  1.6759618e+00,  7.1355721e-01, -7.0738354e-01, -1.7701850e+00, -1.8793929e+00, -1.1400806e+00, -2.4921348e-01,  1.3292978e-01, -3.4092243e-02, -1.7790611e-01,  2.9107739e-01,  1.3573596e+00,  2.3441662e+00,  2.4803626e+00,  1.5597765e+00,  8.8246596e-02, -1.1859166e+00, -1.8862918e+00, -2.2015606e+00, -2.5447412e+00, -3.0899610e+00, -3.6694995e+00, -4.0879672e+00, -4.4522027e+00, -5.1072658e+00, -6.2124043e+00, -7.4117389e+00, -7.9994945e+00, -7.4895305e+00, -6.0697051e+00, -4.4972928e+00, -3.5098718e+00, -3.2795588e+00, -3.3853883e+00, -3.2809258e+00, -2.7850356e+00, -2.1493354e+00, -1.7010474e+00, -1.4659722e+00, -1.1528992e+00, -4.8499216e-01,  4.8541666e-01,  1.4021658e+00,  1.9333663e+00,  2.0652225e+00,  2.0792212e+00,  2.2582451e+00,  2.6228229e+00,  2.9382479e+00,  2.9486509e+00,  2.5897199e+00,  1.9975570e+00,  1.3622355e+00,  8.1044643e-01,  4.1449770e-01,  2.4361844e-01,  3.2199045e-01,  4.9845723e-01,  3.9680603e-01, -4.0647963e-01, -2.0485604e+00, -4.1616365e+00, -5.9983574e+00, -6.8553278e+00, -6.4870358e+00, -5.2011719e+00, -3.5913633e+00, -2.1526738e+00, -1.0817202e+00, -3.5635992e-01,  6.7464397e-02,  1.7027858e-01, -4.1829930e-02, -4.2104798e-01, -7.1829379e-01, -7.8999170e-01, -7.7640519e-01, -1.0390096e+00, -1.8533164e+00, -3.1045422e+00, -4.2824801e+00, -4.8436791e+00, -4.6811861e+00, -4.3031859e+00, -4.5197966e+00, -5.8348453e+00, -8.0105848e+00, -1.0172573e+01, -1.1405107e+01, -1.1386863e+01, -1.0571983e+01, -9.7868304e+00, -9.5891602e+00, -9.9191081e+00, -1.0300349e+01, -1.0362603e+01, -1.0187276e+01, -1.0167238e+01, -1.0541668e+01, -1.1077205e+01, -1.1223392e+01, -1.0607506e+01, -9.3944020e+00, -8.1532221e+00, -7.3420320e+00, -6.8955970e+00, -6.3150414e+00, -5.1851117e+00, -3.6346137e+00, -2.3021212e+00, -1.8292221e+00, -2.3386880e+00, -3.3558662e+00, -4.2113521e+00, -4.5340728e+00, -4.4081971e+00, -4.1287269e+00, -3.8705165e+00, -3.6133127e+00, -3.3453191e+00, -3.2550069e+00, -3.6446897e+00, -4.6245610e+00, -5.9175475e+00, -7.0236081e+00, -7.6277206e+00, -7.8617140e+00, -8.1404271e+00, -8.6978265e+00, -9.2567768e+00, -9.1686960e+00, -7.9363928e+00, -5.6777928e+00, -3.1291063e+00, -1.1811487e+00, -3.3005266e-01, -4.6653218e-01, -1.1148964e+00, -1.8625746e+00, -2.6104835e+00, -3.4837721e+00, -4.5534334e+00, -5.6581288e+00, -6.4896545e+00, -6.8531132e+00, -6.8570270e+00, -6.8488118e+00, -7.1263001e+00, -7.6518060e+00, -8.0177601e+00, -7.7345672e+00, -6.6519360e+00, -5.1801591e+00, -4.0851218e+00, -3.9486147e+00, -4.6856668e+00, -5.5307033e+00, -5.5734383e+00, -4.4714043e+00, -2.7685073e+00, -1.5185450e+00, -1.4698894e+00, -2.4535580e+00, -3.4803674e+00, -3.4807384e+00, -2.0918388e+00,  1.3076056e-01,  2.2031781e+00,  3.4510129e+00,  3.8822443e+00,  3.9586146e+00,  4.0695146e+00,  4.2235503e+00,  4.1958607e+00,  3.9059837e+00,  3.6016211e+00,  3.6531929e+00,  4.1683816e+00,  4.8145752e+00,  5.0349001e+00,  4.4765659e+00,  3.2690211e+00,  1.9384734e+00,  1.0548626e+00,  8.9223660e-01,  1.3186869e+00,  1.9306098e+00,  2.3002519e+00,  2.1930403e+00,  1.6683573e+00,  1.0254651e+00,  6.0096237e-01,  5.0801763e-01,  4.9659027e-01,  9.0893969e-02, -1.0333278e+00, -2.7077055e+00, -4.2869652e+00, -5.0830077e+00, -4.8997751e+00, -4.2051938e+00, -3.7492000e+00, -3.9258207e+00, -4.4383658e+00, -4.5869571e+00, -3.9419649e+00, -2.7982407e+00, -1.9807341e+00, -2.1529597e+00, -3.2394749e+00, -4.4826813e+00, -5.0866185e+00, -4.8722474e+00, -4.3628749e+00, -4.2383411e+00, -4.6663526e+00, -5.1239964e+00, -4.8756528e+00, -3.6845277e+00, -2.1280263e+00, -1.2330191e+00, -1.7283428e+00, -3.5225844e+00, -5.8063174e+00, -7.6539063e+00, -8.6155329e+00, -8.8510886e+00, -8.7774925e+00, -8.6028616e+00, -8.1717608e+00, -7.2291488e+00, -5.8200930e+00, -4.4194694e+00, -3.6320457e+00, -3.7005096e+00, -4.2581739e+00, -4.5813981e+00, -4.1768104e+00, -3.2345707e+00, -2.5594250e+00, -3.0039580e+00, -4.8345441e+00, -7.5185566e+00, -1.0081927e+01, -1.1737521e+01, -1.2302708e+01, -1.2143805e+01, -1.1789275e+01, -1.1581651e+01, -1.1615704e+01, -1.1895111e+01, -1.2451160e+01, -1.3270791e+01, -1.4140258e+01, -1.4638581e+01, -1.4373730e+01, -1.3291137e+01, -1.1775249e+01, -1.0430380e+01, -9.7094890e+00, -9.6855215e+00, -1.0116694e+01, -1.0696653e+01, -1.1255240e+01, -1.1781623e+01, -1.2337214e+01, -1.2999619e+01, -1.3877037e+01, -1.5102313e+01, -1.6726827e+01, -1.8580260e+01, -2.0265260e+01, -2.1368696e+01, -2.1755289e+01, -2.1686854e+01, -2.1632059e+01, -2.1904912e+01, -2.2437186e+01, -2.2881424e+01, -2.2949910e+01, -2.2689556e+01, -2.2458279e+01, -2.2635110e+01, -2.3317078e+01, -2.4245821e+01, -2.5001184e+01, -2.5292867e+01, -2.5135386e+01, -2.4806209e+01, -2.4642854e+01, -2.4822496e+01, -2.5260410e+01, -2.5689785e+01, -2.5878344e+01, -2.5835930e+01, -2.5839918e+01, -2.6213962e+01, -2.7003610e+01, -2.7834147e+01, -2.8139646e+01, -2.7636108e+01, -2.6636688e+01, -2.5868856e+01, -2.5871125e+01, -2.6473410e+01, -2.6871073e+01, -2.6307493e+01, -2.4796432e+01, -2.3206955e+01, -2.2566371e+01, -2.3163351e+01, -2.4270177e+01, -2.4780803e+01, -2.4223900e+01, -2.3233029e+01, -2.3018038e+01, -2.4281756e+01, -2.6539444e+01, -2.8447454e+01, -2.8854303e+01, -2.7669728e+01, -2.5849364e+01, -2.4590470e+01, -2.4477064e+01, -2.5248042e+01, -2.6228670e+01, -2.6905695e+01, -2.7133602e+01, -2.6932574e+01, -2.6246323e+01, -2.4978323e+01, -2.3238399e+01, -2.1462700e+01, -2.0205318e+01, -1.9769743e+01, -2.0036931e+01, -2.0649294e+01, -2.1344126e+01, -2.2090217e+01, -2.2912903e+01, -2.3642085e+01, -2.3908704e+01, -2.3448734e+01, -2.2429030e+01, -2.1448328e+01, -2.1159447e+01, -2.1816610e+01, -2.3125565e+01, -2.4501287e+01, -2.5488423e+01, -2.5995191e+01, -2.6197942e+01, -2.6267690e+01, -2.6182665e+01, -2.5760066e+01, -2.4829559e+01, -2.3377004e+01, -2.1555703e+01, -1.9589186e+01, -1.7656640e+01, -1.5835043e+01, -1.4119671e+01, -1.2498288e+01, -1.1020826e+01, -9.7956620e+00, -8.8869823e+00, -8.1858932e+00, -7.4009962e+00, -6.2543783e+00, -4.7759197e+00, -3.4282317e+00, -2.8654585e+00, -3.4371715e+00, -4.8346569e+00, -6.2331395e+00, -6.8796324e+00, -6.6526160e+00, -6.0969783e+00, -5.8896997e+00, -6.2221004e+00, -6.6768281e+00, -6.7107935e+00, -6.2604098e+00, -5.8507411e+00, -6.0735289e+00, -6.9421917e+00, -7.7912226e+00, -7.8770334e+00, -7.1380628e+00, -6.3747979e+00, -6.6313647e+00, -8.3121386e+00, -1.0826565e+01, -1.3072337e+01, -1.4306403e+01, -1.4634882e+01, -1.4750597e+01, -1.5243217e+01, -1.6133550e+01, -1.6980009e+01, -1.7336869e+01, -1.7084811e+01, -1.6398952e+01, -1.5531302e+01, -1.4704540e+01, -1.4163556e+01, -1.4164535e+01, -1.4751930e+01, -1.5511917e+01, -1.5671381e+01, -1.4643942e+01, -1.2624617e+01, -1.0640820e+01, -9.8690218e+00, -1.0706931e+01, -1.2394985e+01, -1.3563868e+01, -1.3288903e+01, -1.1784094e+01, -1.0183872e+01, -9.6434348e+00, -1.0523854e+01, -1.2266776e+01, -1.3922392e+01, -1.4795801e+01, -1.4726467e+01, -1.3952349e+01, -1.2847489e+01, -1.1774866e+01, -1.1032648e+01, -1.0754229e+01, -1.0772814e+01, -1.0641260e+01, -9.9213435e+00, -8.5581743e+00, -6.9787635e+00, -5.7582849e+00, -5.1267298e+00, -4.7944822e+00, -4.2961225e+00, -3.5296845e+00, -2.9368520e+00, -3.1006567e+00, -4.1286611e+00, -5.4426781e+00, -6.2263978e+00, -6.1341103e+00, -5.5838705e+00, -5.3437966e+00, -5.8031246e+00, -6.6250395e+00, -7.1004289e+00, -6.8353452e+00, -6.0912683e+00, -5.4606511e+00, -5.2273117e+00, -5.0630481e+00, -4.3575725e+00, -2.8388786e+00, -8.6155311e-01,  9.1020777e-01,  2.0880177e+00,  2.8238067e+00,  3.5113879e+00,  4.2639596e+00,  4.7298202e+00,  4.4558923e+00,  3.4420576e+00,  2.3168120e+00,  1.9142286e+00,  2.5994711e+00,  3.9321970e+00,  4.9597225e+00,  4.8914120e+00,  3.6169396e+00,  1.7152562e+00, 3.7301907e-02, -7.7089710e-01, -5.0413115e-01,  6.3987833e-01,  2.2203714e+00,  3.7079612e+00,  4.6247596e+00,  4.6980740e+00,  3.9807252e+00,  2.8332835e+00,  1.7345713e+00,  1.0359336e+00,  8.3985543e-01,  1.0766226e+00,  1.6691320e+00,  2.6015334e+00,  3.8224605e+00,  5.1035318e+00,  6.0427566e+00,  6.2730126e+00,  5.7289250e+00,  4.7420051e+00,  3.8587830e+00,  3.5003559e+00,  3.7081058e+00,  4.1477400e+00,  4.3464715e+00,  3.9836606e+00,  3.0520654e+00,  1.8261364e+00,  7.0081627e-01,  1.0480114e-02, -9.6360069e-02,  2.9594594e-01,  9.0029150e-01,  1.3334125e+00,  1.2861989e+00,  7.0231014e-01, -1.3418662e-01, -6.9211804e-01, -4.6750521e-01,  6.9271435e-01,  2.4281069e+00,  4.0148642e+00,  4.7858975e+00,  4.5672715e+00,  3.8176145e+00,  3.3326814e+00,  3.6921634e+00,  4.8454423e+00,  6.1608550e+00,  6.9208017e+00,  6.8880491e+00,  6.4934905e+00,  6.4853605e+00,  7.3119980e+00,  8.7294146e+00,  9.9448456e+00,  1.0177058e+01,  9.1926871e+00,  7.4243188e+00,  5.6301655e+00,  4.4040989e+00,  3.9068942e+00, 3.9524178e+00,  4.2853598e+00,  4.7840480e+00,  5.4592884e+00,  6.3284159e+00,  7.3247825e+00,  8.3155358e+00,  9.1697875e+00,  9.7858794e+00,  1.0064506e+01,  9.8968390e+00,  9.2241638e+00,  8.1330044e+00,  6.8834342e+00,  5.8075963e+00,  5.1294180e+00,  4.8371494e+00,  4.7105067e+00,  4.4881120e+00,  4.0554684e+00,  3.5197308e+00,  3.1189976e+00,  3.0283847e+00,  3.1976603e+00,  3.3423701e+00,  3.1157772e+00,  2.3612915e+00,  1.2646824e+00,  2.6532014e-01, -2.5026599e-01, -2.6263013e-01, -1.7895357e-01, -5.3929887e-01, -1.5569271e+00, -2.8574852e+00, -3.6708259e+00, -3.3805275e+00, -2.0245824e+00, -3.4332528e-01,  6.8704637e-01,  4.8815581e-01, -7.9625899e-01, -2.5002805e+00, -3.9505444e+00, -4.8659840e+00, -5.3705929e+00, -5.7135428e+00, -6.0203049e+00, -6.2960041e+00, -6.5990557e+00, -7.1159782e+00, -7.9854005e+00, -9.0176107e+00, -9.6251639e+00, -9.1301618e+00, -7.2671834e+00, -4.4817844e+00, -1.7521120e+00, -3.8333369e-02,  2.3713458e-01, -6.8456956e-01, -2.1962503e+00, -3.7476635e+00, -5.0545821e+00, -6.0065364e+00, -6.4766264e+00, -6.2950609e+00, -5.4373008e+00, -4.2193250e+00, -3.2473491e+00, -3.0874037e+00, -3.8947904e+00, -5.3092503e+00, -6.7082931e+00, -7.6114972e+00, -7.9172189e+00, -7.8260632e+00, -7.5902157e+00, -7.3513558e+00, -7.1850437e+00, -7.2194171e+00, -7.6105535e+00, -8.3353936e+00, -9.0213903e+00, -9.0782875e+00, -8.1362831e+00, -6.4539751e+00, -4.8904951e+00, -4.3633357e+00, -5.1755199e+00, -6.7628872e+00, -8.0934362e+00, -8.4026962e+00, -7.6627067e+00, -6.4264693e+00, -5.2469228e+00, -4.2275290e+00, -3.0948508e+00, -1.6630731e+00, -1.8903232e-01,  7.5654088e-01,  7.8809147e-01,  9.5135383e-02, -6.5039347e-01, -7.8352920e-01, -9.0838218e-02,  1.1501760e+00,  2.4906113e+00,  3.6328612e+00,  4.4805490e+00,  4.9830854e+00,  5.0590792e+00,  4.7434041e+00,  4.3795327e+00,  4.5527544e+00,  5.7005001e+00,  7.7052418e+00,  9.8710311e+00,  1.1369910e+01,  1.1809125e+01,  1.1445441e+01,  1.0890102e+01,  1.0600249e+01,  1.0605524e+01,  1.0646942e+01,  1.0506012e+01,  1.0174511e+01,  9.7506016e+00, 9.2572761e+00,  8.6265337e+00,  7.8531403e+00,  7.0941975e+00,  6.5491771e+00,  6.2350448e+00,  5.9386949e+00,  5.4614258e+00,  4.9259009e+00,  4.7825059e+00,  5.4205473e+00,  6.7168489e+00,  7.9886052e+00,  8.4744477e+00,  7.9531394e+00,  6.9347719e+00,  6.2250466e+00,  6.2377260e+00,  6.6652153e+00,  6.7868605e+00,  6.1170802e+00,  4.8147421e+00,  3.5303198e+00,  2.8816888e+00,  3.0319735e+00,  3.6734494e+00,  4.3276136e+00,  4.6499103e+00,  4.5354598e+00,  4.0657431e+00,  3.4350263e+00,  2.8966903e+00,  2.6653962e+00,  2.7680581e+00,  2.9783167e+00,  2.9722262e+00,  2.6332672e+00,  2.2216532e+00,  2.1836471e+00,  2.7181165e+00,  3.5103522e+00,  3.9462797e+00,  3.6699001e+00,  2.9726849e+00,  2.6098407e+00,  3.1664635e+00,  4.5437792e+00,  6.0454720e+00,  6.9815405e+00,  7.2172464e+00,  7.1634851e+00,  7.2637228e+00,  7.5202834e+00,  7.5324923e+00,  6.9740034e+00,  5.9824074e+00,  5.0371192e+00,  4.4492862e+00,  4.0077657e+00,  3.1780869e+00,  1.6832243e+00, -1.1226929e-01, -1.4198910e+00, -1.6676467e+00, -9.7223043e-01, -1.5193293e-02,  5.3943590e-01,  5.4142752e-01,  3.4832290e-01,  4.0054979e-01,  8.2339553e-01,  1.3989893e+00,  1.8430680e+00,  2.0471529e+00,  2.0586268e+00,  1.8978034e+00,  1.4791481e+00,  7.4894825e-01, -1.2540868e-01, -7.5782728e-01, -7.7692514e-01, -7.6809280e-02,  1.1501002e+00,  2.6057095e+00,  4.0896693e+00,  5.5212659e+00,  6.8149510e+00,  7.8115189e+00,  8.3834875e+00,  8.5992369e+00,  8.7227586e+00,  8.9850833e+00,  9.3276188e+00,  9.3910631e+00,  8.8020212e+00,  7.5072056e+00,  5.8384878e+00,  4.2440066e+00,  2.9435288e+00,  1.8328816e+00,  7.0472936e-01, -4.6425870e-01, -1.4623562e+00, -2.0693465e+00, -2.3039502e+00, -2.4135329e+00, -2.6063045e+00, -2.8128897e+00, -2.7510728e+00, -2.2541547e+00, -1.5266077e+00, -1.0278728e+00, -1.0459837e+00, -1.3622610e+00, -1.3764335e+00, -6.5207306e-01,  5.7950648e-01,  1.4464748e+00,  1.0549755e+00, -7.6947815e-01, -3.2419502e+00, -5.1235620e+00, -5.6040495e+00, -4.8665723e+00, -3.8875757e+00, -3.6478364e+00, -4.4068989e+00, -5.6192665e+00, -6.5128872e+00, -6.7910204e+00, -6.8406116e+00, -7.2944773e+00, -8.3818578e+00, -9.6833278e+00, -1.0519321e+01, -1.0603811e+01, -1.0341359e+01, -1.0476796e+01, -1.1416113e+01, -1.2850807e+01, -1.4035335e+01, -1.4452978e+01, -1.4244284e+01, -1.4009696e+01, -1.4202560e+01, -1.4713164e+01, -1.5038232e+01, -1.4844123e+01, -1.4348786e+01, -1.4142789e+01, -1.4637613e+01, -1.5693955e+01, -1.6781700e+01, -1.7474229e+01, -1.7752614e+01, -1.7823503e+01, -1.7690793e+01, -1.6995565e+01, -1.5354856e+01, -1.2879237e+01, -1.0313085e+01, -8.5842799e+00, -8.1360609e+00, -8.6467797e+00, -9.3803344e+00, -9.8135149e+00, -9.9515854e+00, -1.0089758e+01, -1.0335572e+01, -1.0410314e+01, -9.9183937e+00, -8.7827772e+00, -7.4005882e+00, -6.3888185e+00, -6.1951806e+00, -6.9171345e+00, -8.3821672e+00, -1.0268943e+01, -1.2109495e+01, -1.3296068e+01, -1.3320999e+01, -1.2207414e+01, -1.0728028e+01, -1.0035409e+01, -1.0840387e+01, -1.2802449e+01, -1.4740226e+01, -1.5573288e+01, -1.5197373e+01, -1.4498885e+01, -1.4492361e+01, -1.5390191e+01, -1.6469957e+01, -1.6818521e+01, -1.6180558e+01, -1.5077033e+01, -1.4141618e+01, -1.3436197e+01, -1.2501170e+01, -1.1076376e+01, -9.6634214e+00, -9.2228571e+00, -1.0218509e+01, -1.1983069e+01, -1.3148251e+01, -1.2834331e+01, -1.1477323e+01, -1.0452370e+01, -1.0802463e+01, -1.2274032e+01, -1.3589857e+01, -1.3696868e+01, -1.2779469e+01, -1.2061998e+01, -1.2605264e+01, -1.4268291e+01, -1.5821572e+01, -1.6071374e+01, -1.4905210e+01, -1.3300696e+01, -1.2368856e+01, -1.2389241e+01, -1.2705228e+01, -1.2454500e+01, -1.1345022e+01, -9.7693466e+00, -8.2963985e+00, -7.1713107e+00, -6.3197956e+00, -5.7258052e+00, -5.6494050e+00, -6.3875846e+00, -7.8458409e+00, -9.4338584e+00, -1.0456779e+01, -1.0633227e+01, -1.0230739e+01, -9.7168096e+00, -9.3265206e+00, -8.9982838e+00, -8.6859509e+00, -8.6200913e+00, -9.1523135e+00, -1.0310339e+01, -1.1568859e+01, -1.2166723e+01, -1.1734933e+01, -1.0638461e+01, -9.6767481e+00, -9.4040768e+00, -9.6979054e+00, -9.9510040e+00, -9.6566279e+00, -8.8097942e+00, -7.7879040e+00, -6.9173432e+00, -6.2087918e+00, -5.4983993e+00, -4.7693593e+00, -4.2562728e+00, -4.2132010e+00, -4.6185329e+00, -5.1550498e+00, -5.4855304e+00, -5.5170917e+00, -5.3823266e+00, -5.2098058e+00, -4.9995415e+00, -4.7673311e+00, -4.7489271e+00, -5.3167550e+00, -6.5700223e+00, -8.0016791e+00, -8.6977594e+00, -8.0393867e+00, -6.3094570e+00, -4.5764689e+00, -3.8566384e+00, -4.2689254e+00, -4.9685539e+00, -4.9428608e+00, -3.9291625e+00, -2.5832752e+00, -1.7484098e+00, -1.5582945e+00, -1.2805236e+00, -7.8461770e-02,  2.0518509e+00,  4.1159172e+00,  4.9399809e+00,  4.2277819e+00,  2.8557945e+00,  2.1160049e+00,  2.6014451e+00,  3.7503223e+00,  4.4300389e+00,  3.9798680e+00,  2.7544870e+00,  1.7370808e+00,  1.6685071e+00,  2.5230499e+00,  3.7375579e+00,  4.8477024e+00,  5.8529538e+00,  6.9965269e+00,  8.2803609e+00,  9.2834390e+00,  9.4965107e+00,  8.8294961e+00,  7.7660469e+00,  6.9965457e+00,  6.8718689e+00,  7.1734751e+00,  7.3680145e+00,  7.0637158e+00,  6.2541894e+00,  5.2060775e+00,  4.1985234e+00,  3.3958079e+00,  2.9040011e+00, 2.8266554e+00,  3.1657814e+00,  3.6602693e+00,  3.8083778e+00,  3.1746615e+00,  1.7657272e+00,  1.1537521e-01, -1.0648072e+00, -1.4190823e+00, -1.2220840e+00, -1.1580573e+00, -1.7910484e+00, -3.1611180e+00, -4.8021662e+00, -6.1043260e+00, -6.6917386e+00, -6.5564050e+00, -5.9562635e+00, -5.2614159e+00, -4.8701719e+00, -5.1434578e+00, -6.2552197e+00, -7.9970157e+00, -9.7346857e+00, -1.0674255e+01, -1.0340271e+01, -8.9341197e+00, -7.2720348e+00, -6.3100901e+00, -6.5876772e+00, -7.9771569e+00, -9.8730529e+00, -1.1621765e+01, -1.2862968e+01, -1.3599152e+01, -1.4054607e+01, -1.4501649e+01, -1.5158995e+01, -1.6137914e+01, -1.7382659e+01, -1.8632349e+01, -1.9491767e+01, -1.9633115e+01, -1.9010535e+01, -1.7911740e+01, -1.6784337e+01, -1.5966930e+01, -1.5539149e+01, -1.5389861e+01, -1.5397922e+01, -1.5528051e+01, -1.5756748e+01, -1.5940818e+01, -1.5814515e+01, -1.5167106e+01, -1.4045373e+01, -1.2765813e+01, -1.1687502e+01, -1.0934837e+01, -1.0328973e+01, -9.6026452e+00, -8.7020273e+00, -7.8854710e+00, -7.5141621e+00, -7.7247179e+00, -8.2940969e+00, -8.8293908e+00, -9.1035387e+00, -9.2137471e+00, -9.4094436e+00, -9.7643225e+00, -1.0034089e+01, -9.8729844e+00, -9.2246267e+00, -8.4977693e+00, -8.3008646e+00, -8.9147176e+00, -9.9616428e+00, -1.0606179e+01, -1.0177053e+01, -8.7155672e+00, -6.9821059e+00, -5.8888302e+00, -5.8085436e+00, -6.3216833e+00, -6.6031111e+00, -6.1213412e+00, -5.0730614e+00, -4.2109912e+00, -4.2333422e+00, -5.2511009e+00, -6.7506530e+00, -8.0306966e+00, -8.7051666e+00, -8.8546689e+00, -8.7596930e+00, -8.5278865e+00, -7.9944733e+00, -6.9831495e+00, -5.6456755e+00, -4.5006966e+00, -4.0649375e+00, -4.3698375e+00, -4.8140909e+00, -4.5528190e+00, -3.1635361e+00, -1.0543739e+00,  7.5354336e-01,  1.3450041e+00,  5.8770015e-01, -7.6662931e-01, -1.6468352e+00, -1.4577780e+00, -4.9137760e-01,  3.5134101e-01,  2.8513561e-01, -7.6931057e-01, -2.1781883e+00, -3.1371331e+00, -3.3031082e+00, -3.0205284e+00, -3.0051302e+00, -3.7824035e+00, -5.3320303e+00, -7.1721792e+00, -8.7478601e+00, -9.7834910e+00, -1.0358317e+01, -1.0728730e+01, -1.1102471e+01, -1.1536895e+01, -1.1972885e+01, -1.2307979e+01, -1.2440531e+01, -1.2303255e+01, -1.1923101e+01, -1.1474033e+01, -1.1234724e+01, -1.1423158e+01, -1.2015874e+01, -1.2720362e+01, -1.3159105e+01, -1.3126930e+01, -1.2697617e+01, -1.2086705e+01, -1.1410826e+01, -1.0585149e+01, -9.4570971e+00, -8.0259060e+00, -6.5038841e+00, -5.1438541e+00, -4.0166387e+00, -2.9904599e+00, -1.9507017e+00, -1.0207399e+00, -5.1226619e-01, -6.1244412e-01, -1.1279269e+00, -1.6019696e+00, -1.7571983e+00, -1.8415769e+00, -2.4769813e+00, -4.0635806e+00, -6.2607134e+00, -8.0659451e+00, -8.4981462e+00, -7.3249054e+00, -5.2076228e+00, -3.1537866e+00, -1.7830132e+00, -1.0444285e+00, -5.5421558e-01, -1.2661169e-01,  6.4445564e-02, -1.8041036e-01, -6.7145017e-01, -8.3636608e-01, -1.9634400e-01,  1.1531086e+00,  2.5563224e+00,  3.3220287e+00,  3.2674012e+00,  2.7797157e+00,  2.3808649e+00,  2.2578560e+00,  2.2083563e+00,  1.9857259e+00,  1.6196880e+00,  1.3621064e+00,  1.3565997e+00,  1.4462648e+00,  1.3640886e+00, 1.0896741e+00,  9.3160237e-01,  1.1828306e+00,  1.6984875e+00,  1.8960575e+00,  1.2666973e+00, -8.0619070e-02, -1.4262929e+00, -2.0640735e+00, -1.9662645e+00, -1.8232811e+00, -2.3829584e+00, -3.7147917e+00, -5.1166889e+00, -5.7540327e+00, -5.3982478e+00, -4.5481965e+00, -3.8573869e+00, -3.4935758e+00, -3.0984049e+00, -2.3552533e+00, -1.5091325e+00, -1.2203710e+00, -1.8489370e+00, -2.9141552e+00, -3.3593704e+00, -2.4571032e+00, -5.1429534e-01,  1.3199340e+00,  1.9978633e+00,  1.4052801e+00,  3.3591370e-01, -3.1169960e-01, -3.1818357e-01, -1.9155795e-01, -5.1993979e-01, -1.3270577e+00, -2.0565992e+00, -2.1370939e+00, -1.5158358e+00, -6.4506323e-01, -9.6885233e-04,  3.3130971e-01,  6.0940009e-01,  1.0507913e+00,  1.5753358e+00,  1.9386209e+00,  2.0555080e+00,  2.1059841e+00,  2.2857455e+00,  2.4926281e+00,  2.3375505e+00,  1.5185028e+00,  1.8094208e-01, -1.1313875e+00, -1.9197819e+00, -2.1421707e+00, -2.1930696e+00, -2.4886433e+00, -3.0843023e+00, -3.6959601e+00, -4.0664665e+00, -4.2734906e+00, -4.6646304e+00, -5.5113491e+00, -6.7541373e+00, -8.0832327e+00, -9.2277855e+00, -1.0125729e+01, -1.0820664e+01, -1.1262182e+01, -1.1288992e+01, -1.0835845e+01, -1.0107092e+01, -9.4604776e+00, -9.0687999e+00, -8.7203168e+00, -8.0305345e+00, -6.9185804e+00, -5.8773519e+00, -5.7023977e+00, -6.8467739e+00, -8.9571501e+00, -1.1027783e+01, -1.2077025e+01, -1.1798607e+01, -1.0679125e+01, -9.5460048e+00, -8.9684783e+00, -8.9838892e+00, -9.2778181e+00, -9.5663928e+00, -9.8369022e+00, -1.0304858e+01, -1.1194611e+01, -1.2533870e+01, -1.4075987e+01, -1.5369006e+01, -1.5952986e+01, -1.5634601e+01, -1.4707024e+01, -1.3925464e+01, -1.4147760e+01, -1.5805775e+01, -1.8579004e+01, -2.1558535e+01, -2.3821788e+01, -2.4988527e+01, -2.5331774e+01, -2.5398235e+01, -2.5510052e+01, -2.5582877e+01, -2.5353335e+01, -2.4708888e+01, -2.3753945e+01, -2.2573661e+01, -2.1015887e+01, -1.8812247e+01, -1.5985830e+01, -1.3130866e+01, -1.1195570e+01, -1.0846746e+01, -1.1922866e+01, -1.3464857e+01, -1.4341746e+01, -1.3986225e+01, -1.2675628e+01, -1.1192772e+01, -1.0203194e+01, -9.8536938e+00, -9.8330864e+00, -9.7302739e+00, -9.3439557e+00, -8.7434583e+00, -8.1418547e+00, -7.7561449e+00, -7.7391902e+00, -8.1381465e+00, -8.8303729e+00, -9.4917176e+00, -9.7021810e+00, -9.1907362e+00, -8.0559111e+00, -6.7607800e+00, -5.8650484e+00, -5.6857408e+00, -6.1506404e+00, -6.9445376e+00, -7.7954100e+00, -8.6413614e+00, -9.5538158e+00, -1.0532378e+01, -1.1401601e+01, -1.1926678e+01, -1.2040377e+01, -1.1954388e+01, -1.2024960e+01, -1.2463071e+01, -1.3123430e+01, -1.3551360e+01, -1.3266518e+01, -1.2086160e+01, -1.0270090e+01, -8.4006604e+00, -7.0821906e+00, -6.6396820e+00, -6.9778699e+00, -7.6653884e+00, -8.1950734e+00, -8.2844002e+00, -8.0485376e+00, -7.9265471e+00, -8.3719989e+00, -9.4809773e+00, -1.0816471e+01, -1.1603663e+01, -1.1227805e+01, -9.7168345e+00, -7.8368199e+00, -6.6581168e+00, -6.8340323e+00, -8.0889010e+00, -9.3158549e+00, -9.2693184e+00, -7.3978339e+00, -4.2389466e+00, -1.1001419e+00,  7.4286111e-01,  7.7165708e-01, -5.9125369e-01, -2.3871484e+00, -3.7551742e+00, -4.3459660e+00, -4.3105558e+00, -4.0000793e+00, -3.6697857e+00, -3.3792308e+00, -3.0686910e+00, -2.6735838e+00, -2.1812488e+00, -1.6388540e+00, -1.1576638e+00, -9.0878178e-01, -1.0623043e+00, -1.6654476e+00, -2.5483033e+00, -3.3712551e+00, -3.8260175e+00, -3.8534947e+00, -3.6971814e+00, -3.7345282e+00, -4.2187860e+00, -5.1427159e+00, -6.3240118e+00, -7.6123337e+00, -9.0170075e+00, -1.0644272e+01, -1.2521483e+01, -1.4489945e+01, -1.6272858e+01, -1.7651519e+01, -1.8583336e+01, -1.9162037e+01, -1.9480398e+01, -1.9547956e+01, -1.9351317e+01, -1.8989894e+01, -1.8729552e+01, -1.8882145e+01, -1.9582886e+01, -2.0648292e+01, -2.1650006e+01, -2.2169897e+01, -2.2053147e+01, -2.1474075e+01, -2.0775412e+01, -2.0214786e+01, -1.9813039e+01, -1.9404912e+01, -1.8827706e+01, -1.8084569e+01, -1.7359658e+01, -1.6895596e+01, -1.6848674e+01, -1.7229618e+01, -1.7941925e+01, -1.8848105e+01, -1.9802437e+01, -2.0660422e+01, -2.1314303e+01, -2.1756073e+01, -2.2090994e+01, -2.2428562e+01, -2.2698971e+01, -2.2570984e+01, -2.1620795e+01, -1.9689789e+01, -1.7146123e+01, -1.4769524e+01, -1.3267486e+01, -1.2776682e+01, -1.2774994e+01, -1.2513799e+01, -1.1628679e+01, -1.0412003e+01, -9.5172529e+00, -9.3691989e+00, -9.8133374e+00, -1.0306614e+01, -1.0445364e+01, -1.0323683e+01, -1.0396741e+01, -1.1002096e+01, -1.2002318e+01, -1.2869090e+01, -1.3098240e+01, -1.2559010e+01, -1.1497549e+01, -1.0275231e+01, -9.1433152e+00, -8.2373348e+00, -7.6917802e+00, -7.6583834e+00, -8.1737890e+00, -9.0486948e+00, -9.9561120e+00, -1.0664107e+01, -1.1164148e+01, -1.1539468e+01, -1.1718133e+01, -1.1420877e+01, -1.0424882e+01, -8.8982757e+00, -7.4235954e+00, -6.6117317e+00, -6.6409689e+00, -7.1702749e+00, -7.7145722e+00, -8.0907290e+00, -8.4641736e+00, -8.9608803e+00, -9.3087731e+00, -8.9793107e+00, -7.7607452e+00, -6.1628809e+00, -5.1305851e+00, -5.2197447e+00, -5.9968576e+00, -6.3004799e+00, -5.2044694e+00, -2.8187097e+00, -1.7792465e-01,  1.6721315e+00,  2.5153566e+00,  2.9496091e+00,  3.5951164e+00,  4.3739920e+00,  4.6050664e+00,  3.7990748e+00,  2.3083011e+00, 1.1315225e+00,  1.0448529e+00,  1.9249460e+00,  2.9392621e+00,  3.4004048e+00,  3.4201233e+00,  3.7231099e+00,  4.8455728e+00,  6.5552952e+00,  8.0744296e+00,  8.8499976e+00,  9.0696586e+00,  9.4085398e+00,  1.0292637e+01,  1.1442788e+01,  1.2149180e+01,  1.1974894e+01,  1.1178808e+01,  1.0472000e+01,  1.0401308e+01,  1.0979675e+01,  1.1860606e+01,  1.2774799e+01,  1.3731010e+01,  1.4815733e+01,  1.5897657e+01,  1.6628340e+01,  1.6762405e+01,  1.6434027e+01,  1.6058600e+01,  1.5937899e+01,  1.5975693e+01,  1.5798144e+01,  1.5147577e+01,  1.4142179e+01,  1.3153992e+01,  1.2462444e+01,  1.2050563e+01,  1.1722441e+01,  1.1369363e+01,  1.1087340e+01,  1.1057296e+01,  1.1370275e+01,  1.1999840e+01,  1.2899260e+01,  1.4033725e+01,  1.5267831e+01,  1.6277220e+01,  1.6701733e+01,  1.6487318e+01,  1.6061731e+01,  1.6047895e+01,  1.6666726e+01,  1.7381116e+01,  1.7215195e+01,  1.5576517e+01,  1.2877991e+01,  1.0357193e+01,  9.1851259e+00,  9.6067763e+00,  1.0838561e+01,  1.1772724e+01,  1.1843758e+01,  1.1333900e+01, 1.0958390e+01,  1.1202044e+01,  1.1999065e+01,  1.2927409e+01,  1.3607222e+01,  1.3906614e+01,  1.3858832e+01,  1.3496535e+01,  1.2808499e+01,  1.1804901e+01,  1.0546702e+01,  9.0941264e+00,  7.4853922e+00,  5.8302885e+00,  4.4114071e+00,  3.5947785e+00,  3.5359983e+00,  3.9538230e+00,  4.2722362e+00,  4.0903973e+00,  3.5524305e+00,  3.2059036e+00,  3.4206528e+00,  3.9261205e+00,  3.9786197e+00,  3.0685346e+00,  1.4995678e+00,  2.3087180e-01,  6.3979599e-02,  9.1606102e-01,  1.8777534e+00,  2.0215411e+00,  1.2137070e+00,  1.8802480e-01, -1.5069497e-01,  4.8449112e-01,  1.5888021e+00,  2.3825160e+00,  2.4603358e+00,  1.9846370e+00,  1.3596377e+00,  8.1575721e-01,  3.1225844e-01, -2.5835372e-01, -8.9318497e-01, -1.5367939e+00, -2.2329349e+00, -3.1039295e+00, -4.1396152e+00, -5.0756493e+00, -5.5878382e+00, -5.6463876e+00, -5.6116065e+00, -5.8723600e+00, -6.3469702e+00, -6.4069195e+00, -5.4126033e+00, -3.3970943e+00, -1.1935954e+00,  2.0688578e-01,  5.0850154e-01,  3.5492728e-01,  7.0771538e-01,  1.9492794e+00, 3.5768941e+00,  4.7632019e+00,  5.1938485e+00,  5.3346367e+00,  5.8872029e+00,  7.0293683e+00,  8.2371454e+00,  8.8536188e+00,  8.7796644e+00,  8.5446723e+00,  8.6877534e+00,  9.1241310e+00,  9.1971535e+00,  8.3927909e+00,  6.9797756e+00,  5.8857560e+00,  5.8862885e+00,  6.8827375e+00,  7.9653269e+00,  8.1898883e+00,  7.3233216e+00,  5.8920883e+00,  4.5778370e+00,  3.6057820e+00,  2.6888666e+00,  1.4761991e+00, -2.5325806e-02, -1.4708418e+00, -2.5359633e+00, -3.1783312e+00, -3.5452026e+00, -3.7060720e+00, -3.5728659e+00, -3.1119793e+00, -2.5736372e+00, -2.4131910e+00, -2.9218053e+00, -3.9347194e+00, -4.9421746e+00, -5.5223928e+00, -5.6795370e+00, -5.7640939e+00, -6.0797678e+00, -6.5907839e+00, -7.0190730e+00, -7.2057856e+00, -7.3440960e+00, -7.8359531e+00, -8.9139150e+00, -1.0396345e+01, -1.1799305e+01, -1.2687317e+01, -1.2952623e+01, -1.2821294e+01, -1.2637622e+01, -1.2622229e+01, -1.2752149e+01, -1.2792348e+01, -1.2446364e+01, -1.1576850e+01, -1.0395373e+01, -9.4567544e+00, -9.3523798e+00, -1.0235282e+01, -1.1548480e+01, -1.2280169e+01, -1.1667564e+01, -9.8284092e+00, -7.7604074e+00, -6.6340182e+00, -6.9201809e+00, -8.0683401e+00, -8.9882857e+00, -8.8993282e+00, -7.8268701e+00, -6.3964120e+00, -5.2200213e+00, -4.4714780e+00, -3.9592830e+00, -3.4789013e+00, -3.0072231e+00, -2.5728138e+00, -2.0474828e+00, -1.1883839e+00,  6.2570452e-02,  1.3611632e+00,  2.1273409e+00,  2.0013691e+00,  1.1680216e+00,  2.3127753e-01, -2.4390957e-01, -9.7060213e-02,  4.5043940e-01,  1.0919179e+00,  1.6524061e+00,  2.0426463e+00,  2.1206929e+00,  1.7432909e+00,  1.0214774e+00,  4.6413714e-01,  7.1686902e-01,  2.0149658e+00,  3.8448281e+00,  5.2082521e+00,  5.3451717e+00,  4.3075194e+00,  2.8695021e+00,  1.8495147e+00,  1.4490806e+00,  1.1793078e+00,  3.9158772e-01, -1.1037508e+00, -2.8702927e+00, -4.2108344e+00, -4.6807765e+00, -4.3149690e+00, -3.4702742e+00, -2.5245887e+00, -1.7029313e+00, -1.0806500e+00, -6.3795556e-01, -2.8048127e-01,  1.2280203e-01,  6.2154822e-01,  1.0645963e+00,  1.1485712e+00,  6.7233080e-01, -2.1477935e-01, -1.0559217e+00, -1.4573487e+00, -1.4669055e+00, -1.5618931e+00, -2.1857915e+00, -3.2319855e+00, -3.9872058e+00, -3.6605758e+00, -2.0757347e+00,  8.2450962e-02,  1.7044938e+00,  2.0215720e+00,  1.0738135e+00, -4.6015150e-01, -1.8586903e+00, -2.8456154e+00, -3.6086412e+00, -4.4331715e+00, -5.3391489e+00, -6.0331374e+00, -6.1683869e+00, -5.6567044e+00, -4.7818830e+00, -4.0549909e+00, -3.9338041e+00, -4.5840034e+00, -5.8060945e+00, -7.1585071e+00, -8.2117915e+00, -8.7901082e+00, -9.0411281e+00, -9.2733841e+00, -9.6762348e+00, -1.0151801e+01, -1.0412392e+01, -1.0266748e+01, -9.8371313e+00, -9.5008363e+00, -9.6012059e+00, -1.0187007e+01, -1.1005698e+01, -1.1731825e+01, -1.2204085e+01, -1.2473998e+01, -1.2681254e+01, -1.2925900e+01, -1.3250299e+01, -1.3671653e+01, -1.4146036e+01, -1.4476941e+01, -1.4332244e+01, -1.3476504e+01, -1.2070214e+01, -1.0712923e+01, -1.0066489e+01, -1.0300055e+01, -1.0852767e+01, -1.0802586e+01, -9.5928767e+00, -7.5011680e+00, -5.4206539e+00, -4.1289206e+00, -3.6834924e+00, -3.4657797e+00, -2.8020050e+00, -1.5819928e+00, -3.4017164e-01,  2.1629028e-01, -2.3311871e-01, -1.4453696e+00, -2.8767078e+00, -4.0589949e+00, -4.7643806e+00, -4.9391847e+00, -4.6221155e+00, -3.9834595e+00, -3.3739847e+00, -3.1893442e+00, -3.5637350e+00, -4.1708571e+00, -4.3993585e+00, -3.8397894e+00, -2.6883719e+00, -1.6931224e+00, -1.6503824e+00, -2.8481918e+00, -4.8833973e+00, -6.9435890e+00, -8.2798847e+00, -8.5275211e+00, -7.7553028e+00, -6.3597585e+00, -4.9360761e+00, -4.1171053e+00, -4.3160116e+00, -5.4471389e+00, -6.8640051e+00, -7.6889491e+00, -7.3939137e+00, -6.2096121e+00, -5.0036029e+00, -4.6765909e+00, -5.5313053e+00, -7.0971881e+00, -8.5151231e+00, -9.1408043e+00, -8.8986271e+00, -8.1835928e+00, -7.4897828e+00, -7.1042068e+00, -7.0577201e+00, -7.2660821e+00, -7.6695684e+00, -8.2530512e+00, -8.9738654e+00, -9.6964161e+00, -1.0203238e+01, -1.0288871e+01, -9.8966387e+00, -9.2246004e+00, -8.7050549e+00, -8.7997014e+00, -9.6831863e+00, -1.1034113e+01, -1.2152149e+01, -1.2396547e+01, -1.1644796e+01, -1.0385601e+01, -9.3280154e+00, -8.8320410e+00, -8.6522392e+00, -8.2233980e+00, -7.2201864e+00, -5.8598892e+00, -4.6592547e+00, -3.8872075e+00, -3.2611308e+00, -2.2066612e+00, -4.5181197e-01,  1.6095395e+00,  3.1421504e+00,  3.4906870e+00,  2.6487902e+00,  1.1926665e+00, -2.0042778e-01, -1.1860082e+00, -1.8004883e+00, -2.2031592e+00, -2.4578960e+00, -2.5708328e+00, -2.6620855e+00, -2.9927005e+00, -3.7566053e+00, -4.8540810e+00, -5.9305819e+00, -6.7003720e+00, -7.2545691e+00, -8.0270957e+00, -9.4081715e+00, -1.1344381e+01, -1.3296983e+01, -1.4610137e+01, -1.4976513e+01, -1.4618329e+01, -1.4070034e+01, -1.3783800e+01, -1.3880657e+01, -1.4189447e+01, -1.4461378e+01, -1.4550526e+01, -1.4449390e+01, -1.4220461e+01, -1.3924117e+01, -1.3596835e+01, -1.3268750e+01, -1.2989838e+01, -1.2844201e+01, -1.2934263e+01, -1.3318910e+01, -1.3926272e+01, -1.4518787e+01, -1.4789795e+01, -1.4570621e+01, -1.3995762e+01, -1.3456356e+01, -1.3329909e+01, -1.3685576e+01, -1.4219225e+01, -1.4489267e+01, -1.4257848e+01, -1.3647528e+01, -1.2998559e+01, -1.2586180e+01, -1.2461472e+01, -1.2521496e+01, -1.2674470e+01, -1.2899445e+01, -1.3162918e+01, -1.3345834e+01, -1.3324542e+01, -1.3144150e+01, -1.3064866e+01, -1.3358539e+01, -1.4007920e+01, -1.4617093e+01, -1.4678386e+01, -1.3994456e+01, -1.2875654e+01, -1.1923719e+01, -1.1598191e+01, -1.1956883e+01, -1.2770140e+01, -1.3831724e+01, -1.5118257e+01, -1.6653019e+01, -1.8277136e+01, -1.9639382e+01, -2.0464820e+01, -2.0827836e+01, -2.1112132e+01, -2.1654300e+01, -2.2411984e+01, -2.2997414e+01, -2.3054992e+01, -2.2608291e+01, -2.2029907e+01, -2.1673754e+01, -2.1552565e+01, -2.1385228e+01, -2.0943196e+01, -2.0313232e+01, -1.9795703e+01, -1.9561318e+01, -1.9457506e+01, -1.9194247e+01, -1.8716120e+01, -1.8341005e+01, -1.8475210e+01, -1.9172980e+01, -2.0008642e+01, -2.0437788e+01, -2.0319006e+01, -2.0069629e+01, -2.0263790e+01, -2.1034126e+01, -2.1858968e+01, -2.1969831e+01, -2.1024267e+01, -1.9426735e+01, -1.8001441e+01, -1.7319728e+01, -1.7292410e+01, -1.7373161e+01, -1.7146631e+01, -1.6735724e+01, -1.6657795e+01, -1.7283799e+01, -1.8413576e+01, -1.9359771e+01, -1.9467884e+01, -1.8620782e+01, -1.7305540e+01, -1.6204988e+01, -1.5668237e+01, -1.5491867e+01, -1.5169009e+01, -1.4381754e+01, -1.3327776e+01, -1.2613667e+01, -1.2791666e+01, -1.3898079e+01, -1.5360052e+01, -1.6363897e+01, -1.6422801e+01, -1.5714690e+01, -1.4923246e+01, -1.4697164e+01, -1.5149316e+01, -1.5793126e+01, -1.5962220e+01, -1.5362975e+01, -1.4302785e+01, -1.3416583e+01, -1.3142213e+01, -1.3398701e+01, -1.3724121e+01, -1.3713940e+01, -1.3344029e+01, -1.2893115e+01, -1.2568040e+01, -1.2217107e+01, -1.1430819e+01, -9.9572624e+00, -8.0474632e+00, -6.3846079e+00, -5.6108865e+00, -5.8278787e+00, -6.4895268e+00, -6.7899443e+00, -6.2415308e+00, -4.9855890e+00, -3.6030625e+00, -2.6046918e+00, -2.0346050e+00, -1.5110349e+00, -6.4878395e-01,  5.2049233e-01,  1.5136827e+00,  1.7970066e+00,  1.2850703e+00,  4.9683199e-01,  2.0802891e-01,  8.7328406e-01,  2.2983493e+00,  3.8311193e+00,  4.8889717e+00,  5.3552485e+00,  5.5221407e+00,  5.6952620e+00,  5.8868648e+00, 5.9051300e+00,  5.7146673e+00,  5.6394736e+00,  6.1313000e+00,  7.2984418e+00,  8.6942722e+00,  9.6510744e+00,  9.8878520e+00,  9.7853613e+00,  9.9970877e+00,  1.0730495e+01,  1.1426386e+01,  1.1236366e+01,  9.9094134e+00,  8.2193099e+00,  7.4250785e+00,  8.1740165e+00,  9.8538307e+00,  1.1049898e+01,  1.0744390e+01,  9.1705887e+00,  7.5328082e+00,  6.8685918e+00,  7.1453618e+00,  7.4453510e+00,  7.0187316e+00,  6.1251482e+00,  5.7941318e+00,  6.7206503e+00,  8.4027569e+00,  9.4294109e+00,  8.7134621e+00,  6.5233516e+00,  4.3268385e+00,  3.5745025e+00,  4.5395878e+00,  6.2438861e+00,  7.4458417e+00,  7.6900354e+00,  7.4517584e+00,  7.3702221e+00,  7.4594935e+00,  7.1341269e+00,  5.9843024e+00,  4.4322531e+00,  3.5190379e+00,  3.9752155e+00,  5.4873433e+00,  6.9089823e+00,  7.2434593e+00,  6.4706043e+00,  5.4487374e+00,  5.0253168e+00,  5.2358871e+00,  5.3419619e+00,  4.6155163e+00,  3.0696977e+00,  1.4377006e+00,  4.6670809e-01,  2.4148905e-01,  1.6937938e-01, -4.1700027e-01, -1.6528725e+00, -3.0756210e+00, -4.0755529e+00, -4.3730267e+00, -4.1030880e+00, -3.5458217e+00, -2.8691328e+00, -2.1383038e+00, -1.4830955e+00, -1.1346686e+00, -1.2378010e+00, -1.6569779e+00, -2.0443209e+00, -2.1508728e+00, -2.0641754e+00, -2.0988592e+00, -2.4316387e+00, -2.8667376e+00, -3.0043427e+00, -2.6597063e+00, -2.0921764e+00, -1.7775562e+00, -1.9343013e+00, -2.2963556e+00, -2.3960724e+00, -2.0929057e+00, -1.8004351e+00, -2.1399601e+00, -3.3277508e+00, -4.9013017e+00, -6.0868334e+00, -6.4867962e+00, -6.4370183e+00, -6.6838938e+00, -7.6780366e+00, -9.1449461e+00, -1.0324647e+01, -1.0638374e+01, -1.0155307e+01, -9.4519131e+00, -9.0433247e+00, -8.9450670e+00, -8.7522234e+00, -8.1064455e+00, -7.0755795e+00, -6.1039076e+00, -5.6255980e+00, -5.7256066e+00, -6.1273293e+00, -6.4451542e+00, -6.4271103e+00, -6.0075832e+00, -5.2322447e+00, -4.2209530e+00, -3.2102825e+00, -2.5500656e+00, -2.5426591e+00, -3.2074450e+00, -4.1978100e+00, -5.0017223e+00, -5.2926437e+00, -5.1364597e+00, -4.8813971e+00, -4.8486485e+00, -5.1099557e+00, -5.5212303e+00, -5.9136862e+00, -6.2108815e+00, -6.3692293e+00, -6.2691119e+00, -5.7465170e+00, -4.7770339e+00, -3.6092957e+00, -2.6515319e+00, -2.1628370e+00, -2.0341648e+00, -1.8979837e+00, -1.4974298e+00, -9.7606698e-01, -7.9940229e-01, -1.3574516e+00, -2.6013116e+00, -4.0420598e+00, -5.1131431e+00, -5.5811170e+00, -5.6712551e+00, -5.8436766e+00, -6.4408844e+00, -7.4812091e+00, -8.6978013e+00, -9.7256391e+00, -1.0290015e+01, -1.0326790e+01, -1.0028710e+01, -9.7982475e+00, -1.0072305e+01, -1.1059936e+01, -1.2556580e+01, -1.4011289e+01, -1.4849249e+01, -1.4821842e+01, -1.4104950e+01, -1.3077723e+01, -1.2002989e+01, -1.0909470e+01, -9.7567255e+00, -8.6663042e+00, -7.9374076e+00, -7.8051848e+00, -8.1918930e+00, -8.7292712e+00, -9.0544981e+00, -9.0909515e+00, -9.0333438e+00, -9.0644420e+00, -9.1135778e+00, -8.9207340e+00, -8.3392986e+00, -7.5489523e+00, -6.9412966e+00, -6.7893818e+00, -7.0422814e+00, -7.4475278e+00, -7.8490315e+00, -8.3265107e+00, -9.0345276e+00, -9.9484014e+00, -1.0832532e+01, -1.1481824e+01, -1.1945560e+01, -1.2430659e+01, -1.2946976e+01, -1.3105231e+01, -1.2385046e+01, -1.0694866e+01, -8.6584861e+00, -7.2446758e+00, -6.9924139e+00, -7.5452134e+00, -7.9797347e+00, -7.6630719e+00, -6.8311973e+00, -6.3193850e+00, -6.6977699e+00, -7.6652179e+00, -8.3158996e+00, -8.0293921e+00, -7.1023094e+00, -6.4811605e+00, -6.8445454e+00, -7.9334567e+00, -8.7868850e+00, -8.6450401e+00, -7.6291846e+00, -6.5446703e+00, -6.0345132e+00, -5.9471279e+00, -5.5449498e+00, -4.3258156e+00, -2.6211888e+00, -1.3705720e+00, -1.2915499e+00, -2.2440453e+00, -3.3725993e+00, -3.8529537e+00, -3.5308799e+00, -2.9143546e+00, -2.6283087e+00, -2.8966366e+00, -3.4783873e+00, -3.9833902e+00, -4.1772425e+00, -4.0275284e+00, -3.5935983e+00, -2.9909651e+00, -2.4573005e+00, -2.3170065e+00, -2.7182961e+00, -3.3429466e+00, -3.4620148e+00, -2.4511059e+00, -3.9084114e-01,  1.8213610e+00,  3.0544877e+00,  2.7921137e+00,  1.5254257e+00,  3.4119738e-01,  6.0868744e-02,  6.6847184e-01,  1.4728040e+00,  1.7804878e+00,  1.4476670e+00,  8.7627670e-01,  5.7332316e-01, 7.4251935e-01,  1.2360668e+00,  1.7853068e+00,  2.2019537e+00,  2.3849185e+00,  2.2488764e+00,  1.7615567e+00,  1.0757539e+00,  5.4524631e-01,  4.9438972e-01,  9.0604515e-01,  1.3589494e+00,  1.3505333e+00,  7.4790050e-01, -6.8833256e-02, -5.4686984e-01, -4.9002403e-01, -2.6918205e-01, -4.8429345e-01, -1.3661547e+00, -2.4672967e+00, -2.9432642e+00, -2.2040058e+00, -4.0337924e-01,  1.6045631e+00,  2.7663509e+00,  2.3927007e+00,  4.3821728e-01, -2.5656088e+00, -5.7691219e+00, -8.2988872e+00, -9.5361006e+00, -9.3512801e+00, -8.1890737e+00, -6.8724902e+00, -6.1467425e+00, -6.2162548e+00, -6.6082547e+00, -6.4963551e+00, -5.2770372e+00, -2.9988617e+00, -3.6130157e-01,  1.6836925e+00,  2.4436948e+00,  1.8111610e+00,  2.6838349e-01, -1.3802246e+00, -2.4065619e+00, -2.5187868e+00, -2.0104717e+00, -1.5789110e+00, -1.8570749e+00, -2.9281984e+00, -4.1875239e+00, -4.7243461e+00, -3.9997812e+00, -2.3094381e+00, -6.3300839e-01,  5.4763516e-02, -5.1338461e-01, -1.7351853e+00, -2.6335412e+00, -2.5905731e+00, -1.7327491e+00, -7.0378236e-01, -7.9242494e-02,  6.4173760e-02,  1.0232640e-01,  4.4651061e-01,  1.1427320e+00,  1.8030822e+00,  1.8823613e+00,  1.0626905e+00, -5.1659995e-01, -2.2969613e+00, -3.5549806e+00, -3.7390421e+00, -2.7410067e+00, -9.7435989e-01,  8.0664415e-01,  1.8821383e+00,  1.9291825e+00,  1.1379651e+00,  6.8583965e-03, -1.0144927e+00, -1.7497158e+00, -2.2392671e+00, -2.5255626e+00, -2.5453421e+00, -2.2587350e+00, -1.8602395e+00, -1.7841955e+00, -2.4002200e+00, -3.6324977e+00, -4.8845574e+00, -5.4218485e+00, -4.9416286e+00, -3.8435568e+00, -2.9370887e+00, -2.8059260e+00, -3.3584993e+00, -3.9386036e+00, -3.8877427e+00, -3.0749085e+00, -1.9676776e+00, -1.2340508e+00, -1.2470101e+00, -1.8855105e+00, -2.7145655e+00, -3.3061158e+00, -3.4179042e+00, -2.9657804e+00, -1.9436750e+00, -4.4343800e-01,  1.2579659e+00,  2.7113463e+00,  3.4969373e+00,  3.4917242e+00,  2.9689099e+00,  2.4204153e+00,  2.2394168e+00,  2.5226664e+00,  3.1288211e+00,  3.8857517e+00,  4.7214791e+00,  5.6105472e+00,  6.4454577e+00,  7.0254812e+00, 7.2146485e+00,  7.1101374e+00,  7.0154199e+00,  7.1952844e+00,  7.6228483e+00,  7.9667974e+00,  7.8545212e+00,  7.1841915e+00,  6.2071286e+00,  5.3177381e+00,  4.7613992e+00,  4.5311486e+00,  4.5149381e+00,  4.6927154e+00,  5.1383344e+00,  5.8047391e+00,  6.3330510e+00,  6.1478516e+00,  4.8386174e+00,  2.5279557e+00, -1.0943083e-01, -2.2327776e+00, -3.3361784e+00, -3.4815675e+00, -3.1217374e+00, -2.7155243e+00, -2.4712715e+00, -2.3803664e+00, -2.4154647e+00, -2.6485286e+00, -3.1811723e+00, -4.0025010e+00, -4.9593919e+00, -5.8826917e+00, -6.7285801e+00, -7.5726388e+00, -8.4577356e+00, -9.2666114e+00, -9.7792075e+00, -9.8873849e+00, -9.7664771e+00, -9.8230591e+00, -1.0435957e+01, -1.1692608e+01, -1.3324387e+01, -1.4874483e+01, -1.5957426e+01, -1.6436297e+01, -1.6444481e+01, -1.6290509e+01, -1.6315328e+01, -1.6744291e+01, -1.7568617e+01, -1.8518534e+01, -1.9184756e+01, -1.9254368e+01, -1.8711173e+01, -1.7839176e+01, -1.7013172e+01, -1.6447838e+01, -1.6119837e+01, -1.5914009e+01, -1.5824341e+01, -1.5987536e+01, -1.6506843e+01, -1.7257495e+01, -1.7903946e+01, -1.8147729e+01, -1.7974884e+01, -1.7652342e+01, -1.7471227e+01, -1.7501763e+01, -1.7620862e+01, -1.7783026e+01, -1.8221663e+01, -1.9303596e+01, -2.1110697e+01, -2.3146429e+01, -2.4514088e+01, -2.4497780e+01, -2.3081070e+01, -2.0953827e+01, -1.8992753e+01, -1.7656911e+01, -1.6792258e+01, -1.5948939e+01, -1.4861158e+01, -1.3645014e+01, -1.2594436e+01, -1.1854464e+01, -1.1331507e+01, -1.0908494e+01, -1.0689503e+01, -1.0960646e+01, -1.1855623e+01, -1.3044014e+01, -1.3782353e+01, -1.3354414e+01, -1.1574158e+01, -8.9560522e+00, -6.4219812e+00, -4.7657043e+00, -4.2442889e+00, -4.5312406e+00, -5.0033617e+00, -5.1499301e+00, -4.8710541e+00, -4.5204626e+00, -4.6717570e+00, -5.7178673e+00, -7.5278253e+00, -9.4073369e+00, -1.0459310e+01, -1.0157685e+01, -8.7351552e+00, -7.0597547e+00, -6.0416253e+00, -5.9965466e+00, -6.4569526e+00, -6.5753288e+00, -5.7862596e+00, -4.1956365e+00, -2.4209788e+00, -1.0806726e+00, -3.9602840e-01, -2.0784611e-01, -3.0088521e-01, -6.7044779e-01, -1.4791642e+00, -2.7913278e+00, -4.3870949e+00, -5.8528732e+00, -6.8538621e+00, -7.3268025e+00, -7.4405658e+00, -7.4172460e+00, -7.4179909e+00, -7.5723452e+00, -8.0308617e+00, -8.8882582e+00, -1.0003911e+01, -1.0932447e+01, -1.1135908e+01, -1.0383530e+01, -9.0147124e+00, -7.8008774e+00, -7.4703133e+00, -8.2582435e+00, -9.8249816e+00, -1.1561501e+01, -1.2980995e+01, -1.3876331e+01, -1.4202408e+01, -1.3921386e+01, -1.3041994e+01, -1.1811871e+01, -1.0788188e+01, -1.0587968e+01, -1.1452606e+01, -1.3011991e+01, -1.4516930e+01, -1.5396606e+01, -1.5674584e+01, -1.5871240e+01, -1.6473324e+01, -1.7450956e+01, -1.8267989e+01, -1.8382024e+01, -1.7776846e+01, -1.7034469e+01, -1.6870809e+01, -1.7543137e+01, -1.8645977e+01, -1.9456574e+01, -1.9509329e+01, -1.8908000e+01, -1.8155178e+01, -1.7711981e+01, -1.7694383e+01, -1.7920925e+01, -1.8174705e+01, -1.8379228e+01, -1.8541542e+01, -1.8592514e+01, -1.8356593e+01, -1.7719180e+01, -1.6818810e+01, -1.6035787e+01, -1.5739065e+01, -1.5993539e+01, -1.6478352e+01, -1.6681318e+01, -1.6204303e+01, -1.4956072e+01, -1.3148855e+01, -1.1183172e+01, -9.5337504e+00, -8.6488233e+00, -8.8046275e+00, -9.9255920e+00, -1.1510383e+01, -1.2812599e+01, -1.3242121e+01, -1.2728303e+01, -1.1754634e+01, -1.1009417e+01, -1.0909648e+01, -1.1361449e+01, -1.1916634e+01, -1.2155300e+01, -1.1964891e+01, -1.1522948e+01, -1.1069449e+01, -1.0707853e+01, -1.0385182e+01, -9.9997994e+00, -9.4873366e+00, -8.8154798e+00, -7.9519269e+00, -6.8913987e+00, -5.7220058e+00, -4.6226560e+00, -3.7391116e+00, -3.0393464e+00, -2.3192239e+00, -1.4076552e+00, -4.0634496e-01,  2.8354798e-01,  2.3261765e-01, -6.4149349e-01, -1.9199422e+00, -2.9182838e+00, -3.1599300e+00, -2.7294171e+00, -2.2325633e+00, -2.3896444e+00, -3.5527969e+00, -5.4739384e+00, -7.4579574e+00, -8.7807728e+00, -9.1032523e+00, -8.6357874e+00, -7.9646680e+00, -7.6508639e+00, -7.8551172e+00, -8.2429607e+00, -8.2497298e+00, -7.5249957e+00, -6.2165012e+00, -4.8522849e+00, -3.8978818e+00, -3.3526537e+00, -2.7399243e+00, -1.5164876e+00,  4.4472375e-01,  2.7178447e+00, 4.6468115e+00,  5.8345169e+00,  6.3753929e+00,  6.6686946e+00,  7.0370634e+00,  7.5141316e+00,  7.9445707e+00,  8.2141285e+00,  8.3381775e+00,  8.3533015e+00,  8.2097732e+00,  7.8542049e+00,  7.4293427e+00,  7.3151692e+00,  7.8595286e+00,  9.0001462e+00,  1.0177929e+01,  1.0722806e+01,  1.0431358e+01,  9.8129797e+00,  9.7371409e+00,  1.0752637e+01,  1.2654939e+01,  1.4650796e+01,  1.5933859e+01,  1.6160353e+01,  1.5486814e+01,  1.4281001e+01,  1.2868321e+01,  1.1510900e+01,  1.0481172e+01,  9.9953830e+00,  1.0014239e+01,  1.0179154e+01,  1.0074118e+01,  9.6262920e+00,  9.2140051e+00,  9.2802436e+00,  9.7781785e+00,  1.0041404e+01,  9.3220425e+00,  7.5606059e+00,  5.6331015e+00,  4.7503899e+00,  5.4961034e+00,  7.3813247e+00,  9.3370263e+00,  1.0673024e+01,  1.1582951e+01,  1.2730743e+01,  1.4374229e+01,  1.5945419e+01,  1.6541804e+01,  1.5850964e+01,  1.4571670e+01,  1.3876290e+01,  1.4402492e+01,  1.5724952e+01,  1.6785838e+01,  1.6839039e+01,  1.6006380e+01,  1.4981029e+01,  1.4268771e+01,  1.3765137e+01, 1.3051312e+01,  1.2024376e+01,  1.1155322e+01,  1.1092763e+01,  1.2026571e+01,  1.3467348e+01,  1.4660269e+01,  1.5214806e+01,  1.5349106e+01,  1.5571200e+01,  1.6176517e+01,  1.7062476e+01,  1.7969293e+01,  1.8807166e+01,  1.9695330e+01,  2.0710309e+01,  2.1678245e+01,  2.2279674e+01,  2.2362626e+01,  2.2114086e+01,  2.1895533e+01,  2.1923004e+01,  2.2140595e+01,  2.2409820e+01,  2.2772484e+01,  2.3455419e+01,  2.4579497e+01,  2.5890219e+01,  2.6841751e+01,  2.7005262e+01,  2.6415754e+01,  2.5509510e+01,  2.4713210e+01,  2.4101949e+01,  2.3468112e+01,  2.2706392e+01,  2.2076380e+01,  2.2020112e+01,  2.2681358e+01,  2.3617639e+01,  2.4049710e+01,  2.3479773e+01,  2.2125683e+01,  2.0748053e+01,  1.9986923e+01,  1.9781307e+01,  1.9397446e+01,  1.8075131e+01,  1.5764227e+01,  1.3324714e+01,  1.1984091e+01,  1.2440667e+01,  1.4296118e+01,  1.6267534e+01,  1.7047087e+01,  1.6185426e+01,  1.4346189e+01,  1.2746539e+01,  1.2219737e+01,  1.2630853e+01,  1.3095027e+01,  1.2791881e+01,  1.1672170e+01,  1.0449725e+01, 9.9059185e+00,  1.0157829e+01,  1.0579051e+01,  1.0449973e+01,  9.7062391e+00,  9.0331380e+00,  9.1728382e+00,  1.0100894e+01,  1.0910216e+01,  1.0591335e+01,  9.0112481e+00,  7.1395687e+00,  6.2415522e+00,  6.7423697e+00,  7.8149103e+00,  8.0922304e+00,  6.8591578e+00,  4.6356964e+00,  2.6500914e+00,  1.7402050e+00,  1.7152006e+00,  1.7060865e+00,  1.0647413e+00, -1.0169240e-01, -1.2218117e+00, -1.9677197e+00, -2.5828485e+00, -3.4942283e+00, -4.6683131e+00, -5.4563389e+00, -5.1606103e+00, -3.7804171e+00, -2.1698684e+00, -1.3963115e+00, -1.8662567e+00, -3.0124278e+00, -3.8036819e+00, -3.5891858e+00, -2.5372613e+00, -1.3653303e+00, -7.0364138e-01, -6.7703581e-01, -9.7702099e-01, -1.2226065e+00, -1.2387190e+00, -1.0879677e+00, -9.6247865e-01, -1.0861625e+00, -1.6351796e+00, -2.6132395e+00, -3.7339963e+00, -4.4869086e+00, -4.4615428e+00, -3.7191336e+00, -2.8489941e+00, -2.5696475e+00, -3.1697625e+00, -4.2901572e+00, -5.2679101e+00, -5.7360759e+00, -5.9218819e+00, -6.3804464e+00, -7.4532923e+00, -8.9920125e+00, -1.0586947e+01, -1.2011935e+01, -1.3395180e+01, -1.4952547e+01, -1.6608668e+01, -1.7951305e+01, -1.8591535e+01, -1.8549725e+01, -1.8252108e+01, -1.8141790e+01, -1.8318869e+01, -1.8575491e+01, -1.8741801e+01, -1.8914335e+01, -1.9290602e+01, -1.9814509e+01, -2.0094930e+01, -1.9773584e+01, -1.8980543e+01, -1.8336045e+01, -1.8390466e+01, -1.9019854e+01, -1.9430191e+01, -1.8860631e+01, -1.7348936e+01, -1.5789651e+01, -1.5165889e+01, -1.5652073e+01, -1.6445816e+01, -1.6504370e+01, -1.5493232e+01, -1.4056082e+01, -1.3178601e+01, -1.3282231e+01, -1.3902060e+01, -1.4191672e+01, -1.3696592e+01, -1.2641544e+01, -1.1534799e+01, -1.0592766e+01, -9.6137302e+00, -8.3936225e+00, -7.1758379e+00, -6.5942829e+00, -7.1180396e+00, -8.5450301e+00, -1.0060282e+01, -1.0819959e+01, -1.0525247e+01, -9.5021048e+00, -8.3105425e+00, -7.3263032e+00, -6.6627749e+00, -6.3716602e+00, -6.5725897e+00, -7.3132731e+00, -8.3458747e+00, -9.1616642e+00, -9.3603606e+00, -9.0306639e+00, -8.7375755e+00, -9.0702293e+00, -1.0146647e+01, -1.1538230e+01, -1.2684562e+01, -1.3404490e+01, -1.4031644e+01, -1.5077970e+01, -1.6774377e+01, -1.8918491e+01, -2.1123039e+01, -2.3164691e+01, -2.5073742e+01, -2.6911458e+01, -2.8518953e+01, -2.9544271e+01, -2.9753335e+01, -2.9321582e+01, -2.8797744e+01, -2.8731789e+01, -2.9272798e+01, -3.0076325e+01, -3.0593087e+01, -3.0492032e+01, -2.9877717e+01, -2.9155113e+01, -2.8689180e+01, -2.8552519e+01, -2.8549538e+01, -2.8459967e+01, -2.8270478e+01, -2.8196953e+01, -2.8498448e+01, -2.9267595e+01, -3.0387694e+01, -3.1670565e+01, -3.3000472e+01, -3.4303518e+01, -3.5366550e+01, -3.5747276e+01, -3.4994489e+01, -3.3092496e+01, -3.0727115e+01, -2.9002054e+01, -2.8687239e+01, -2.9584905e+01, -3.0634093e+01, -3.0790166e+01, -2.9975719e+01, -2.9218821e+01, -2.9750300e+01, -3.1802832e+01, -3.4227528e+01, -3.5378915e+01, -3.4550941e+01, -3.2661712e+01, -3.1500174e+01, -3.2159240e+01, -3.4068830e+01, -3.5524391e+01, -3.5225334e+01, -3.3391802e+01, -3.1435562e+01, -3.0547798e+01, -3.0598566e+01, -3.0413182e+01, -2.9118143e+01, -2.7181751e+01, -2.6070995e+01, -2.6823163e+01, -2.8930973e+01, -3.0668816e+01, -3.0598370e+01, -2.8841271e+01, -2.6918715e+01, -2.6321725e+01, -2.7163776e+01, -2.8146881e+01, -2.7800178e+01, -2.5782049e+01, -2.3071288e+01, -2.0998653e+01, -2.0139283e+01, -2.0088419e+01, -2.0175277e+01, -2.0262271e+01, -2.0809001e+01, -2.2226302e+01, -2.4279988e+01, -2.6193747e+01, -2.7329512e+01, -2.7733677e+01, -2.8019111e+01, -2.8758430e+01, -3.0026392e+01, -3.1495971e+01, -3.2873171e+01, -3.4138849e+01, -3.5361453e+01, -3.6376086e+01, -3.6779598e+01, -3.6304844e+01, -3.5163298e+01, -3.3935100e+01, -3.3067921e+01, -3.2490825e+01, -3.1753151e+01, -3.0546669e+01, -2.9054032e+01, -2.7746226e+01, -2.6845444e+01, -2.6042018e+01, -2.4795933e+01, -2.2929332e+01, -2.0889649e+01, -1.9389050e+01, -1.8768854e+01, -1.8722669e+01, -1.8640513e+01, -1.8201598e+01, -1.7611850e+01, -1.7284984e+01, -1.7360558e+01, -1.7600865e+01, -1.7761991e+01, -1.7987987e+01, -1.8733498e+01, -2.0236984e+01, -2.2089395e+01, -2.3397704e+01, -2.3454400e+01, -2.2300171e+01, -2.0657870e+01, -1.9331735e+01, -1.8670070e+01, -1.8569315e+01, -1.8900013e+01, -1.9804077e+01, -2.1499737e+01, -2.3818669e+01, -2.6041201e+01, -2.7308381e+01, -2.7270505e+01, -2.6341935e+01, -2.5294957e+01, -2.4576814e+01, -2.4002114e+01, -2.3081906e+01, -2.1609968e+01, -1.9897521e+01, -1.8451501e+01, -1.7486498e+01, -1.6815115e+01, -1.6222424e+01, -1.5878127e+01, -1.6275089e+01, -1.7686981e+01, -1.9684628e+01, -2.1256093e+01, -2.1508724e+01, -2.0352004e+01, -1.8548084e+01, -1.7087830e+01, -1.6450238e+01, -1.6369310e+01, -1.6237810e+01, -1.5719484e+01, -1.5026776e+01, -1.4689678e+01, -1.5091097e+01, -1.6171961e+01, -1.7482938e+01, -1.8465949e+01, -1.8745600e+01, -1.8292610e+01, -1.7419245e+01, -1.6599722e+01, -1.6155952e+01, -1.5974977e+01, -1.5513362e+01, -1.4204108e+01, -1.2025162e+01, -9.7293638e+00, -8.4115388e+00, -8.6550701e+00, -9.9664056e+00, -1.1067033e+01, -1.0893407e+01, -9.4783380e+00, -7.9187406e+00, -7.4149295e+00, -8.2089001e+00, -9.3619000e+00, -9.5657856e+00, -8.2599367e+00, -6.0779918e+00, -4.2851507e+00, -3.7654840e+00, -4.4453816e+00, -5.5488140e+00, -6.3096380e+00, -6.4579871e+00, -6.1642961e+00, -5.6978692e+00, -5.2339346e+00, -4.9188296e+00, -4.9274860e+00, -5.2817561e+00, -5.5876576e+00, -5.0953957e+00, -3.2287389e+00, -1.9212844e-01,  2.9579905e+00,  4.9771001e+00,  5.3321341e+00,  4.5549416e+00,  3.7315109e+00,  3.5994895e+00,  4.0742714e+00,  4.5831619e+00,  4.7970247e+00,  4.9947873e+00,  5.7152735e+00,  7.0962231e+00,  8.6083518e+00,  9.4661075e+00,  9.2977675e+00,  8.4112771e+00,  7.4334075e+00,  6.7432469e+00,  6.2879028e+00,  5.9041000e+00,  5.6966087e+00,  5.9745007e+00,  6.7772355e+00,  7.5502352e+00,  7.4499406e+00,  6.1071750e+00,  4.1229660e+00,  2.7281529e+00,  2.8116487e+00,  4.1661220e+00,  5.6553599e+00,  6.1767389e+00,  5.5590956e+00,  4.6039304e+00,  4.2796973e+00,  4.8470027e+00,  5.7084883e+00,  6.0588482e+00,  5.6679400e+00,  5.0590550e+00,  4.9667778e+00,  5.6417091e+00,  6.6674424e+00,  7.4219692e+00,  7.7014648e+00,  7.9093457e+00,  8.6603321e+00,  1.0193341e+01, 1.2122511e+01,  1.3708125e+01,  1.4371190e+01,  1.4024922e+01,  1.3028666e+01,  1.1905979e+01,  1.1094999e+01,  1.0863081e+01,  1.1321301e+01,  1.2425131e+01,  1.3951170e+01,  1.5535559e+01,  1.6822124e+01,  1.7641500e+01,  1.8076715e+01,  1.8349981e+01,  1.8619041e+01,  1.8851565e+01,  1.8877897e+01,  1.8570257e+01,  1.7994298e+01,  1.7406634e+01,  1.7096905e+01,  1.7192286e+01,  1.7569431e+01,  1.7939918e+01,  1.8048214e+01,  1.7835085e+01,  1.7440469e+01,  1.7043817e+01,  1.6679714e+01,  1.6202350e+01,  1.5451866e+01,  1.4482487e+01,  1.3621325e+01,  1.3249717e+01,  1.3456251e+01,  1.3870410e+01,  1.3870167e+01,  1.3034174e+01,  1.1465085e+01,  9.6930092e+00,  8.2325719e+00,  7.1872832e+00,  6.2587246e+00,  5.1392891e+00,  3.8971901e+00,  2.9636878e+00,  2.7189212e+00,  3.0770748e+00,  3.4928877e+00,  3.4134458e+00,  2.7611290e+00,  1.9878020e+00,  1.6436224e+00,  1.8704807e+00,  2.3037806e+00,  2.4703247e+00,  2.2883947e+00,  2.1786437e+00,  2.6746270e+00,  3.9053801e+00,  5.4384871e+00,  6.6170793e+00, 7.0572044e+00,  6.8500805e+00,  6.3372527e+00,  5.7504078e+00,  5.1010862e+00,  4.3915106e+00,  3.8430486e+00,  3.8090117e+00,  4.3934708e+00,  5.1650785e+00,  5.3316924e+00,  4.3166081e+00,  2.2590544e+00, -2.3229361e-02, -1.6103423e+00, -2.1159666e+00, -1.8572951e+00, -1.4626203e+00, -1.3126487e+00, -1.3110293e+00, -1.1217371e+00, -5.6864467e-01,  2.0778163e-01,  9.3860428e-01,  1.4959005e+00,  1.9306566e+00,  2.2608911e+00,  2.2950260e+00,  1.7500886e+00,  5.9050841e-01, -7.7015016e-01, -1.6747016e+00, -1.7088994e+00, -1.0333755e+00, -2.3295673e-01,  2.0060882e-01,  2.8232320e-01,  4.6227939e-01,  1.1424472e+00,  2.2419621e+00,  3.2174927e+00,  3.5093479e+00,  2.9901891e+00,  2.0140274e+00,  1.0596904e+00,  3.3738414e-01, -2.7644471e-01, -9.6253287e-01, -1.6620882e+00, -2.0749297e+00, -1.9503800e+00, -1.3740842e+00, -7.6770970e-01, -6.0237086e-01, -1.0829983e+00, -2.0508164e+00, -3.1240922e+00, -3.9066268e+00, -4.1120481e+00, -3.6044665e+00, -2.4363154e+00, -8.8721486e-01,  5.9674544e-01,  1.6204980e+00, 2.0903754e+00,  2.2650056e+00,  2.5110317e+00,  2.9571460e+00,  3.3822194e+00,  3.4771356e+00,  3.2412465e+00,  3.0969255e+00,  3.5499971e+00,  4.6847932e+00,  5.9981847e+00,  6.7914337e+00,  6.7942459e+00,  6.4268939e+00,  6.4129880e+00,  7.0747995e+00,  7.9778150e+00,  8.2917418e+00,  7.5627148e+00,  6.1853947e+00,  5.1239182e+00,  5.1206506e+00,  6.1001896e+00,  7.2857313e+00,  7.8898326e+00,  7.7466484e+00,  7.3622706e+00,  7.4241509e+00,  8.2666993e+00,  9.7320687e+00,  1.1421564e+01,  1.2989228e+01,  1.4206488e+01,  1.4871315e+01,  1.4823199e+01,  1.4143475e+01,  1.3299282e+01,  1.2938483e+01,  1.3380677e+01,  1.4241197e+01,  1.4619230e+01,  1.3803872e+01,  1.1930638e+01,  9.9840440e+00,  9.0813145e+00,  9.6166360e+00,  1.0992637e+01,  1.2161097e+01,  1.2490018e+01,  1.2207199e+01,  1.2071119e+01,  1.2607149e+01,  1.3599356e+01,  1.4257716e+01,  1.3871051e+01,  1.2364716e+01,  1.0321715e+01,  8.5148750e+00,  7.3780237e+00,  6.8169330e+00,  6.4203943e+00,  5.8182347e+00,  4.8938197e+00,  3.7555712e+00, 2.5794611e+00,  1.4813865e+00,  4.8392346e-01, -4.5734666e-01, -1.4164468e+00, -2.4546717e+00, -3.5624109e+00, -4.6081446e+00, -5.3491362e+00, -5.5294688e+00, -5.0153689e+00, -3.8707046e+00, -2.3132159e+00, -5.8832000e-01,  1.1342070e+00,  2.7592035e+00,  4.1768476e+00,  5.1869999e+00,  5.5354155e+00,  5.0640128e+00,  3.8650808e+00,  2.2975904e+00,  8.1266807e-01, -3.1155190e-01, -1.1287540e+00, -1.9345729e+00, -2.9733236e+00, -4.1680071e+00, -5.1134960e+00, -5.3761245e+00, -4.8774914e+00, -4.0344660e+00, -3.4997087e+00, -3.6783687e+00, -4.4070850e+00, -5.0705244e+00, -5.0723001e+00, -4.2761079e+00, -3.0600785e+00, -1.9661605e+00, -1.2749679e+00, -8.7892578e-01, -5.2783553e-01, -1.6528259e-01};
float whiteNoise[5100] = { 0.0000000e+00, -2.3395572e-01, -7.2977811e-01, -9.8922076e-01, -5.3139221e-01, 6.3783386e-01, 1.9063659e+00, 2.4515883e+00, 1.8653228e+00, 4.9924366e-01, -7.6525423e-01, -1.1471558e+00, -4.9462942e-01, 6.9292326e-01, 1.7279221e+00, 2.2717831e+00, 2.5076484e+00, 2.8496194e+00, 3.4907188e+00, 4.2099913e+00, 4.6044694e+00,  4.5185077e+00,  4.2610741e+00,  4.3920606e+00,  5.2532874e+00,  6.6652894e+00,  8.0782778e+00,  9.0600295e+00,  9.6843906e+00,  1.0451731e+01,  1.1788528e+01,  1.3572932e+01,  1.5142059e+01,  1.5819293e+01,  1.5517171e+01,  1.4870331e+01,  1.4750365e+01,  1.5566635e+01,  1.6958024e+01,  1.8132521e+01,  1.8526241e+01,  1.8175154e+01,  1.7485520e+01,  1.6676173e+01,  1.5483087e+01,  1.3452050e+01,  1.0548419e+01,  7.4637175e+00,  5.2500405e+00,  4.5413824e+00,  5.0332635e+00,  5.6914339e+00,  5.5263601e+00,  4.2858349e+00,  2.5166924e+00,  1.0134795e+00,  1.7543034e-01, -2.0159303e-01, -6.1293221e-01, -1.3717082e+00, -2.3931456e+00, -3.3476262e+00, -3.9620055e+00, -4.1927025e+00, -4.1933386e+00, -4.1969312e+00, -4.4372046e+00, -5.1045536e+00, -6.2654545e+00, -7.7540109e+00, -9.1523828e+00, -9.9496085e+00, -9.8063471e+00, -8.7311593e+00, -7.0392764e+00, -5.1588320e+00, -3.4655134e+00, -2.2436197e+00, -1.6972272e+00, -1.8853531e+00, -2.5984905e+00, -3.3562192e+00, -3.6587791e+00, -3.3650937e+00, -2.8607798e+00, -2.7893161e+00, -3.5059228e+00, -4.7188680e+00, -5.6746875e+00, -5.7727045e+00, -5.0849954e+00, -4.3125920e+00, -4.2034302e+00, -4.9431631e+00, -6.0528051e+00, -6.8646684e+00, -7.1313327e+00, -7.2244926e+00, -7.7729268e+00, -9.0914687e+00, -1.0908941e+01, -1.2602164e+01, -1.3693070e+01, -1.4174553e+01, -1.4429667e+01, -1.4872743e+01, -1.5637375e+01, -1.6533703e+01, -1.7242074e+01, -1.7543032e+01, -1.7414414e+01, -1.6974695e+01, -1.6367580e+01, -1.5689984e+01, -1.4996294e+01, -1.4340394e+01, -1.3791409e+01, -1.3386592e+01, -1.3046989e+01, -1.2538813e+01, -1.1561070e+01, -9.9494467e+00, -7.8596846e+00, -5.7522255e+00, -4.1263926e+00, -3.1758835e+00, -2.6551572e+00, -2.1071930e+00, -1.2878622e+00, -4.1336362e-01,  1.8187484e-02, -3.0171788e-01, -1.1515128e+00, -1.8992599e+00, -1.9931423e+00, -1.3822505e+00, -4.9038440e-01,  2.0775588e-01,  5.8402775e-01,  8.5301495e-01,  1.2126874e+00,  1.5371699e+00,  1.4606408e+00,  7.6609439e-01, -3.4115535e-01, -1.3811258e+00, -2.0261531e+00, -2.3591006e+00, -2.6867304e+00, -3.1143282e+00, -3.3669858e+00, -3.0992884e+00, -2.3974002e+00, -1.9105300e+00, -2.3701726e+00, -3.8811030e+00, -5.6695137e+00, -6.6088261e+00, -6.1246123e+00, -4.6914033e+00, -3.4670424e+00, -3.3704134e+00, -4.3918390e+00, -5.6926720e+00, -6.3384985e+00, -5.9878176e+00, -4.9803025e+00, -3.8661845e+00, -2.9003374e+00, -1.9656347e+00, -9.1153658e-01,  1.0552600e-01,  6.4762406e-01,  3.6059176e-01, -6.7561439e-01, -1.9310441e+00, -2.7465810e+00, -2.7219732e+00, -1.9020075e+00, -6.9785278e-01,  3.3967182e-01,  7.5885985e-01,  3.9420921e-01, -5.3325255e-01, -1.4694312e+00, -1.7838281e+00, -1.1429187e+00,  2.3906894e-01,  1.6938302e+00,  2.5178488e+00,  2.4176526e+00,  1.6344374e+00,  6.6291170e-01, -1.6956258e-01, -8.8448022e-01, -1.6556460e+00, -2.4657382e+00, -2.9896413e+00, -2.8500410e+00, -2.0095232e+00, -9.0332262e-01, -1.4532411e-01, -4.7747097e-02, -3.9019694e-01, -6.5790441e-01, -5.3456497e-01, -1.9130749e-01, -9.8904127e-02, -5.4090354e-01, -1.2984630e+00, -1.8274266e+00, -1.7817118e+00, -1.3881439e+00, -1.2872162e+00, -1.9426999e+00, -3.1474681e+00, -4.1069639e+00, -4.0796221e+00, -3.0372065e+00, -1.7551529e+00, -1.2246884e+00, -1.8765365e+00, -3.2810207e+00, -4.5734686e+00, -5.2143047e+00, -5.4057871e+00, -5.8107953e+00, -6.8559598e+00, -8.2706612e+00, -9.2849203e+00, -9.3033531e+00, -8.4474208e+00, -7.4903360e+00, -7.2555170e+00, -8.0029206e+00, -9.2971481e+00, -1.0407415e+01, -1.0859597e+01, -1.0706777e+01, -1.0387459e+01, -1.0374235e+01, -1.0897268e+01, -1.1867668e+01, -1.2951185e+01, -1.3714224e+01, -1.3823724e+01, -1.3273764e+01, -1.2509418e+01, -1.2277594e+01, -1.3193990e+01, -1.5286320e+01, -1.7884156e+01, -2.0003275e+01, -2.0968402e+01, -2.0799899e+01, -2.0081985e+01, -1.9470477e+01, -1.9278727e+01, -1.9447589e+01, -1.9812179e+01, -2.0324541e+01, -2.1012426e+01, -2.1787822e+01, -2.2391131e+01, -2.2586938e+01, -2.2415868e+01, -2.2210498e+01, -2.2320082e+01, -2.2806125e+01, -2.3418254e+01, -2.3874111e+01, -2.4148238e+01, -2.4466365e+01, -2.5017604e+01, -2.5702325e+01, -2.6200253e+01, -2.6303941e+01, -2.6176145e+01, -2.6258724e+01, -2.6911003e+01, -2.8120185e+01, -2.9539352e+01, -3.0779399e+01, -3.1660983e+01, -3.2228721e+01, -3.2598212e+01, -3.2838159e+01, -3.2968382e+01, -3.2972181e+01, -3.2728225e+01, -3.1953300e+01, -3.0344314e+01, -2.7923368e+01, -2.5283786e+01, -2.3387213e+01, -2.2930988e+01, -2.3778666e+01, -2.5009635e+01, -2.5635406e+01, -2.5388025e+01, -2.4859591e+01, -2.4850519e+01, -2.5544818e+01, -2.6317072e+01, -2.6366770e+01, -2.5549168e+01, -2.4556496e+01, -2.4239549e+01, -2.4729771e+01, -2.5250553e+01, -2.4844428e+01, -2.3335101e+01, -2.1592737e+01, -2.0832171e+01, -2.1595622e+01, -2.3350975e+01, -2.5020202e+01, -2.5872988e+01, -2.5942835e+01, -2.5676268e+01, -2.5305134e+01, -2.4644698e+01, -2.3493715e+01, -2.2136790e+01, -2.1336737e+01, -2.1753419e+01, -2.3344838e+01, -2.5350405e+01, -2.6889648e+01, -2.7618524e+01, -2.7856986e+01, -2.8133142e+01, -2.8628223e+01, -2.9037171e+01, -2.8908755e+01, -2.8084721e+01, -2.6836485e+01, -2.5645910e+01, -2.4892053e+01, -2.4697986e+01, -2.4957588e+01, -2.5409792e+01, -2.5697955e+01, -2.5482957e+01, -2.4646471e+01, -2.3443694e+01, -2.2394195e+01, -2.1900976e+01, -2.1896044e+01, -2.1872243e+01, -2.1336680e+01, -2.0292694e+01, -1.9273835e+01, -1.8852104e+01, -1.9063133e+01, -1.9309382e+01, -1.8868995e+01, -1.7554899e+01, -1.5907021e+01, -1.4729213e+01, -1.4393685e+01, -1.4544129e+01, -1.4445860e+01, -1.3637795e+01, -1.2298018e+01, -1.1039600e+01, -1.0378897e+01, -1.0366419e+01, -1.0655040e+01, -1.0863220e+01, -1.0875294e+01, -1.0855480e+01, -1.1040462e+01, -1.1528926e+01, -1.2215626e+01, -1.2863000e+01, -1.3229987e+01, -1.3199774e+01, -1.2868681e+01, -1.2535466e+01, -1.2538018e+01, -1.2993289e+01, -1.3634550e+01, -1.3936684e+01, -1.3506683e+01, -1.2453604e+01, -1.1404827e+01, -1.1097208e+01, -1.1835198e+01, -1.3241045e+01, -1.4491453e+01, -1.4844676e+01, -1.4058617e+01, -1.2440879e+01, -1.0588769e+01, -9.0711301e+00, -8.2427612e+00, -8.2002667e+00, -8.7997454e+00, -9.7141630e+00, -1.0573046e+01, -1.1168656e+01, -1.1587109e+01, -1.2113247e+01, -1.2941119e+01, -1.3938308e+01, -1.4713942e+01, -1.4972165e+01, -1.4834328e+01, -1.4797252e+01, -1.5317543e+01, -1.6381574e+01, -1.7469156e+01, -1.7973167e+01, -1.7712934e+01, -1.7083318e+01, -1.6713877e+01, -1.6960910e+01, -1.7694969e+01, -1.8550107e+01, -1.9358189e+01, -2.0325068e+01, -2.1767437e+01, -2.3663560e+01, -2.5465486e+01, -2.6394289e+01, -2.6003200e+01, -2.4542457e+01, -2.2814515e+01, -2.1627702e+01, -2.1277559e+01, -2.1444542e+01, -2.1546012e+01, -2.1223183e+01, -2.0570605e+01, -1.9966444e+01, -1.9706597e+01, -1.9787937e+01, -2.0014588e+01, -2.0282282e+01, -2.0726830e+01, -2.1565347e+01, -2.2783081e+01, -2.4008238e+01, -2.4763470e+01, -2.4904044e+01, -2.4813906e+01, -2.5102915e+01, -2.6017714e+01, -2.7108111e+01, -2.7522928e+01, -2.6742036e+01, -2.5099203e+01, -2.3576098e+01, -2.2990612e+01, -2.3284670e+01, -2.3569312e+01, -2.2911656e+01, -2.1161922e+01, -1.9073491e+01, -1.7622981e+01, -1.7174995e+01, -1.7254603e+01, -1.7086468e+01, -1.6332195e+01, -1.5315685e+01, -1.4583984e+01, -1.4323029e+01, -1.4250892e+01, -1.4061510e+01, -1.3882730e+01, -1.4193064e+01, -1.5237319e+01, -1.6562205e+01, -1.7228452e+01, -1.6581169e+01, -1.4857928e+01, -1.3019158e+01, -1.1923295e+01, -1.1614316e+01, -1.1392669e+01, -1.0587615e+01, -9.2776855e+00, -8.2693596e+00, -8.3652713e+00, -9.6180936e+00, -1.1244001e+01, -1.2224129e+01, -1.2010906e+01, -1.0749664e+01, -8.9593163e+00, -7.1071100e+00, -5.4886200e+00, -4.3868933e+00, -4.1531468e+00, -4.9844192e+00, -6.5965178e+00, -8.2071081e+00, -8.9844218e+00, -8.6342041e+00, -7.6007368e+00, -6.6768800e+00, -6.3576116e+00, -6.5061939e+00, -6.6031338e+00, -6.3061419e+00, -5.7807385e+00, -5.5057556e+00, -5.7639088e+00, -6.3136546e+00, -6.5541855e+00, -6.0344449e+00, -4.8490677e+00, -3.5728635e+00, -2.7921429e+00, -2.6315293e+00, -2.6684571e+00, -2.2998112e+00, -1.2576305e+00,  1.4300677e-01,  1.2216167e+00,  1.4419994e+00,  8.1081513e-01, -1.4526623e-01, -7.9126575e-01, -8.3640468e-01, -4.5680388e-01, -1.4409580e-02,  3.4072376e-01,  7.9973094e-01,  1.6366029e+00,  2.8312184e+00,  3.9771424e+00,  4.6092705e+00,  4.6610785e+00,  4.6005503e+00,  5.0781610e+00,  6.3878976e+00,  8.2313336e+00,  9.9875585e+00,  1.1209528e+01,  1.1875155e+01,  1.2208333e+01,  1.2340243e+01,  1.2216897e+01,  1.1833256e+01,  1.1456995e+01,  1.1482870e+01,  1.1990731e+01,  1.2497256e+01,  1.2286692e+01,  1.1114089e+01,  9.5974541e+00,  8.8130176e+00,  9.3684677e+00,  1.0810390e+01,  1.1984516e+01,  1.2069243e+01,  1.1309829e+01,  1.0719713e+01,  1.1009738e+01,  1.1794930e+01,  1.1903569e+01,  1.0548901e+01,  8.2457001e+00,  6.5424404e+00,  6.7462987e+00,  8.7879689e+00,  1.1268359e+01,  1.2644614e+01,  1.2480415e+01,  1.1668243e+01,  1.1506664e+01,  1.2534437e+01,  1.4152445e+01,  1.5261485e+01,  1.5229100e+01,  1.4311657e+01,  1.3273413e+01,  1.2688942e+01,  1.2591975e+01,  1.2679278e+01,  1.2729419e+01,  1.2784912e+01,  1.2988992e+01,  1.3338928e+01,  1.3644326e+01,  1.3704176e+01,  1.3480443e+01,  1.3085004e+01,  1.2619030e+01,  1.2046060e+01,  1.1215118e+01,  9.9922974e+00,  8.3873790e+00,  6.6103548e+00,  5.0534159e+00,  4.1917554e+00,  4.3888366e+00,  5.6637494e+00,  7.5846018e+00,  9.4362156e+00,  1.0608696e+01,  1.0929041e+01,  1.0663066e+01,  1.0198087e+01,  9.7172096e+00,  9.1720758e+00,  8.5320421e+00,  7.9765636e+00,  7.7589171e+00,  7.8634153e+00,  7.8738157e+00,  7.3009009e+00,  6.1131215e+00,  4.9149512e+00,  4.5027913e+00,  5.1647196e+00,  6.4183819e+00,  7.4994098e+00,  8.1505564e+00,  8.8982237e+00,  1.0468098e+01,  1.2872187e+01,  1.5106592e+01,  1.5867727e+01,  1.4698995e+01,  1.2500947e+01,  1.0883903e+01,  1.0913050e+01,  1.2358800e+01,  1.4075486e+01,  1.5075466e+01,  1.5270182e+01,  1.5259706e+01,  1.5511941e+01,  1.5816832e+01,  1.5534357e+01,  1.4313811e+01,  1.2518773e+01,  1.0952172e+01,  1.0204491e+01,  1.0277487e+01,  1.0775918e+01,  1.1356545e+01,  1.1931082e+01,  1.2492170e+01,  1.2896623e+01,  1.2958557e+01,  1.2774568e+01,  1.2846031e+01,  1.3725208e+01,  1.5446448e+01,  1.7320351e+01,  1.8379786e+01,  1.8130345e+01,  1.6926101e+01,  1.5624754e+01,  1.4855580e+01,  1.4583516e+01,  1.4334594e+01,  1.3797446e+01,  1.3183463e+01,  1.3015305e+01,  1.3592134e+01,  1.4663952e+01,  1.5595019e+01,  1.5815119e+01,  1.5139064e+01,  1.3742834e+01,  1.1937082e+01,  1.0001384e+01,  8.1698918e+00,  6.6511578e+00,  5.5685277e+00,  4.8765205e+00,  4.3937525e+00,  3.9673727e+00,  3.6029263e+00,  3.4005082e+00,  3.3547691e+00,  3.2560697e+00,  2.8424274e+00,  2.0694802e+00,  1.2051899e+00,  6.2058427e-01,  4.7618860e-01,  6.2987041e-01,  8.5629554e-01,  1.1187066e+00,  1.5669892e+00,  2.2492418e+00,  2.8802288e+00,  2.9933485e+00,  2.3917370e+00,  1.4411320e+00,  8.4557800e-01,  1.0611743e+00,  1.9073067e+00,  2.7774962e+00,  3.2567373e+00,  3.5233880e+00,  4.1145506e+00,  5.2830947e+00,  6.6093447e+00,  7.2895978e+00,  6.8396974e+00,  5.5249348e+00,  4.1011959e+00,  3.1465311e+00,  2.6600326e+00,  2.2986514e+00,  1.9409209e+00,  1.9288889e+00,  2.7002650e+00,  4.1981171e+00,  5.7168321e+00,  6.4133217e+00,  6.0210071e+00,  5.0702584e+00,  4.3924083e+00,  4.3859317e+00,  4.7421610e+00,  4.8531844e+00,  4.4516566e+00,  3.8407281e+00,  3.5293560e+00,  3.6979006e+00,  4.0550311e+00,  4.1992805e+00,  4.0623209e+00,  3.9488697e+00,  4.1440475e+00,  4.5328472e+00,  4.6649379e+00,  4.2210530e+00,  3.4025952e+00,  2.8290334e+00,  3.0200999e+00,  3.9535809e+00,  5.1086686e+00,  5.9253226e+00,  6.2230254e+00,  6.2032171e+00,  6.0987611e+00,  5.8729443e+00,  5.2809544e+00,  4.2080130e+00,  2.9100621e+00,  1.8881976e+00,  1.5020318e+00,  1.6871152e+00,  2.0387427e+00,  2.1755862e+00,  2.0444548e+00,  1.8991341e+00,  1.9929359e+00,  2.2745238e+00,  2.3580951e+00,  1.7946272e+00,  4.2524930e-01, -1.4554023e+00, -3.2432536e+00, -4.3707425e+00, -4.6204776e+00, -4.2099126e+00, -3.6103812e+00, -3.2353239e+00, -3.2072993e+00, -3.3461056e+00, -3.3578473e+00, -3.0630292e+00, -2.4878446e+00, -1.7679514e+00, -9.7444161e-01, -3.0546760e-02,  1.2041291e+00,  2.7614128e+00,  4.4621939e+00,  5.9754620e+00,  6.9886658e+00,  7.3544372e+00,  7.1181327e+00,  6.4412673e+00,  5.5091741e+00,  4.4922152e+00,  3.5582091e+00,  2.8864078e+00,  2.6444142e+00,  2.9317759e+00,  3.7254660e+00,  4.8684712e+00,  6.1290970e+00,  7.3244155e+00,  8.4454804e+00,  9.6782881e+00,  1.1248438e+01,  1.3152905e+01,  1.4990303e+01,  1.6101408e+01,  1.6012679e+01,  1.4878877e+01,  1.3525090e+01,  1.2950611e+01,  1.3611585e+01,  1.5050621e+01,  1.6217171e+01,  1.6264040e+01,  1.5188557e+01,  1.3799314e+01,  1.3054546e+01,  1.3340367e+01,  1.4272973e+01,  1.5120883e+01,  1.5413315e+01,  1.5205986e+01,  1.4859588e+01,  1.4643585e+01,  1.4572806e+01,  1.4573404e+01,  1.4716250e+01,  1.5217970e+01,  1.6197957e+01,  1.7460924e+01,  1.8549889e+01,  1.9029772e+01,  1.8735463e+01,  1.7783250e+01,  1.6404163e+01,  1.4813248e+01,  1.3221897e+01,  1.1883932e+01,  1.1015105e+01,  1.0609649e+01,  1.0371586e+01,  9.9211589e+00,  9.1474838e+00,  8.3665479e+00,  8.0766042e+00,  8.4905495e+00,  9.2793955e+00,  9.7958762e+00,  9.5970542e+00,  8.7914028e+00,  7.9005793e+00,  7.3909049e+00,  7.3300462e+00,  7.4649269e+00,  7.5742956e+00,  7.6857256e+00,  7.9267841e+00,  8.1990069e+00,  8.0699022e+00,  7.0532713e+00,  5.0325570e+00,  2.4166827e+00, -1.2372236e-01, -2.0827550e+00, -3.3166432e+00, -3.8877001e+00, -3.8034842e+00, -2.9819877e+00, -1.4894343e+00,  2.3622145e-01,  1.4822738e+00,  1.6671962e+00,  7.2359377e-01, -8.6665290e-01, -2.3936807e+00, -3.3114672e+00, -3.4221516e+00, -2.8282154e+00, -1.8242370e+00, -8.4303139e-01, -3.8238170e-01, -7.9498825e-01, -2.0136407e+00, -3.4807109e+00, -4.4691154e+00, -4.6266109e+00, -4.2914571e+00, -4.2524592e+00, -5.1055372e+00, -6.7508756e+00, -8.4775562e+00, -9.5566510e+00, -9.8014648e+00, -9.6024929e+00, -9.4571210e+00, -9.4868403e+00, -9.4082517e+00, -8.9406726e+00, -8.1893121e+00, -7.5851382e+00, -7.4379021e+00, -7.5752938e+00, -7.4704719e+00, -6.7703710e+00, -5.7204095e+00, -5.0566798e+00, -5.4337951e+00, -6.8919170e+00, -8.8257332e+00, -1.0455192e+01, -1.1363412e+01, -1.1657934e+01, -1.1696817e+01, -1.1705684e+01, -1.1642569e+01, -1.1366049e+01, -1.0864438e+01, -1.0298870e+01, -9.8617060e+00, -9.6587727e+00, -9.7658844e+00, -1.0366802e+01, -1.1738800e+01, -1.3993922e+01, -1.6780635e+01, -1.9285082e+01, -2.0661763e+01, -2.0626272e+01, -1.9725765e+01, -1.9002627e+01, -1.9250638e+01, -2.0425154e+01, -2.1683063e+01, -2.2041395e+01, -2.1148225e+01, -1.9565761e+01, -1.8353528e+01, -1.8292021e+01, -1.9355896e+01, -2.0822929e+01, -2.1888179e+01, -2.2269213e+01, -2.2336425e+01, -2.2714849e+01, -2.3723356e+01, -2.5108198e+01, -2.6249406e+01, -2.6631642e+01, -2.6195441e+01, -2.5330040e+01, -2.4571777e+01, -2.4269715e+01, -2.4442282e+01, -2.4859378e+01, -2.5226450e+01, -2.5327626e+01, -2.5068240e+01, -2.4441900e+01, -2.3477636e+01, -2.2214505e+01, -2.0732217e+01, -1.9230799e+01, -1.8090987e+01, -1.7805178e+01, -1.8726511e+01, -2.0751358e+01, -2.3198711e+01, -2.5095530e+01, -2.5781197e+01, -2.5418491e+01, -2.4961770e+01, -2.5503740e+01, -2.7444103e+01, -3.0138874e+01, -3.2352794e+01, -3.3185065e+01, -3.2725420e+01, -3.1906743e+01, -3.1694212e+01, -3.2305911e+01, -3.3108192e+01, -3.3225848e+01, -3.2299761e+01, -3.0745874e+01, -2.9353784e+01, -2.8639938e+01, -2.8523492e+01, -2.8535555e+01, -2.8287436e+01, -2.7760520e+01, -2.7230645e+01, -2.6997901e+01, -2.7204969e+01, -2.7844138e+01, -2.8830992e+01, -3.0009341e+01, -3.1118593e+01, -3.1859219e+01, -3.2081811e+01, -3.1927016e+01, -3.1719252e+01, -3.1647458e+01, -3.1525899e+01, -3.0912714e+01, -2.9536163e+01, -2.7647963e+01, -2.5944410e+01, -2.5086231e+01, -2.5236535e+01, -2.6026691e+01, -2.6945932e+01, -2.7742877e+01, -2.8443968e+01, -2.9022361e+01, -2.9144283e+01, -2.8351949e+01, -2.6561463e+01, -2.4357836e+01, -2.2699362e+01, -2.2212528e+01, -2.2705048e+01, -2.3370756e+01, -2.3516315e+01, -2.3128202e+01, -2.2743276e+01, -2.2771731e+01, -2.2977242e+01, -2.2676811e+01, -2.1497295e+01, -1.9929634e+01, -1.9069539e+01, -1.9714513e+01, -2.1645894e+01, -2.3793040e+01, -2.5148844e+01, -2.5574732e+01, -2.5727677e+01, -2.6197145e+01, -2.6733482e+01, -2.6388477e+01, -2.4497911e+01, -2.1563058e+01, -1.9101564e+01, -1.8474885e+01, -1.9697223e+01, -2.1330892e+01, -2.1638056e+01, -2.0026235e+01, -1.7536727e+01, -1.5955462e+01, -1.6325279e+01, -1.8130468e+01, -1.9793751e+01, -1.9977034e+01, -1.8546258e+01, -1.6459493e+01, -1.4827262e+01, -1.4050802e+01, -1.3731661e+01, -1.3264311e+01, -1.2447910e+01, -1.1571746e+01, -1.1024138e+01, -1.0914112e+01, -1.1083291e+01, -1.1415058e+01, -1.2041853e+01, -1.3204368e+01, -1.4921939e+01, -1.6842290e+01, -1.8443246e+01, -1.9390346e+01, -1.9709923e+01, -1.9652762e+01, -1.9445378e+01, -1.9203655e+01, -1.9051167e+01, -1.9220771e+01, -1.9931145e+01, -2.1113294e+01, -2.2296742e+01, -2.2865981e+01, -2.2532521e+01, -2.1605215e+01, -2.0773764e+01, -2.0551886e+01, -2.0853049e+01, -2.1074006e+01, -2.0620015e+01, -1.9422929e+01, -1.8019669e+01, -1.7142324e+01, -1.7170604e+01, -1.7878714e+01, -1.8641090e+01, -1.8900881e+01, -1.8537818e+01, -1.7885221e+01, -1.7411216e+01, -1.7302678e+01, -1.7250373e+01, -1.6612758e+01, -1.4893269e+01, -1.2224336e+01, -9.4756468e+00, -7.8077446e+00, -7.8984406e+00, -9.3886240e+00, -1.1018679e+01, -1.1432749e+01, -1.0078344e+01, -7.5079773e+00, -4.8564997e+00, -2.9524877e+00, -1.8179357e+00, -9.3469208e-01,  5.5093254e-02,  9.2939017e-01,  1.1536009e+00,  5.4282994e-01, -3.7590494e-01, -7.0644673e-01,  6.2467813e-02,  1.6024180e+00,  3.0229120e+00,  3.6179498e+00,  3.3869184e+00,  2.8807343e+00,  2.5835838e+00,  2.4567658e+00,  2.0566764e+00,  1.0471459e+00, -4.3500950e-01, -1.8983201e+00, -2.9221890e+00, -3.4349275e+00, -3.6048150e+00, -3.5390820e+00, -3.1601535e+00, -2.3806255e+00, -1.3357913e+00, -3.6994470e-01,  2.3130032e-01,  4.6694069e-01,  5.5251072e-01,  6.4828712e-01,  7.1672925e-01,  6.8976996e-01,  7.3713408e-01,  1.2532078e+00,  2.4621514e+00,  4.0075413e+00,  5.0225748e+00,  4.7640532e+00,  3.3095184e+00,  1.6615046e+00,  1.0834567e+00,  2.1812013e+00,  4.4854320e+00,  6.8505862e+00,  8.2849021e+00,  8.5178610e+00,  7.9371676e+00,  7.1138376e+00,  6.4067759e+00,  5.9058907e+00,  5.5697919e+00,  5.2901512e+00,  4.8433000e+00,  3.9288550e+00,  2.4172657e+00,  6.1500301e-01, -7.9169756e-01, -1.1928331e+00, -5.5127845e-01,  5.4645885e-01,  1.3883109e+00,  1.7407262e+00,  1.9758133e+00,  2.5890039e+00,  3.5876423e+00,  4.3802535e+00,  4.3061151e+00,  3.2935869e+00,  1.9837809e+00,  1.1710868e+00,  1.0875310e+00,  1.2204399e+00,  8.4053507e-01, -2.6137331e-01, -1.5152527e+00, -2.0090847e+00, -1.2019383e+00,  7.0702652e-01,  2.9936122e+00,  4.9157736e+00,  6.0550047e+00,  6.3208583e+00,  5.8112392e+00,  4.7702097e+00,  3.6305309e+00,  2.9281525e+00,  2.9992544e+00,  3.6812710e+00,  4.3525535e+00,  4.3741223e+00,  3.5884585e+00,  2.4196069e+00,  1.4601569e+00,  9.1177178e-01,  3.9395351e-01, -7.0187742e-01, -2.6354220e+00, -5.0284859e+00, -7.0956915e+00, -8.1717271e+00, -8.1049241e+00, -7.2692674e+00, -6.2837457e+00, -5.6938118e+00, -5.7786693e+00, -6.4845187e+00, -7.4444765e+00, -8.1133360e+00, -8.0471961e+00, -7.2177936e+00, -6.1165859e+00, -5.4844059e+00, -5.8009713e+00, -6.9215788e+00, -8.1791439e+00, -8.8930853e+00, -8.8712148e+00, -8.4919390e+00, -8.3202243e+00, -8.6077907e+00, -9.1001355e+00, -9.2779870e+00, -8.7899342e+00, -7.7144313e+00, -6.4853035e+00, -5.6031224e+00, -5.3773458e+00, -5.8458661e+00, -6.8485437e+00, -8.1506608e+00, -9.5413206e+00, -1.0882892e+01, -1.2102650e+01, -1.3127614e+01, -1.3809860e+01, -1.3933751e+01, -1.3353544e+01, -1.2175283e+01, -1.0798234e+01, -9.7073743e+00, -9.1345459e+00, -8.8731074e+00, -8.4438255e+00, -7.5079313e+00, -6.1794396e+00, -4.9524111e+00, -4.2952108e+00, -4.2662093e+00, -4.4865912e+00, -4.4820740e+00, -4.0820087e+00, -3.5369425e+00, -3.2874062e+00, -3.6141531e+00, -4.4564683e+00, -5.4913657e+00, -6.3438718e+00, -6.7497267e+00, -6.6074919e+00, -5.9704594e+00, -5.0254339e+00, -4.0389829e+00, -3.2467542e+00, -2.7402863e+00, -2.4565969e+00, -2.3007810e+00, -2.2891227e+00, -2.5557299e+00, -3.1966378e+00, -4.1075707e+00, -5.0004391e+00, -5.6074503e+00, -5.8792849e+00, -5.9795074e+00, -6.0871273e+00, -6.2185452e+00, -6.2475212e+00, -6.0733717e+00, -5.7264713e+00, -5.2974220e+00, -4.8173488e+00, -4.2976773e+00, -3.9253566e+00, -4.1359392e+00, -5.3184177e+00, -7.3031678e+00, -9.1551177e+00, -9.6653971e+00, -8.3008653e+00, -5.8095309e+00, -3.8233961e+00, -3.6484606e+00, -5.2381448e+00, -7.2892718e+00, -8.4259684e+00, -8.4111939e+00, -8.2504718e+00, -9.0713649e+00, -1.0847572e+01, -1.2237694e+01, -1.1778327e+01, -9.3562851e+00, -6.5505356e+00, -5.4399677e+00, -6.8948933e+00, -9.8673125e+00, -1.2292601e+01, -1.2762515e+01, -1.1483835e+01, -9.7691928e+00, -8.6794242e+00, -8.1444623e+00, -7.3155729e+00, -5.6691899e+00, -3.6999470e+00, -2.5190136e+00, -2.7807397e+00, -3.9977324e+00, -4.8931953e+00, -4.4382031e+00, -2.6160774e+00, -2.8162098e-01,  1.6464502e+00,  2.8667384e+00,  3.6936070e+00,  4.5248361e+00,  5.3863953e+00,  5.9732814e+00,  6.0465556e+00,  5.7127492e+00,  5.2996105e+00,  4.9970262e+00,  4.6650964e+00,  4.0112729e+00,  2.9487791e+00,  1.7749042e+00,  9.9918920e-01,  9.8526434e-01,  1.7157911e+00,  2.8425258e+00,  3.9274232e+00,  4.6633167e+00,  4.9480989e+00,  4.8370357e+00,  4.4596532e+00,  3.9472261e+00,  3.3722364e+00,  2.7149639e+00,  1.8988824e+00,  9.0056614e-01, -1.4549666e-01, -9.5954567e-01, -1.2726558e+00, -1.0136685e+00, -3.6753801e-01,  3.4616436e-01,  8.6297682e-01,  1.0684917e+00,  9.4889836e-01,  5.0239079e-01, -2.5745595e-01, -1.2083881e+00, -2.0795816e+00, -2.5858794e+00, -2.6709293e+00, -2.6338922e+00, -2.9677089e+00, -3.9851569e+00, -5.5260941e+00, -7.0065398e+00, -7.7962299e+00, -7.6352877e+00, -6.7704051e+00, -5.7301729e+00, -4.9495118e+00, -4.5423707e+00, -4.3541738e+00, -4.1765612e+00, -3.9041365e+00, -3.5239193e+00, -3.0171828e+00, -2.3296750e+00, -1.4686498e+00, -6.2648870e-01, -1.7513498e-01, -4.7925158e-01, -1.6419063e+00, -3.3733218e+00, -5.0938724e+00, -6.2157891e+00, -6.4280330e+00, -5.8193402e+00, -4.7911225e+00, -3.8390294e+00, -3.3366023e+00, -3.4215395e+00, -4.0086312e+00, -4.8883349e+00, -5.8437276e+00, -6.7281463e+00, -7.4766817e+00, -8.0639504e+00, -8.4537579e+00, -8.5926271e+00, -8.4638834e+00, -8.1569130e+00, -7.8674120e+00, -7.7796173e+00, -7.8865042e+00, -7.8985776e+00, -7.3732857e+00, -6.0391515e+00, -4.0973362e+00, -2.2329756e+00, -1.2487955e+00, -1.5369664e+00, -2.7826131e+00, -4.1594179e+00, -4.9019969e+00, -4.8208462e+00, -4.3509579e+00, -4.1022677e+00, -4.2999453e+00, -4.5959478e+00, -4.4058809e+00, -3.4600940e+00, -2.0713253e+00, -8.8263007e-01, -3.2967446e-01, -3.0042227e-01, -2.8103388e-01,  1.6894307e-01,  1.0481016e+00,  1.9539087e+00,  2.4409769e+00,  2.3379813e+00,  1.7630811e+00,  9.0914650e-01, -1.1839750e-01, -1.2420833e+00, -2.2550324e+00, -2.8270169e+00, -2.7544526e+00, -2.2238866e+00, -1.7665440e+00, -1.8478738e+00, -2.4225880e+00, -2.8957905e+00, -2.6084411e+00, -1.4760080e+00, -2.0969608e-01,  1.4212598e-01, -9.7939478e-01, -3.1038299e+00, -4.9380057e+00, -5.1978358e+00, -3.4576392e+00, -4.0469735e-01,  2.6525404e+00,  4.6300462e+00,  5.2607546e+00,  5.0668302e+00,  4.8153350e+00,  4.9039869e+00,  5.1177358e+00,  4.8888862e+00,  3.8255511e+00,  2.0983499e+00,  3.9687060e-01, -5.1215912e-01, -3.0169836e-01,  7.0125574e-01,  1.7554397e+00,  2.2101765e+00,  1.8930871e+00,  1.1088474e+00,  3.0239186e-01, -2.9400448e-01, -7.3206653e-01, -1.1244534e+00, -1.3971723e+00, -1.3011102e+00, -6.9552123e-01,  1.7985026e-01,  7.5526832e-01,  5.3027740e-01, -4.9334626e-01, -1.7343031e+00, -2.4217015e+00, -2.1709342e+00, -1.2993585e+00, -6.3788997e-01, -9.8398198e-01, -2.5935896e+00, -5.0429379e+00, -7.4995604e+00, -9.1772393e+00, -9.6891055e+00, -9.1408625e+00, -7.9803701e+00, -6.7244988e+00, -5.7025598e+00, -4.9263312e+00, -4.1411993e+00, -3.0292159e+00, -1.4458464e+00,  4.5877305e-01,  2.3107619e+00,  3.7168124e+00,  4.4542646e+00,  4.5332559e+00,  4.1349770e+00,  3.5139599e+00,  2.9303362e+00,  2.5996188e+00,  2.6221486e+00,  2.9174053e+00,  3.2513563e+00,  3.3978740e+00,  3.3325830e+00,  3.2722466e+00,  3.4766633e+00,  3.9631372e+00,  4.4160869e+00,  4.4326625e+00,  3.9207367e+00,  3.2674083e+00,  3.0568369e+00,  3.5320361e+00,  4.2831089e+00,  4.4973867e+00,  3.6147218e+00,  1.8335758e+00, -5.5142932e-05, -1.0625234e+00, -1.2202036e+00, -1.1183318e+00, -1.6129006e+00, -3.0361038e+00, -4.9166351e+00, -6.3640366e+00, -6.7559745e+00, -6.1464799e+00, -5.1071342e+00, -4.2175556e+00, -3.6736884e+00, -3.2947799e+00, -2.8132440e+00, -2.1165180e+00, -1.2442504e+00, -2.3973482e-01,  9.0957142e-01,  2.1536093e+00,  3.2394376e+00,  3.7694363e+00,  3.4818473e+00,  2.5210434e+00,  1.4218519e+00,  7.6790595e-01,  7.8427053e-01,  1.2022145e+00,  1.5070512e+00,  1.3520736e+00,  7.8996438e-01,  1.5128948e-01, -2.8289114e-01, -5.0117127e-01, -6.8808578e-01, -9.5794772e-01, -1.1742976e+00, -1.0390163e+00, -3.6756759e-01,  7.1772480e-01,  1.8712033e+00,  2.8165707e+00,  3.5763118e+00,  4.4137111e+00,  5.5262857e+00,  6.7674192e+00,  7.6641364e+00,  7.7442844e+00,  6.9115973e+00,  5.5580992e+00,  4.3222530e+00,  3.6905012e+00,  3.7461415e+00,  4.2155856e+00,  4.7080877e+00,  4.9256254e+00,  4.7187701e+00,  4.0479084e+00,  2.9764324e+00,  1.7180322e+00,  6.2620560e-01,  2.8872428e-02, -1.5990654e-02,  1.7801754e-01,  1.1915822e-01, -4.8106973e-01, -1.4533770e+00, -2.2874556e+00, -2.5478845e+00, -2.2384390e+00, -1.7949744e+00, -1.7135207e+00, -2.1430598e+00, -2.7911299e+00, -3.1946554e+00, -3.0859668e+00, -2.5353061e+00, -1.7976463e+00, -1.0697195e+00, -4.0178625e-01,  1.9926404e-01,  6.4963701e-01,  8.1576266e-01,  6.5625603e-01,  2.9947185e-01, -4.8740100e-02, -2.6780705e-01, -3.6668716e-01, -3.6233582e-01, -1.6060739e-01,  3.6672595e-01,  1.1422433e+00,  1.7548556e+00,  1.6759618e+00,  7.1355721e-01, -7.0738354e-01, -1.7701850e+00, -1.8793929e+00, -1.1400806e+00, -2.4921348e-01,  1.3292978e-01, -3.4092243e-02, -1.7790611e-01,  2.9107739e-01,  1.3573596e+00,  2.3441662e+00,  2.4803626e+00,  1.5597765e+00,  8.8246596e-02, -1.1859166e+00, -1.8862918e+00, -2.2015606e+00, -2.5447412e+00, -3.0899610e+00, -3.6694995e+00, -4.0879672e+00, -4.4522027e+00, -5.1072658e+00, -6.2124043e+00, -7.4117389e+00, -7.9994945e+00, -7.4895305e+00, -6.0697051e+00, -4.4972928e+00, -3.5098718e+00, -3.2795588e+00, -3.3853883e+00, -3.2809258e+00, -2.7850356e+00, -2.1493354e+00, -1.7010474e+00, -1.4659722e+00, -1.1528992e+00, -4.8499216e-01,  4.8541666e-01,  1.4021658e+00,  1.9333663e+00,  2.0652225e+00,  2.0792212e+00,  2.2582451e+00,  2.6228229e+00,  2.9382479e+00,  2.9486509e+00,  2.5897199e+00,  1.9975570e+00,  1.3622355e+00,  8.1044643e-01,  4.1449770e-01,  2.4361844e-01,  3.2199045e-01,  4.9845723e-01,  3.9680603e-01, -4.0647963e-01, -2.0485604e+00, -4.1616365e+00, -5.9983574e+00, -6.8553278e+00, -6.4870358e+00, -5.2011719e+00, -3.5913633e+00, -2.1526738e+00, -1.0817202e+00, -3.5635992e-01,  6.7464397e-02,  1.7027858e-01, -4.1829930e-02, -4.2104798e-01, -7.1829379e-01, -7.8999170e-01, -7.7640519e-01, -1.0390096e+00, -1.8533164e+00, -3.1045422e+00, -4.2824801e+00, -4.8436791e+00, -4.6811861e+00, -4.3031859e+00, -4.5197966e+00, -5.8348453e+00, -8.0105848e+00, -1.0172573e+01, -1.1405107e+01, -1.1386863e+01, -1.0571983e+01, -9.7868304e+00, -9.5891602e+00, -9.9191081e+00, -1.0300349e+01, -1.0362603e+01, -1.0187276e+01, -1.0167238e+01, -1.0541668e+01, -1.1077205e+01, -1.1223392e+01, -1.0607506e+01, -9.3944020e+00, -8.1532221e+00, -7.3420320e+00, -6.8955970e+00, -6.3150414e+00, -5.1851117e+00, -3.6346137e+00, -2.3021212e+00, -1.8292221e+00, -2.3386880e+00, -3.3558662e+00, -4.2113521e+00, -4.5340728e+00, -4.4081971e+00, -4.1287269e+00, -3.8705165e+00, -3.6133127e+00, -3.3453191e+00, -3.2550069e+00, -3.6446897e+00, -4.6245610e+00, -5.9175475e+00, -7.0236081e+00, -7.6277206e+00, -7.8617140e+00, -8.1404271e+00, -8.6978265e+00, -9.2567768e+00, -9.1686960e+00, -7.9363928e+00, -5.6777928e+00, -3.1291063e+00, -1.1811487e+00, -3.3005266e-01, -4.6653218e-01, -1.1148964e+00, -1.8625746e+00, -2.6104835e+00, -3.4837721e+00, -4.5534334e+00, -5.6581288e+00, -6.4896545e+00, -6.8531132e+00, -6.8570270e+00, -6.8488118e+00, -7.1263001e+00, -7.6518060e+00, -8.0177601e+00, -7.7345672e+00, -6.6519360e+00, -5.1801591e+00, -4.0851218e+00, -3.9486147e+00, -4.6856668e+00, -5.5307033e+00, -5.5734383e+00, -4.4714043e+00, -2.7685073e+00, -1.5185450e+00, -1.4698894e+00, -2.4535580e+00, -3.4803674e+00, -3.4807384e+00, -2.0918388e+00,  1.3076056e-01,  2.2031781e+00,  3.4510129e+00,  3.8822443e+00,  3.9586146e+00,  4.0695146e+00,  4.2235503e+00,  4.1958607e+00,  3.9059837e+00,  3.6016211e+00,  3.6531929e+00,  4.1683816e+00,  4.8145752e+00,  5.0349001e+00,  4.4765659e+00,  3.2690211e+00,  1.9384734e+00,  1.0548626e+00,  8.9223660e-01,  1.3186869e+00,  1.9306098e+00,  2.3002519e+00,  2.1930403e+00,  1.6683573e+00,  1.0254651e+00,  6.0096237e-01,  5.0801763e-01,  4.9659027e-01,  9.0893969e-02, -1.0333278e+00, -2.7077055e+00, -4.2869652e+00, -5.0830077e+00, -4.8997751e+00, -4.2051938e+00, -3.7492000e+00, -3.9258207e+00, -4.4383658e+00, -4.5869571e+00, -3.9419649e+00, -2.7982407e+00, -1.9807341e+00, -2.1529597e+00, -3.2394749e+00, -4.4826813e+00, -5.0866185e+00, -4.8722474e+00, -4.3628749e+00, -4.2383411e+00, -4.6663526e+00, -5.1239964e+00, -4.8756528e+00, -3.6845277e+00, -2.1280263e+00, -1.2330191e+00, -1.7283428e+00, -3.5225844e+00, -5.8063174e+00, -7.6539063e+00, -8.6155329e+00, -8.8510886e+00, -8.7774925e+00, -8.6028616e+00, -8.1717608e+00, -7.2291488e+00, -5.8200930e+00, -4.4194694e+00, -3.6320457e+00, -3.7005096e+00, -4.2581739e+00, -4.5813981e+00, -4.1768104e+00, -3.2345707e+00, -2.5594250e+00, -3.0039580e+00, -4.8345441e+00, -7.5185566e+00, -1.0081927e+01, -1.1737521e+01, -1.2302708e+01, -1.2143805e+01, -1.1789275e+01, -1.1581651e+01, -1.1615704e+01, -1.1895111e+01, -1.2451160e+01, -1.3270791e+01, -1.4140258e+01, -1.4638581e+01, -1.4373730e+01, -1.3291137e+01, -1.1775249e+01, -1.0430380e+01, -9.7094890e+00, -9.6855215e+00, -1.0116694e+01, -1.0696653e+01, -1.1255240e+01, -1.1781623e+01, -1.2337214e+01, -1.2999619e+01, -1.3877037e+01, -1.5102313e+01, -1.6726827e+01, -1.8580260e+01, -2.0265260e+01, -2.1368696e+01, -2.1755289e+01, -2.1686854e+01, -2.1632059e+01, -2.1904912e+01, -2.2437186e+01, -2.2881424e+01, -2.2949910e+01, -2.2689556e+01, -2.2458279e+01, -2.2635110e+01, -2.3317078e+01, -2.4245821e+01, -2.5001184e+01, -2.5292867e+01, -2.5135386e+01, -2.4806209e+01, -2.4642854e+01, -2.4822496e+01, -2.5260410e+01, -2.5689785e+01, -2.5878344e+01, -2.5835930e+01, -2.5839918e+01, -2.6213962e+01, -2.7003610e+01, -2.7834147e+01, -2.8139646e+01, -2.7636108e+01, -2.6636688e+01, -2.5868856e+01, -2.5871125e+01, -2.6473410e+01, -2.6871073e+01, -2.6307493e+01, -2.4796432e+01, -2.3206955e+01, -2.2566371e+01, -2.3163351e+01, -2.4270177e+01, -2.4780803e+01, -2.4223900e+01, -2.3233029e+01, -2.3018038e+01, -2.4281756e+01, -2.6539444e+01, -2.8447454e+01, -2.8854303e+01, -2.7669728e+01, -2.5849364e+01, -2.4590470e+01, -2.4477064e+01, -2.5248042e+01, -2.6228670e+01, -2.6905695e+01, -2.7133602e+01, -2.6932574e+01, -2.6246323e+01, -2.4978323e+01, -2.3238399e+01, -2.1462700e+01, -2.0205318e+01, -1.9769743e+01, -2.0036931e+01, -2.0649294e+01, -2.1344126e+01, -2.2090217e+01, -2.2912903e+01, -2.3642085e+01, -2.3908704e+01, -2.3448734e+01, -2.2429030e+01, -2.1448328e+01, -2.1159447e+01, -2.1816610e+01, -2.3125565e+01, -2.4501287e+01, -2.5488423e+01, -2.5995191e+01, -2.6197942e+01, -2.6267690e+01, -2.6182665e+01, -2.5760066e+01, -2.4829559e+01, -2.3377004e+01, -2.1555703e+01, -1.9589186e+01, -1.7656640e+01, -1.5835043e+01, -1.4119671e+01, -1.2498288e+01, -1.1020826e+01, -9.7956620e+00, -8.8869823e+00, -8.1858932e+00, -7.4009962e+00, -6.2543783e+00, -4.7759197e+00, -3.4282317e+00, -2.8654585e+00, -3.4371715e+00, -4.8346569e+00, -6.2331395e+00, -6.8796324e+00, -6.6526160e+00, -6.0969783e+00, -5.8896997e+00, -6.2221004e+00, -6.6768281e+00, -6.7107935e+00, -6.2604098e+00, -5.8507411e+00, -6.0735289e+00, -6.9421917e+00, -7.7912226e+00, -7.8770334e+00, -7.1380628e+00, -6.3747979e+00, -6.6313647e+00, -8.3121386e+00, -1.0826565e+01, -1.3072337e+01, -1.4306403e+01, -1.4634882e+01, -1.4750597e+01, -1.5243217e+01, -1.6133550e+01, -1.6980009e+01, -1.7336869e+01, -1.7084811e+01, -1.6398952e+01, -1.5531302e+01, -1.4704540e+01, -1.4163556e+01, -1.4164535e+01, -1.4751930e+01, -1.5511917e+01, -1.5671381e+01, -1.4643942e+01, -1.2624617e+01, -1.0640820e+01, -9.8690218e+00, -1.0706931e+01, -1.2394985e+01, -1.3563868e+01, -1.3288903e+01, -1.1784094e+01, -1.0183872e+01, -9.6434348e+00, -1.0523854e+01, -1.2266776e+01, -1.3922392e+01, -1.4795801e+01, -1.4726467e+01, -1.3952349e+01, -1.2847489e+01, -1.1774866e+01, -1.1032648e+01, -1.0754229e+01, -1.0772814e+01, -1.0641260e+01, -9.9213435e+00, -8.5581743e+00, -6.9787635e+00, -5.7582849e+00, -5.1267298e+00, -4.7944822e+00, -4.2961225e+00, -3.5296845e+00, -2.9368520e+00, -3.1006567e+00, -4.1286611e+00, -5.4426781e+00, -6.2263978e+00, -6.1341103e+00, -5.5838705e+00, -5.3437966e+00, -5.8031246e+00, -6.6250395e+00, -7.1004289e+00, -6.8353452e+00, -6.0912683e+00, -5.4606511e+00, -5.2273117e+00, -5.0630481e+00, -4.3575725e+00, -2.8388786e+00, -8.6155311e-01,  9.1020777e-01,  2.0880177e+00,  2.8238067e+00,  3.5113879e+00,  4.2639596e+00,  4.7298202e+00,  4.4558923e+00,  3.4420576e+00,  2.3168120e+00,  1.9142286e+00,  2.5994711e+00,  3.9321970e+00,  4.9597225e+00,  4.8914120e+00,  3.6169396e+00,  1.7152562e+00,  3.7301907e-02, -7.7089710e-01, -5.0413115e-01,  6.3987833e-01,  2.2203714e+00,  3.7079612e+00,  4.6247596e+00,  4.6980740e+00,  3.9807252e+00,  2.8332835e+00,  1.7345713e+00,  1.0359336e+00,  8.3985543e-01,  1.0766226e+00,  1.6691320e+00,  2.6015334e+00,  3.8224605e+00,  5.1035318e+00,  6.0427566e+00,  6.2730126e+00,  5.7289250e+00,  4.7420051e+00,  3.8587830e+00,  3.5003559e+00,  3.7081058e+00,  4.1477400e+00,  4.3464715e+00,  3.9836606e+00,  3.0520654e+00,  1.8261364e+00,  7.0081627e-01,  1.0480114e-02, -9.6360069e-02,  2.9594594e-01,  9.0029150e-01,  1.3334125e+00,  1.2861989e+00,  7.0231014e-01, -1.3418662e-01, -6.9211804e-01, -4.6750521e-01,  6.9271435e-01,  2.4281069e+00,  4.0148642e+00,  4.7858975e+00,  4.5672715e+00,  3.8176145e+00,  3.3326814e+00,  3.6921634e+00,  4.8454423e+00,  6.1608550e+00,  6.9208017e+00,  6.8880491e+00,  6.4934905e+00,  6.4853605e+00,  7.3119980e+00,  8.7294146e+00,  9.9448456e+00,  1.0177058e+01,  9.1926871e+00,  7.4243188e+00,  5.6301655e+00,  4.4040989e+00,  3.9068942e+00,  3.9524178e+00,  4.2853598e+00,  4.7840480e+00,  5.4592884e+00,  6.3284159e+00,  7.3247825e+00,  8.3155358e+00,  9.1697875e+00,  9.7858794e+00,  1.0064506e+01,  9.8968390e+00,  9.2241638e+00,  8.1330044e+00,  6.8834342e+00,  5.8075963e+00,  5.1294180e+00,  4.8371494e+00,  4.7105067e+00,  4.4881120e+00,  4.0554684e+00,  3.5197308e+00,  3.1189976e+00,  3.0283847e+00,  3.1976603e+00,  3.3423701e+00,  3.1157772e+00,  2.3612915e+00,  1.2646824e+00,  2.6532014e-01, -2.5026599e-01, -2.6263013e-01, -1.7895357e-01, -5.3929887e-01, -1.5569271e+00, -2.8574852e+00, -3.6708259e+00, -3.3805275e+00, -2.0245824e+00, -3.4332528e-01,  6.8704637e-01,  4.8815581e-01, -7.9625899e-01, -2.5002805e+00, -3.9505444e+00, -4.8659840e+00, -5.3705929e+00, -5.7135428e+00, -6.0203049e+00, -6.2960041e+00, -6.5990557e+00, -7.1159782e+00, -7.9854005e+00, -9.0176107e+00, -9.6251639e+00, -9.1301618e+00, -7.2671834e+00, -4.4817844e+00, -1.7521120e+00, -3.8333369e-02,  2.3713458e-01, -6.8456956e-01, -2.1962503e+00, -3.7476635e+00, -5.0545821e+00, -6.0065364e+00, -6.4766264e+00, -6.2950609e+00, -5.4373008e+00, -4.2193250e+00, -3.2473491e+00, -3.0874037e+00, -3.8947904e+00, -5.3092503e+00, -6.7082931e+00, -7.6114972e+00, -7.9172189e+00, -7.8260632e+00, -7.5902157e+00, -7.3513558e+00, -7.1850437e+00, -7.2194171e+00, -7.6105535e+00, -8.3353936e+00, -9.0213903e+00, -9.0782875e+00, -8.1362831e+00, -6.4539751e+00, -4.8904951e+00, -4.3633357e+00, -5.1755199e+00, -6.7628872e+00, -8.0934362e+00, -8.4026962e+00, -7.6627067e+00, -6.4264693e+00, -5.2469228e+00, -4.2275290e+00, -3.0948508e+00, -1.6630731e+00, -1.8903232e-01,  7.5654088e-01,  7.8809147e-01,  9.5135383e-02, -6.5039347e-01, -7.8352920e-01, -9.0838218e-02,  1.1501760e+00,  2.4906113e+00,  3.6328612e+00,  4.4805490e+00,  4.9830854e+00,  5.0590792e+00,  4.7434041e+00,  4.3795327e+00,  4.5527544e+00,  5.7005001e+00,  7.7052418e+00,  9.8710311e+00,  1.1369910e+01,  1.1809125e+01,  1.1445441e+01,  1.0890102e+01,  1.0600249e+01,  1.0605524e+01,  1.0646942e+01,  1.0506012e+01,  1.0174511e+01,  9.7506016e+00,  9.2572761e+00,  8.6265337e+00,  7.8531403e+00,  7.0941975e+00,  6.5491771e+00,  6.2350448e+00,  5.9386949e+00,  5.4614258e+00,  4.9259009e+00,  4.7825059e+00,  5.4205473e+00,  6.7168489e+00,  7.9886052e+00,  8.4744477e+00,  7.9531394e+00,  6.9347719e+00,  6.2250466e+00,  6.2377260e+00,  6.6652153e+00,  6.7868605e+00,  6.1170802e+00,  4.8147421e+00,  3.5303198e+00,  2.8816888e+00,  3.0319735e+00,  3.6734494e+00,  4.3276136e+00,  4.6499103e+00,  4.5354598e+00,  4.0657431e+00,  3.4350263e+00,  2.8966903e+00,  2.6653962e+00,  2.7680581e+00,  2.9783167e+00,  2.9722262e+00,  2.6332672e+00,  2.2216532e+00,  2.1836471e+00,  2.7181165e+00,  3.5103522e+00,  3.9462797e+00,  3.6699001e+00,  2.9726849e+00,  2.6098407e+00,  3.1664635e+00,  4.5437792e+00,  6.0454720e+00,  6.9815405e+00,  7.2172464e+00,  7.1634851e+00,  7.2637228e+00,  7.5202834e+00,  7.5324923e+00,  6.9740034e+00,  5.9824074e+00,  5.0371192e+00,  4.4492862e+00,  4.0077657e+00,  3.1780869e+00,  1.6832243e+00, -1.1226929e-01, -1.4198910e+00, -1.6676467e+00, -9.7223043e-01, -1.5193293e-02,  5.3943590e-01,  5.4142752e-01,  3.4832290e-01,  4.0054979e-01,  8.2339553e-01,  1.3989893e+00,  1.8430680e+00,  2.0471529e+00,  2.0586268e+00,  1.8978034e+00,  1.4791481e+00,  7.4894825e-01, -1.2540868e-01, -7.5782728e-01, -7.7692514e-01, -7.6809280e-02,  1.1501002e+00,  2.6057095e+00,  4.0896693e+00,  5.5212659e+00,  6.8149510e+00,  7.8115189e+00,  8.3834875e+00,  8.5992369e+00,  8.7227586e+00,  8.9850833e+00,  9.3276188e+00,  9.3910631e+00,  8.8020212e+00,  7.5072056e+00,  5.8384878e+00,  4.2440066e+00,  2.9435288e+00,  1.8328816e+00,  7.0472936e-01, -4.6425870e-01, -1.4623562e+00, -2.0693465e+00, -2.3039502e+00, -2.4135329e+00, -2.6063045e+00, -2.8128897e+00, -2.7510728e+00, -2.2541547e+00, -1.5266077e+00, -1.0278728e+00, -1.0459837e+00, -1.3622610e+00, -1.3764335e+00, -6.5207306e-01,  5.7950648e-01,  1.4464748e+00,  1.0549755e+00, -7.6947815e-01, -3.2419502e+00, -5.1235620e+00, -5.6040495e+00, -4.8665723e+00, -3.8875757e+00, -3.6478364e+00, -4.4068989e+00, -5.6192665e+00, -6.5128872e+00, -6.7910204e+00, -6.8406116e+00, -7.2944773e+00, -8.3818578e+00, -9.6833278e+00, -1.0519321e+01, -1.0603811e+01, -1.0341359e+01, -1.0476796e+01, -1.1416113e+01, -1.2850807e+01, -1.4035335e+01, -1.4452978e+01, -1.4244284e+01, -1.4009696e+01, -1.4202560e+01, -1.4713164e+01, -1.5038232e+01, -1.4844123e+01, -1.4348786e+01, -1.4142789e+01, -1.4637613e+01, -1.5693955e+01, -1.6781700e+01, -1.7474229e+01, -1.7752614e+01, -1.7823503e+01, -1.7690793e+01, -1.6995565e+01, -1.5354856e+01, -1.2879237e+01, -1.0313085e+01, -8.5842799e+00, -8.1360609e+00, -8.6467797e+00, -9.3803344e+00, -9.8135149e+00, -9.9515854e+00, -1.0089758e+01, -1.0335572e+01, -1.0410314e+01, -9.9183937e+00, -8.7827772e+00, -7.4005882e+00, -6.3888185e+00, -6.1951806e+00, -6.9171345e+00, -8.3821672e+00, -1.0268943e+01, -1.2109495e+01, -1.3296068e+01, -1.3320999e+01, -1.2207414e+01, -1.0728028e+01, -1.0035409e+01, -1.0840387e+01, -1.2802449e+01, -1.4740226e+01, -1.5573288e+01, -1.5197373e+01, -1.4498885e+01, -1.4492361e+01, -1.5390191e+01, -1.6469957e+01, -1.6818521e+01, -1.6180558e+01, -1.5077033e+01, -1.4141618e+01, -1.3436197e+01, -1.2501170e+01, -1.1076376e+01, -9.6634214e+00, -9.2228571e+00, -1.0218509e+01, -1.1983069e+01, -1.3148251e+01, -1.2834331e+01, -1.1477323e+01, -1.0452370e+01, -1.0802463e+01, -1.2274032e+01, -1.3589857e+01, -1.3696868e+01, -1.2779469e+01, -1.2061998e+01, -1.2605264e+01, -1.4268291e+01, -1.5821572e+01, -1.6071374e+01, -1.4905210e+01, -1.3300696e+01, -1.2368856e+01, -1.2389241e+01, -1.2705228e+01, -1.2454500e+01, -1.1345022e+01, -9.7693466e+00, -8.2963985e+00, -7.1713107e+00, -6.3197956e+00, -5.7258052e+00, -5.6494050e+00, -6.3875846e+00, -7.8458409e+00, -9.4338584e+00, -1.0456779e+01, -1.0633227e+01, -1.0230739e+01, -9.7168096e+00, -9.3265206e+00, -8.9982838e+00, -8.6859509e+00, -8.6200913e+00, -9.1523135e+00, -1.0310339e+01, -1.1568859e+01, -1.2166723e+01, -1.1734933e+01, -1.0638461e+01, -9.6767481e+00, -9.4040768e+00, -9.6979054e+00, -9.9510040e+00, -9.6566279e+00, -8.8097942e+00, -7.7879040e+00, -6.9173432e+00, -6.2087918e+00, -5.4983993e+00, -4.7693593e+00, -4.2562728e+00, -4.2132010e+00, -4.6185329e+00, -5.1550498e+00, -5.4855304e+00, -5.5170917e+00, -5.3823266e+00, -5.2098058e+00, -4.9995415e+00, -4.7673311e+00, -4.7489271e+00, -5.3167550e+00, -6.5700223e+00, -8.0016791e+00, -8.6977594e+00, -8.0393867e+00, -6.3094570e+00, -4.5764689e+00, -3.8566384e+00, -4.2689254e+00, -4.9685539e+00, -4.9428608e+00, -3.9291625e+00, -2.5832752e+00, -1.7484098e+00, -1.5582945e+00, -1.2805236e+00, -7.8461770e-02,  2.0518509e+00,  4.1159172e+00,  4.9399809e+00,  4.2277819e+00,  2.8557945e+00,  2.1160049e+00,  2.6014451e+00,  3.7503223e+00,  4.4300389e+00,  3.9798680e+00,  2.7544870e+00,  1.7370808e+00,  1.6685071e+00,  2.5230499e+00,  3.7375579e+00,  4.8477024e+00,  5.8529538e+00,  6.9965269e+00,  8.2803609e+00,  9.2834390e+00,  9.4965107e+00,  8.8294961e+00,  7.7660469e+00,  6.9965457e+00,  6.8718689e+00,  7.1734751e+00,  7.3680145e+00,  7.0637158e+00,  6.2541894e+00,  5.2060775e+00,  4.1985234e+00,  3.3958079e+00,  2.9040011e+00,  2.8266554e+00,  3.1657814e+00,  3.6602693e+00,  3.8083778e+00,  3.1746615e+00,  1.7657272e+00,  1.1537521e-01, -1.0648072e+00, -1.4190823e+00, -1.2220840e+00, -1.1580573e+00, -1.7910484e+00, -3.1611180e+00, -4.8021662e+00, -6.1043260e+00, -6.6917386e+00, -6.5564050e+00, -5.9562635e+00, -5.2614159e+00, -4.8701719e+00, -5.1434578e+00, -6.2552197e+00, -7.9970157e+00, -9.7346857e+00, -1.0674255e+01, -1.0340271e+01, -8.9341197e+00, -7.2720348e+00, -6.3100901e+00, -6.5876772e+00, -7.9771569e+00, -9.8730529e+00, -1.1621765e+01, -1.2862968e+01, -1.3599152e+01, -1.4054607e+01, -1.4501649e+01, -1.5158995e+01, -1.6137914e+01, -1.7382659e+01, -1.8632349e+01, -1.9491767e+01, -1.9633115e+01, -1.9010535e+01, -1.7911740e+01, -1.6784337e+01, -1.5966930e+01, -1.5539149e+01, -1.5389861e+01, -1.5397922e+01, -1.5528051e+01, -1.5756748e+01, -1.5940818e+01, -1.5814515e+01, -1.5167106e+01, -1.4045373e+01, -1.2765813e+01, -1.1687502e+01, -1.0934837e+01, -1.0328973e+01, -9.6026452e+00, -8.7020273e+00, -7.8854710e+00, -7.5141621e+00, -7.7247179e+00, -8.2940969e+00, -8.8293908e+00, -9.1035387e+00, -9.2137471e+00, -9.4094436e+00, -9.7643225e+00, -1.0034089e+01, -9.8729844e+00, -9.2246267e+00, -8.4977693e+00, -8.3008646e+00, -8.9147176e+00, -9.9616428e+00, -1.0606179e+01, -1.0177053e+01, -8.7155672e+00, -6.9821059e+00, -5.8888302e+00, -5.8085436e+00, -6.3216833e+00, -6.6031111e+00, -6.1213412e+00, -5.0730614e+00, -4.2109912e+00, -4.2333422e+00, -5.2511009e+00, -6.7506530e+00, -8.0306966e+00, -8.7051666e+00, -8.8546689e+00, -8.7596930e+00, -8.5278865e+00, -7.9944733e+00, -6.9831495e+00, -5.6456755e+00, -4.5006966e+00, -4.0649375e+00, -4.3698375e+00, -4.8140909e+00, -4.5528190e+00, -3.1635361e+00, -1.0543739e+00,  7.5354336e-01,  1.3450041e+00,  5.8770015e-01, -7.6662931e-01, -1.6468352e+00, -1.4577780e+00, -4.9137760e-01,  3.5134101e-01,  2.8513561e-01, -7.6931057e-01, -2.1781883e+00, -3.1371331e+00, -3.3031082e+00, -3.0205284e+00, -3.0051302e+00, -3.7824035e+00, -5.3320303e+00, -7.1721792e+00, -8.7478601e+00, -9.7834910e+00, -1.0358317e+01, -1.0728730e+01, -1.1102471e+01, -1.1536895e+01, -1.1972885e+01, -1.2307979e+01, -1.2440531e+01, -1.2303255e+01, -1.1923101e+01, -1.1474033e+01, -1.1234724e+01, -1.1423158e+01, -1.2015874e+01, -1.2720362e+01, -1.3159105e+01, -1.3126930e+01, -1.2697617e+01, -1.2086705e+01, -1.1410826e+01, -1.0585149e+01, -9.4570971e+00, -8.0259060e+00, -6.5038841e+00, -5.1438541e+00, -4.0166387e+00, -2.9904599e+00, -1.9507017e+00, -1.0207399e+00, -5.1226619e-01, -6.1244412e-01, -1.1279269e+00, -1.6019696e+00, -1.7571983e+00, -1.8415769e+00, -2.4769813e+00, -4.0635806e+00, -6.2607134e+00, -8.0659451e+00, -8.4981462e+00, -7.3249054e+00, -5.2076228e+00, -3.1537866e+00, -1.7830132e+00, -1.0444285e+00, -5.5421558e-01, -1.2661169e-01,  6.4445564e-02, -1.8041036e-01, -6.7145017e-01, -8.3636608e-01, -1.9634400e-01,  1.1531086e+00,  2.5563224e+00,  3.3220287e+00,  3.2674012e+00,  2.7797157e+00,  2.3808649e+00,  2.2578560e+00,  2.2083563e+00,  1.9857259e+00,  1.6196880e+00,  1.3621064e+00,  1.3565997e+00,  1.4462648e+00,  1.3640886e+00,  1.0896741e+00,  9.3160237e-01,  1.1828306e+00,  1.6984875e+00,  1.8960575e+00,  1.2666973e+00, -8.0619070e-02, -1.4262929e+00, -2.0640735e+00, -1.9662645e+00, -1.8232811e+00, -2.3829584e+00, -3.7147917e+00, -5.1166889e+00, -5.7540327e+00, -5.3982478e+00, -4.5481965e+00, -3.8573869e+00, -3.4935758e+00, -3.0984049e+00, -2.3552533e+00, -1.5091325e+00, -1.2203710e+00, -1.8489370e+00, -2.9141552e+00, -3.3593704e+00, -2.4571032e+00, -5.1429534e-01,  1.3199340e+00,  1.9978633e+00,  1.4052801e+00,  3.3591370e-01, -3.1169960e-01, -3.1818357e-01, -1.9155795e-01, -5.1993979e-01, -1.3270577e+00, -2.0565992e+00, -2.1370939e+00, -1.5158358e+00, -6.4506323e-01, -9.6885233e-04,  3.3130971e-01,  6.0940009e-01,  1.0507913e+00,  1.5753358e+00,  1.9386209e+00,  2.0555080e+00,  2.1059841e+00,  2.2857455e+00,  2.4926281e+00,  2.3375505e+00,  1.5185028e+00,  1.8094208e-01, -1.1313875e+00, -1.9197819e+00, -2.1421707e+00, -2.1930696e+00, -2.4886433e+00, -3.0843023e+00, -3.6959601e+00, -4.0664665e+00, -4.2734906e+00, -4.6646304e+00, -5.5113491e+00, -6.7541373e+00, -8.0832327e+00, -9.2277855e+00, -1.0125729e+01, -1.0820664e+01, -1.1262182e+01, -1.1288992e+01, -1.0835845e+01, -1.0107092e+01, -9.4604776e+00, -9.0687999e+00, -8.7203168e+00, -8.0305345e+00, -6.9185804e+00, -5.8773519e+00, -5.7023977e+00, -6.8467739e+00, -8.9571501e+00, -1.1027783e+01, -1.2077025e+01, -1.1798607e+01, -1.0679125e+01, -9.5460048e+00, -8.9684783e+00, -8.9838892e+00, -9.2778181e+00, -9.5663928e+00, -9.8369022e+00, -1.0304858e+01, -1.1194611e+01, -1.2533870e+01, -1.4075987e+01, -1.5369006e+01, -1.5952986e+01, -1.5634601e+01, -1.4707024e+01, -1.3925464e+01, -1.4147760e+01, -1.5805775e+01, -1.8579004e+01, -2.1558535e+01, -2.3821788e+01, -2.4988527e+01, -2.5331774e+01, -2.5398235e+01, -2.5510052e+01, -2.5582877e+01, -2.5353335e+01, -2.4708888e+01, -2.3753945e+01, -2.2573661e+01, -2.1015887e+01, -1.8812247e+01, -1.5985830e+01, -1.3130866e+01, -1.1195570e+01, -1.0846746e+01, -1.1922866e+01, -1.3464857e+01, -1.4341746e+01, -1.3986225e+01, -1.2675628e+01, -1.1192772e+01, -1.0203194e+01, -9.8536938e+00, -9.8330864e+00, -9.7302739e+00, -9.3439557e+00, -8.7434583e+00, -8.1418547e+00, -7.7561449e+00, -7.7391902e+00, -8.1381465e+00, -8.8303729e+00, -9.4917176e+00, -9.7021810e+00, -9.1907362e+00, -8.0559111e+00, -6.7607800e+00, -5.8650484e+00, -5.6857408e+00, -6.1506404e+00, -6.9445376e+00, -7.7954100e+00, -8.6413614e+00, -9.5538158e+00, -1.0532378e+01, -1.1401601e+01, -1.1926678e+01, -1.2040377e+01, -1.1954388e+01, -1.2024960e+01, -1.2463071e+01, -1.3123430e+01, -1.3551360e+01, -1.3266518e+01, -1.2086160e+01, -1.0270090e+01, -8.4006604e+00, -7.0821906e+00, -6.6396820e+00, -6.9778699e+00, -7.6653884e+00, -8.1950734e+00, -8.2844002e+00, -8.0485376e+00, -7.9265471e+00, -8.3719989e+00, -9.4809773e+00, -1.0816471e+01, -1.1603663e+01, -1.1227805e+01, -9.7168345e+00, -7.8368199e+00, -6.6581168e+00, -6.8340323e+00, -8.0889010e+00, -9.3158549e+00, -9.2693184e+00, -7.3978339e+00, -4.2389466e+00, -1.1001419e+00,  7.4286111e-01,  7.7165708e-01, -5.9125369e-01, -2.3871484e+00, -3.7551742e+00, -4.3459660e+00, -4.3105558e+00, -4.0000793e+00, -3.6697857e+00, -3.3792308e+00, -3.0686910e+00, -2.6735838e+00, -2.1812488e+00, -1.6388540e+00, -1.1576638e+00, -9.0878178e-01, -1.0623043e+00, -1.6654476e+00, -2.5483033e+00, -3.3712551e+00, -3.8260175e+00, -3.8534947e+00, -3.6971814e+00, -3.7345282e+00, -4.2187860e+00, -5.1427159e+00, -6.3240118e+00, -7.6123337e+00, -9.0170075e+00, -1.0644272e+01, -1.2521483e+01, -1.4489945e+01, -1.6272858e+01, -1.7651519e+01, -1.8583336e+01, -1.9162037e+01, -1.9480398e+01, -1.9547956e+01, -1.9351317e+01, -1.8989894e+01, -1.8729552e+01, -1.8882145e+01, -1.9582886e+01, -2.0648292e+01, -2.1650006e+01, -2.2169897e+01, -2.2053147e+01, -2.1474075e+01, -2.0775412e+01, -2.0214786e+01, -1.9813039e+01, -1.9404912e+01, -1.8827706e+01, -1.8084569e+01, -1.7359658e+01, -1.6895596e+01, -1.6848674e+01, -1.7229618e+01, -1.7941925e+01, -1.8848105e+01, -1.9802437e+01, -2.0660422e+01, -2.1314303e+01, -2.1756073e+01, -2.2090994e+01, -2.2428562e+01, -2.2698971e+01, -2.2570984e+01, -2.1620795e+01, -1.9689789e+01, -1.7146123e+01, -1.4769524e+01, -1.3267486e+01, -1.2776682e+01, -1.2774994e+01, -1.2513799e+01, -1.1628679e+01, -1.0412003e+01, -9.5172529e+00, -9.3691989e+00, -9.8133374e+00, -1.0306614e+01, -1.0445364e+01, -1.0323683e+01, -1.0396741e+01, -1.1002096e+01, -1.2002318e+01, -1.2869090e+01, -1.3098240e+01, -1.2559010e+01, -1.1497549e+01, -1.0275231e+01, -9.1433152e+00, -8.2373348e+00, -7.6917802e+00, -7.6583834e+00, -8.1737890e+00, -9.0486948e+00, -9.9561120e+00, -1.0664107e+01, -1.1164148e+01, -1.1539468e+01, -1.1718133e+01, -1.1420877e+01, -1.0424882e+01, -8.8982757e+00, -7.4235954e+00, -6.6117317e+00, -6.6409689e+00, -7.1702749e+00, -7.7145722e+00, -8.0907290e+00, -8.4641736e+00, -8.9608803e+00, -9.3087731e+00, -8.9793107e+00, -7.7607452e+00, -6.1628809e+00, -5.1305851e+00, -5.2197447e+00, -5.9968576e+00, -6.3004799e+00, -5.2044694e+00, -2.8187097e+00, -1.7792465e-01,  1.6721315e+00,  2.5153566e+00,  2.9496091e+00,  3.5951164e+00,  4.3739920e+00,  4.6050664e+00,  3.7990748e+00,  2.3083011e+00,  1.1315225e+00,  1.0448529e+00,  1.9249460e+00,  2.9392621e+00,  3.4004048e+00,  3.4201233e+00,  3.7231099e+00,  4.8455728e+00,  6.5552952e+00,  8.0744296e+00,  8.8499976e+00,  9.0696586e+00,  9.4085398e+00,  1.0292637e+01,  1.1442788e+01,  1.2149180e+01,  1.1974894e+01,  1.1178808e+01,  1.0472000e+01,  1.0401308e+01,  1.0979675e+01,  1.1860606e+01,  1.2774799e+01,  1.3731010e+01,  1.4815733e+01,  1.5897657e+01,  1.6628340e+01,  1.6762405e+01,  1.6434027e+01,  1.6058600e+01,  1.5937899e+01,  1.5975693e+01,  1.5798144e+01,  1.5147577e+01,  1.4142179e+01,  1.3153992e+01,  1.2462444e+01,  1.2050563e+01,  1.1722441e+01,  1.1369363e+01,  1.1087340e+01,  1.1057296e+01,  1.1370275e+01,  1.1999840e+01,  1.2899260e+01,  1.4033725e+01,  1.5267831e+01,  1.6277220e+01,  1.6701733e+01,  1.6487318e+01,  1.6061731e+01,  1.6047895e+01,  1.6666726e+01,  1.7381116e+01,  1.7215195e+01,  1.5576517e+01,  1.2877991e+01,  1.0357193e+01,  9.1851259e+00,  9.6067763e+00,  1.0838561e+01,  1.1772724e+01,  1.1843758e+01,  1.1333900e+01,  1.0958390e+01,  1.1202044e+01,  1.1999065e+01,  1.2927409e+01,  1.3607222e+01,  1.3906614e+01,  1.3858832e+01,  1.3496535e+01,  1.2808499e+01,  1.1804901e+01,  1.0546702e+01,  9.0941264e+00,  7.4853922e+00,  5.8302885e+00,  4.4114071e+00,  3.5947785e+00,  3.5359983e+00,  3.9538230e+00,  4.2722362e+00,  4.0903973e+00,  3.5524305e+00,  3.2059036e+00,  3.4206528e+00,  3.9261205e+00,  3.9786197e+00,  3.0685346e+00,  1.4995678e+00,  2.3087180e-01,  6.3979599e-02,  9.1606102e-01,  1.8777534e+00,  2.0215411e+00,  1.2137070e+00,  1.8802480e-01, -1.5069497e-01,  4.8449112e-01,  1.5888021e+00,  2.3825160e+00,  2.4603358e+00,  1.9846370e+00,  1.3596377e+00,  8.1575721e-01,  3.1225844e-01, -2.5835372e-01, -8.9318497e-01, -1.5367939e+00, -2.2329349e+00, -3.1039295e+00, -4.1396152e+00, -5.0756493e+00, -5.5878382e+00, -5.6463876e+00, -5.6116065e+00, -5.8723600e+00, -6.3469702e+00, -6.4069195e+00, -5.4126033e+00, -3.3970943e+00, -1.1935954e+00,  2.0688578e-01,  5.0850154e-01,  3.5492728e-01,  7.0771538e-01,  1.9492794e+00,  3.5768941e+00,  4.7632019e+00,  5.1938485e+00,  5.3346367e+00,  5.8872029e+00,  7.0293683e+00,  8.2371454e+00,  8.8536188e+00,  8.7796644e+00,  8.5446723e+00,  8.6877534e+00,  9.1241310e+00,  9.1971535e+00,  8.3927909e+00,  6.9797756e+00,  5.8857560e+00,  5.8862885e+00,  6.8827375e+00,  7.9653269e+00,  8.1898883e+00,  7.3233216e+00,  5.8920883e+00,  4.5778370e+00,  3.6057820e+00,  2.6888666e+00,  1.4761991e+00, -2.5325806e-02, -1.4708418e+00, -2.5359633e+00, -3.1783312e+00, -3.5452026e+00, -3.7060720e+00, -3.5728659e+00, -3.1119793e+00, -2.5736372e+00, -2.4131910e+00, -2.9218053e+00, -3.9347194e+00, -4.9421746e+00, -5.5223928e+00, -5.6795370e+00, -5.7640939e+00, -6.0797678e+00, -6.5907839e+00, -7.0190730e+00, -7.2057856e+00, -7.3440960e+00, -7.8359531e+00, -8.9139150e+00, -1.0396345e+01, -1.1799305e+01, -1.2687317e+01, -1.2952623e+01, -1.2821294e+01, -1.2637622e+01, -1.2622229e+01, -1.2752149e+01, -1.2792348e+01, -1.2446364e+01, -1.1576850e+01, -1.0395373e+01, -9.4567544e+00, -9.3523798e+00, -1.0235282e+01, -1.1548480e+01, -1.2280169e+01, -1.1667564e+01, -9.8284092e+00, -7.7604074e+00, -6.6340182e+00, -6.9201809e+00, -8.0683401e+00, -8.9882857e+00, -8.8993282e+00, -7.8268701e+00, -6.3964120e+00, -5.2200213e+00, -4.4714780e+00, -3.9592830e+00, -3.4789013e+00, -3.0072231e+00, -2.5728138e+00, -2.0474828e+00, -1.1883839e+00,  6.2570452e-02,  1.3611632e+00,  2.1273409e+00,  2.0013691e+00,  1.1680216e+00,  2.3127753e-01, -2.4390957e-01, -9.7060213e-02,  4.5043940e-01,  1.0919179e+00,  1.6524061e+00,  2.0426463e+00,  2.1206929e+00,  1.7432909e+00,  1.0214774e+00,  4.6413714e-01,  7.1686902e-01,  2.0149658e+00,  3.8448281e+00,  5.2082521e+00,  5.3451717e+00,  4.3075194e+00,  2.8695021e+00,  1.8495147e+00,  1.4490806e+00,  1.1793078e+00,  3.9158772e-01, -1.1037508e+00, -2.8702927e+00, -4.2108344e+00, -4.6807765e+00, -4.3149690e+00, -3.4702742e+00, -2.5245887e+00, -1.7029313e+00, -1.0806500e+00, -6.3795556e-01, -2.8048127e-01,  1.2280203e-01,  6.2154822e-01,  1.0645963e+00,  1.1485712e+00,  6.7233080e-01, -2.1477935e-01, -1.0559217e+00, -1.4573487e+00, -1.4669055e+00, -1.5618931e+00, -2.1857915e+00, -3.2319855e+00, -3.9872058e+00, -3.6605758e+00, -2.0757347e+00,  8.2450962e-02,  1.7044938e+00,  2.0215720e+00,  1.0738135e+00, -4.6015150e-01, -1.8586903e+00, -2.8456154e+00, -3.6086412e+00, -4.4331715e+00, -5.3391489e+00, -6.0331374e+00, -6.1683869e+00, -5.6567044e+00, -4.7818830e+00, -4.0549909e+00, -3.9338041e+00, -4.5840034e+00, -5.8060945e+00, -7.1585071e+00, -8.2117915e+00, -8.7901082e+00, -9.0411281e+00, -9.2733841e+00, -9.6762348e+00, -1.0151801e+01, -1.0412392e+01, -1.0266748e+01, -9.8371313e+00, -9.5008363e+00, -9.6012059e+00, -1.0187007e+01, -1.1005698e+01, -1.1731825e+01, -1.2204085e+01, -1.2473998e+01, -1.2681254e+01, -1.2925900e+01, -1.3250299e+01, -1.3671653e+01, -1.4146036e+01, -1.4476941e+01, -1.4332244e+01, -1.3476504e+01, -1.2070214e+01, -1.0712923e+01, -1.0066489e+01, -1.0300055e+01, -1.0852767e+01, -1.0802586e+01, -9.5928767e+00, -7.5011680e+00, -5.4206539e+00, -4.1289206e+00, -3.6834924e+00, -3.4657797e+00, -2.8020050e+00, -1.5819928e+00, -3.4017164e-01,  2.1629028e-01, -2.3311871e-01, -1.4453696e+00, -2.8767078e+00, -4.0589949e+00, -4.7643806e+00, -4.9391847e+00, -4.6221155e+00, -3.9834595e+00, -3.3739847e+00, -3.1893442e+00, -3.5637350e+00, -4.1708571e+00, -4.3993585e+00, -3.8397894e+00, -2.6883719e+00, -1.6931224e+00, -1.6503824e+00, -2.8481918e+00, -4.8833973e+00, -6.9435890e+00, -8.2798847e+00, -8.5275211e+00, -7.7553028e+00, -6.3597585e+00, -4.9360761e+00, -4.1171053e+00, -4.3160116e+00, -5.4471389e+00, -6.8640051e+00, -7.6889491e+00, -7.3939137e+00, -6.2096121e+00, -5.0036029e+00, -4.6765909e+00, -5.5313053e+00, -7.0971881e+00, -8.5151231e+00, -9.1408043e+00, -8.8986271e+00, -8.1835928e+00, -7.4897828e+00, -7.1042068e+00, -7.0577201e+00, -7.2660821e+00, -7.6695684e+00, -8.2530512e+00, -8.9738654e+00, -9.6964161e+00, -1.0203238e+01, -1.0288871e+01, -9.8966387e+00, -9.2246004e+00, -8.7050549e+00, -8.7997014e+00, -9.6831863e+00, -1.1034113e+01, -1.2152149e+01, -1.2396547e+01, -1.1644796e+01, -1.0385601e+01, -9.3280154e+00, -8.8320410e+00, -8.6522392e+00, -8.2233980e+00, -7.2201864e+00, -5.8598892e+00, -4.6592547e+00, -3.8872075e+00, -3.2611308e+00, -2.2066612e+00, -4.5181197e-01,  1.6095395e+00,  3.1421504e+00,  3.4906870e+00,  2.6487902e+00,  1.1926665e+00, -2.0042778e-01, -1.1860082e+00, -1.8004883e+00, -2.2031592e+00, -2.4578960e+00, -2.5708328e+00, -2.6620855e+00, -2.9927005e+00, -3.7566053e+00, -4.8540810e+00, -5.9305819e+00, -6.7003720e+00, -7.2545691e+00, -8.0270957e+00, -9.4081715e+00, -1.1344381e+01, -1.3296983e+01, -1.4610137e+01, -1.4976513e+01, -1.4618329e+01, -1.4070034e+01, -1.3783800e+01, -1.3880657e+01, -1.4189447e+01, -1.4461378e+01, -1.4550526e+01, -1.4449390e+01, -1.4220461e+01, -1.3924117e+01, -1.3596835e+01, -1.3268750e+01, -1.2989838e+01, -1.2844201e+01, -1.2934263e+01, -1.3318910e+01, -1.3926272e+01, -1.4518787e+01, -1.4789795e+01, -1.4570621e+01, -1.3995762e+01, -1.3456356e+01, -1.3329909e+01, -1.3685576e+01, -1.4219225e+01, -1.4489267e+01, -1.4257848e+01, -1.3647528e+01, -1.2998559e+01, -1.2586180e+01, -1.2461472e+01, -1.2521496e+01, -1.2674470e+01, -1.2899445e+01, -1.3162918e+01, -1.3345834e+01, -1.3324542e+01, -1.3144150e+01, -1.3064866e+01, -1.3358539e+01, -1.4007920e+01, -1.4617093e+01, -1.4678386e+01, -1.3994456e+01, -1.2875654e+01, -1.1923719e+01, -1.1598191e+01, -1.1956883e+01, -1.2770140e+01, -1.3831724e+01, -1.5118257e+01, -1.6653019e+01, -1.8277136e+01, -1.9639382e+01, -2.0464820e+01, -2.0827836e+01, -2.1112132e+01, -2.1654300e+01, -2.2411984e+01, -2.2997414e+01, -2.3054992e+01, -2.2608291e+01, -2.2029907e+01, -2.1673754e+01, -2.1552565e+01, -2.1385228e+01, -2.0943196e+01, -2.0313232e+01, -1.9795703e+01, -1.9561318e+01, -1.9457506e+01, -1.9194247e+01, -1.8716120e+01, -1.8341005e+01, -1.8475210e+01, -1.9172980e+01, -2.0008642e+01, -2.0437788e+01, -2.0319006e+01, -2.0069629e+01, -2.0263790e+01, -2.1034126e+01, -2.1858968e+01, -2.1969831e+01, -2.1024267e+01, -1.9426735e+01, -1.8001441e+01, -1.7319728e+01, -1.7292410e+01, -1.7373161e+01, -1.7146631e+01, -1.6735724e+01, -1.6657795e+01, -1.7283799e+01, -1.8413576e+01, -1.9359771e+01, -1.9467884e+01, -1.8620782e+01, -1.7305540e+01, -1.6204988e+01, -1.5668237e+01, -1.5491867e+01, -1.5169009e+01, -1.4381754e+01, -1.3327776e+01, -1.2613667e+01, -1.2791666e+01, -1.3898079e+01, -1.5360052e+01, -1.6363897e+01, -1.6422801e+01, -1.5714690e+01, -1.4923246e+01, -1.4697164e+01, -1.5149316e+01, -1.5793126e+01, -1.5962220e+01, -1.5362975e+01, -1.4302785e+01, -1.3416583e+01, -1.3142213e+01, -1.3398701e+01, -1.3724121e+01, -1.3713940e+01, -1.3344029e+01, -1.2893115e+01, -1.2568040e+01, -1.2217107e+01, -1.1430819e+01, -9.9572624e+00, -8.0474632e+00, -6.3846079e+00, -5.6108865e+00, -5.8278787e+00, -6.4895268e+00, -6.7899443e+00, -6.2415308e+00, -4.9855890e+00, -3.6030625e+00, -2.6046918e+00, -2.0346050e+00, -1.5110349e+00, -6.4878395e-01,  5.2049233e-01,  1.5136827e+00,  1.7970066e+00,  1.2850703e+00,  4.9683199e-01,  2.0802891e-01,  8.7328406e-01,  2.2983493e+00,  3.8311193e+00,  4.8889717e+00,  5.3552485e+00,  5.5221407e+00,  5.6952620e+00,  5.8868648e+00,  5.9051300e+00,  5.7146673e+00,  5.6394736e+00,  6.1313000e+00,  7.2984418e+00,  8.6942722e+00,  9.6510744e+00,  9.8878520e+00,  9.7853613e+00,  9.9970877e+00,  1.0730495e+01,  1.1426386e+01,  1.1236366e+01,  9.9094134e+00,  8.2193099e+00,  7.4250785e+00,  8.1740165e+00,  9.8538307e+00,  1.1049898e+01,  1.0744390e+01,  9.1705887e+00,  7.5328082e+00,  6.8685918e+00,  7.1453618e+00,  7.4453510e+00,  7.0187316e+00,  6.1251482e+00,  5.7941318e+00,  6.7206503e+00,  8.4027569e+00,  9.4294109e+00,  8.7134621e+00,  6.5233516e+00,  4.3268385e+00,  3.5745025e+00,  4.5395878e+00,  6.2438861e+00,  7.4458417e+00,  7.6900354e+00,  7.4517584e+00,  7.3702221e+00,  7.4594935e+00,  7.1341269e+00,  5.9843024e+00,  4.4322531e+00,  3.5190379e+00,  3.9752155e+00,  5.4873433e+00,  6.9089823e+00,  7.2434593e+00,  6.4706043e+00,  5.4487374e+00,  5.0253168e+00,  5.2358871e+00,  5.3419619e+00,  4.6155163e+00,  3.0696977e+00,  1.4377006e+00,  4.6670809e-01,  2.4148905e-01,  1.6937938e-01, -4.1700027e-01, -1.6528725e+00, -3.0756210e+00, -4.0755529e+00, -4.3730267e+00, -4.1030880e+00, -3.5458217e+00, -2.8691328e+00, -2.1383038e+00, -1.4830955e+00, -1.1346686e+00, -1.2378010e+00, -1.6569779e+00, -2.0443209e+00, -2.1508728e+00, -2.0641754e+00, -2.0988592e+00, -2.4316387e+00, -2.8667376e+00, -3.0043427e+00, -2.6597063e+00, -2.0921764e+00, -1.7775562e+00, -1.9343013e+00, -2.2963556e+00, -2.3960724e+00, -2.0929057e+00, -1.8004351e+00, -2.1399601e+00, -3.3277508e+00, -4.9013017e+00, -6.0868334e+00, -6.4867962e+00, -6.4370183e+00, -6.6838938e+00, -7.6780366e+00, -9.1449461e+00, -1.0324647e+01, -1.0638374e+01, -1.0155307e+01, -9.4519131e+00, -9.0433247e+00, -8.9450670e+00, -8.7522234e+00, -8.1064455e+00, -7.0755795e+00, -6.1039076e+00, -5.6255980e+00, -5.7256066e+00, -6.1273293e+00, -6.4451542e+00, -6.4271103e+00, -6.0075832e+00, -5.2322447e+00, -4.2209530e+00, -3.2102825e+00, -2.5500656e+00, -2.5426591e+00, -3.2074450e+00, -4.1978100e+00, -5.0017223e+00, -5.2926437e+00, -5.1364597e+00, -4.8813971e+00, -4.8486485e+00, -5.1099557e+00, -5.5212303e+00, -5.9136862e+00, -6.2108815e+00, -6.3692293e+00, -6.2691119e+00, -5.7465170e+00, -4.7770339e+00, -3.6092957e+00, -2.6515319e+00, -2.1628370e+00, -2.0341648e+00, -1.8979837e+00, -1.4974298e+00, -9.7606698e-01, -7.9940229e-01, -1.3574516e+00, -2.6013116e+00, -4.0420598e+00, -5.1131431e+00, -5.5811170e+00, -5.6712551e+00, -5.8436766e+00, -6.4408844e+00, -7.4812091e+00, -8.6978013e+00, -9.7256391e+00, -1.0290015e+01, -1.0326790e+01, -1.0028710e+01, -9.7982475e+00, -1.0072305e+01, -1.1059936e+01, -1.2556580e+01, -1.4011289e+01, -1.4849249e+01, -1.4821842e+01, -1.4104950e+01, -1.3077723e+01, -1.2002989e+01, -1.0909470e+01, -9.7567255e+00, -8.6663042e+00, -7.9374076e+00, -7.8051848e+00, -8.1918930e+00, -8.7292712e+00, -9.0544981e+00, -9.0909515e+00, -9.0333438e+00, -9.0644420e+00, -9.1135778e+00, -8.9207340e+00, -8.3392986e+00, -7.5489523e+00, -6.9412966e+00, -6.7893818e+00, -7.0422814e+00, -7.4475278e+00, -7.8490315e+00, -8.3265107e+00, -9.0345276e+00, -9.9484014e+00, -1.0832532e+01, -1.1481824e+01, -1.1945560e+01, -1.2430659e+01, -1.2946976e+01, -1.3105231e+01, -1.2385046e+01, -1.0694866e+01, -8.6584861e+00, -7.2446758e+00, -6.9924139e+00, -7.5452134e+00, -7.9797347e+00, -7.6630719e+00, -6.8311973e+00, -6.3193850e+00, -6.6977699e+00, -7.6652179e+00, -8.3158996e+00, -8.0293921e+00, -7.1023094e+00, -6.4811605e+00, -6.8445454e+00, -7.9334567e+00, -8.7868850e+00, -8.6450401e+00, -7.6291846e+00, -6.5446703e+00, -6.0345132e+00, -5.9471279e+00, -5.5449498e+00, -4.3258156e+00, -2.6211888e+00, -1.3705720e+00, -1.2915499e+00, -2.2440453e+00, -3.3725993e+00, -3.8529537e+00, -3.5308799e+00, -2.9143546e+00, -2.6283087e+00, -2.8966366e+00, -3.4783873e+00, -3.9833902e+00, -4.1772425e+00, -4.0275284e+00, -3.5935983e+00, -2.9909651e+00, -2.4573005e+00, -2.3170065e+00, -2.7182961e+00, -3.3429466e+00, -3.4620148e+00, -2.4511059e+00, -3.9084114e-01,  1.8213610e+00,  3.0544877e+00,  2.7921137e+00,  1.5254257e+00,  3.4119738e-01,  6.0868744e-02,  6.6847184e-01,  1.4728040e+00,  1.7804878e+00,  1.4476670e+00,  8.7627670e-01,  5.7332316e-01,  7.4251935e-01,  1.2360668e+00,  1.7853068e+00,  2.2019537e+00,  2.3849185e+00,  2.2488764e+00,  1.7615567e+00,  1.0757539e+00,  5.4524631e-01,  4.9438972e-01,  9.0604515e-01,  1.3589494e+00,  1.3505333e+00,  7.4790050e-01, -6.8833256e-02, -5.4686984e-01, -4.9002403e-01, -2.6918205e-01, -4.8429345e-01, -1.3661547e+00, -2.4672967e+00, -2.9432642e+00, -2.2040058e+00, -4.0337924e-01,  1.6045631e+00,  2.7663509e+00,  2.3927007e+00,  4.3821728e-01, -2.5656088e+00, -5.7691219e+00, -8.2988872e+00, -9.5361006e+00, -9.3512801e+00, -8.1890737e+00, -6.8724902e+00, -6.1467425e+00, -6.2162548e+00, -6.6082547e+00, -6.4963551e+00, -5.2770372e+00, -2.9988617e+00, -3.6130157e-01,  1.6836925e+00,  2.4436948e+00,  1.8111610e+00,  2.6838349e-01, -1.3802246e+00, -2.4065619e+00, -2.5187868e+00, -2.0104717e+00, -1.5789110e+00, -1.8570749e+00, -2.9281984e+00, -4.1875239e+00, -4.7243461e+00, -3.9997812e+00, -2.3094381e+00, -6.3300839e-01,  5.4763516e-02, -5.1338461e-01, -1.7351853e+00, -2.6335412e+00, -2.5905731e+00, -1.7327491e+00, -7.0378236e-01, -7.9242494e-02,  6.4173760e-02,  1.0232640e-01,  4.4651061e-01,  1.1427320e+00,  1.8030822e+00,  1.8823613e+00,  1.0626905e+00, -5.1659995e-01, -2.2969613e+00, -3.5549806e+00, -3.7390421e+00, -2.7410067e+00, -9.7435989e-01,  8.0664415e-01,  1.8821383e+00,  1.9291825e+00,  1.1379651e+00,  6.8583965e-03, -1.0144927e+00, -1.7497158e+00, -2.2392671e+00, -2.5255626e+00, -2.5453421e+00, -2.2587350e+00, -1.8602395e+00, -1.7841955e+00, -2.4002200e+00, -3.6324977e+00, -4.8845574e+00, -5.4218485e+00, -4.9416286e+00, -3.8435568e+00, -2.9370887e+00, -2.8059260e+00, -3.3584993e+00, -3.9386036e+00, -3.8877427e+00, -3.0749085e+00, -1.9676776e+00, -1.2340508e+00, -1.2470101e+00, -1.8855105e+00, -2.7145655e+00, -3.3061158e+00, -3.4179042e+00, -2.9657804e+00, -1.9436750e+00, -4.4343800e-01,  1.2579659e+00,  2.7113463e+00,  3.4969373e+00,  3.4917242e+00,  2.9689099e+00,  2.4204153e+00,  2.2394168e+00,  2.5226664e+00,  3.1288211e+00,  3.8857517e+00,  4.7214791e+00,  5.6105472e+00,  6.4454577e+00,  7.0254812e+00,  7.2146485e+00,  7.1101374e+00,  7.0154199e+00,  7.1952844e+00,  7.6228483e+00,  7.9667974e+00,  7.8545212e+00,  7.1841915e+00,  6.2071286e+00,  5.3177381e+00,  4.7613992e+00,  4.5311486e+00,  4.5149381e+00,  4.6927154e+00,  5.1383344e+00,  5.8047391e+00,  6.3330510e+00,  6.1478516e+00,  4.8386174e+00,  2.5279557e+00, -1.0943083e-01, -2.2327776e+00, -3.3361784e+00, -3.4815675e+00, -3.1217374e+00, -2.7155243e+00, -2.4712715e+00, -2.3803664e+00, -2.4154647e+00, -2.6485286e+00, -3.1811723e+00, -4.0025010e+00, -4.9593919e+00, -5.8826917e+00, -6.7285801e+00, -7.5726388e+00, -8.4577356e+00, -9.2666114e+00, -9.7792075e+00, -9.8873849e+00, -9.7664771e+00, -9.8230591e+00, -1.0435957e+01, -1.1692608e+01, -1.3324387e+01, -1.4874483e+01, -1.5957426e+01, -1.6436297e+01, -1.6444481e+01, -1.6290509e+01, -1.6315328e+01, -1.6744291e+01, -1.7568617e+01, -1.8518534e+01, -1.9184756e+01, -1.9254368e+01, -1.8711173e+01, -1.7839176e+01, -1.7013172e+01, -1.6447838e+01, -1.6119837e+01, -1.5914009e+01, -1.5824341e+01, -1.5987536e+01, -1.6506843e+01, -1.7257495e+01, -1.7903946e+01, -1.8147729e+01, -1.7974884e+01, -1.7652342e+01, -1.7471227e+01, -1.7501763e+01, -1.7620862e+01, -1.7783026e+01, -1.8221663e+01, -1.9303596e+01, -2.1110697e+01, -2.3146429e+01, -2.4514088e+01, -2.4497780e+01, -2.3081070e+01, -2.0953827e+01, -1.8992753e+01, -1.7656911e+01, -1.6792258e+01, -1.5948939e+01, -1.4861158e+01, -1.3645014e+01, -1.2594436e+01, -1.1854464e+01, -1.1331507e+01, -1.0908494e+01, -1.0689503e+01, -1.0960646e+01, -1.1855623e+01, -1.3044014e+01, -1.3782353e+01, -1.3354414e+01, -1.1574158e+01, -8.9560522e+00, -6.4219812e+00, -4.7657043e+00, -4.2442889e+00, -4.5312406e+00, -5.0033617e+00, -5.1499301e+00, -4.8710541e+00, -4.5204626e+00, -4.6717570e+00, -5.7178673e+00, -7.5278253e+00, -9.4073369e+00, -1.0459310e+01, -1.0157685e+01, -8.7351552e+00, -7.0597547e+00, -6.0416253e+00, -5.9965466e+00, -6.4569526e+00, -6.5753288e+00, -5.7862596e+00, -4.1956365e+00, -2.4209788e+00, -1.0806726e+00, -3.9602840e-01, -2.0784611e-01, -3.0088521e-01, -6.7044779e-01, -1.4791642e+00, -2.7913278e+00, -4.3870949e+00, -5.8528732e+00, -6.8538621e+00, -7.3268025e+00, -7.4405658e+00, -7.4172460e+00, -7.4179909e+00, -7.5723452e+00, -8.0308617e+00, -8.8882582e+00, -1.0003911e+01, -1.0932447e+01, -1.1135908e+01, -1.0383530e+01, -9.0147124e+00, -7.8008774e+00, -7.4703133e+00, -8.2582435e+00, -9.8249816e+00, -1.1561501e+01, -1.2980995e+01, -1.3876331e+01, -1.4202408e+01, -1.3921386e+01, -1.3041994e+01, -1.1811871e+01, -1.0788188e+01, -1.0587968e+01, -1.1452606e+01, -1.3011991e+01, -1.4516930e+01, -1.5396606e+01, -1.5674584e+01, -1.5871240e+01, -1.6473324e+01, -1.7450956e+01, -1.8267989e+01, -1.8382024e+01, -1.7776846e+01, -1.7034469e+01, -1.6870809e+01, -1.7543137e+01, -1.8645977e+01, -1.9456574e+01, -1.9509329e+01, -1.8908000e+01, -1.8155178e+01, -1.7711981e+01, -1.7694383e+01, -1.7920925e+01, -1.8174705e+01, -1.8379228e+01, -1.8541542e+01, -1.8592514e+01, -1.8356593e+01, -1.7719180e+01, -1.6818810e+01, -1.6035787e+01, -1.5739065e+01, -1.5993539e+01, -1.6478352e+01, -1.6681318e+01, -1.6204303e+01, -1.4956072e+01, -1.3148855e+01, -1.1183172e+01, -9.5337504e+00, -8.6488233e+00, -8.8046275e+00, -9.9255920e+00, -1.1510383e+01, -1.2812599e+01, -1.3242121e+01, -1.2728303e+01, -1.1754634e+01, -1.1009417e+01, -1.0909648e+01, -1.1361449e+01, -1.1916634e+01, -1.2155300e+01, -1.1964891e+01, -1.1522948e+01, -1.1069449e+01, -1.0707853e+01, -1.0385182e+01, -9.9997994e+00, -9.4873366e+00, -8.8154798e+00, -7.9519269e+00, -6.8913987e+00, -5.7220058e+00, -4.6226560e+00, -3.7391116e+00, -3.0393464e+00, -2.3192239e+00, -1.4076552e+00, -4.0634496e-01,  2.8354798e-01,  2.3261765e-01, -6.4149349e-01, -1.9199422e+00, -2.9182838e+00, -3.1599300e+00, -2.7294171e+00, -2.2325633e+00, -2.3896444e+00, -3.5527969e+00, -5.4739384e+00, -7.4579574e+00, -8.7807728e+00, -9.1032523e+00, -8.6357874e+00, -7.9646680e+00, -7.6508639e+00, -7.8551172e+00, -8.2429607e+00, -8.2497298e+00, -7.5249957e+00, -6.2165012e+00, -4.8522849e+00, -3.8978818e+00, -3.3526537e+00, -2.7399243e+00, -1.5164876e+00,  4.4472375e-01,  2.7178447e+00,  4.6468115e+00,  5.8345169e+00,  6.3753929e+00,  6.6686946e+00,  7.0370634e+00,  7.5141316e+00,  7.9445707e+00,  8.2141285e+00,  8.3381775e+00,  8.3533015e+00,  8.2097732e+00,  7.8542049e+00,  7.4293427e+00,  7.3151692e+00,  7.8595286e+00,  9.0001462e+00,  1.0177929e+01,  1.0722806e+01,  1.0431358e+01,  9.8129797e+00,  9.7371409e+00,  1.0752637e+01,  1.2654939e+01,  1.4650796e+01,  1.5933859e+01,  1.6160353e+01,  1.5486814e+01,  1.4281001e+01,  1.2868321e+01,  1.1510900e+01,  1.0481172e+01,  9.9953830e+00,  1.0014239e+01,  1.0179154e+01,  1.0074118e+01,  9.6262920e+00,  9.2140051e+00,  9.2802436e+00,  9.7781785e+00,  1.0041404e+01,  9.3220425e+00,  7.5606059e+00,  5.6331015e+00,  4.7503899e+00,  5.4961034e+00,  7.3813247e+00,  9.3370263e+00,  1.0673024e+01,  1.1582951e+01,  1.2730743e+01,  1.4374229e+01,  1.5945419e+01,  1.6541804e+01,  1.5850964e+01,  1.4571670e+01,  1.3876290e+01,  1.4402492e+01,  1.5724952e+01,  1.6785838e+01,  1.6839039e+01,  1.6006380e+01,  1.4981029e+01,  1.4268771e+01,  1.3765137e+01,  1.3051312e+01,  1.2024376e+01,  1.1155322e+01,  1.1092763e+01,  1.2026571e+01,  1.3467348e+01,  1.4660269e+01,  1.5214806e+01,  1.5349106e+01,  1.5571200e+01,  1.6176517e+01,  1.7062476e+01,  1.7969293e+01,  1.8807166e+01,  1.9695330e+01,  2.0710309e+01,  2.1678245e+01,  2.2279674e+01,  2.2362626e+01,  2.2114086e+01,  2.1895533e+01,  2.1923004e+01,  2.2140595e+01,  2.2409820e+01,  2.2772484e+01,  2.3455419e+01,  2.4579497e+01,  2.5890219e+01,  2.6841751e+01,  2.7005262e+01,  2.6415754e+01,  2.5509510e+01,  2.4713210e+01,  2.4101949e+01,  2.3468112e+01,  2.2706392e+01,  2.2076380e+01,  2.2020112e+01,  2.2681358e+01,  2.3617639e+01,  2.4049710e+01,  2.3479773e+01,  2.2125683e+01,  2.0748053e+01,  1.9986923e+01,  1.9781307e+01,  1.9397446e+01,  1.8075131e+01,  1.5764227e+01,  1.3324714e+01,  1.1984091e+01,  1.2440667e+01,  1.4296118e+01,  1.6267534e+01,  1.7047087e+01,  1.6185426e+01,  1.4346189e+01,  1.2746539e+01,  1.2219737e+01,  1.2630853e+01,  1.3095027e+01,  1.2791881e+01,  1.1672170e+01,  1.0449725e+01,  9.9059185e+00,  1.0157829e+01,  1.0579051e+01,  1.0449973e+01,  9.7062391e+00,  9.0331380e+00,  9.1728382e+00,  1.0100894e+01,  1.0910216e+01,  1.0591335e+01,  9.0112481e+00,  7.1395687e+00,  6.2415522e+00,  6.7423697e+00,  7.8149103e+00,  8.0922304e+00,  6.8591578e+00,  4.6356964e+00,  2.6500914e+00,  1.7402050e+00,  1.7152006e+00,  1.7060865e+00,  1.0647413e+00, -1.0169240e-01, -1.2218117e+00, -1.9677197e+00, -2.5828485e+00, -3.4942283e+00, -4.6683131e+00, -5.4563389e+00, -5.1606103e+00, -3.7804171e+00, -2.1698684e+00, -1.3963115e+00, -1.8662567e+00, -3.0124278e+00, -3.8036819e+00, -3.5891858e+00, -2.5372613e+00, -1.3653303e+00, -7.0364138e-01, -6.7703581e-01, -9.7702099e-01, -1.2226065e+00, -1.2387190e+00, -1.0879677e+00, -9.6247865e-01, -1.0861625e+00, -1.6351796e+00, -2.6132395e+00, -3.7339963e+00, -4.4869086e+00, -4.4615428e+00, -3.7191336e+00, -2.8489941e+00, -2.5696475e+00, -3.1697625e+00, -4.2901572e+00, -5.2679101e+00, -5.7360759e+00, -5.9218819e+00, -6.3804464e+00, -7.4532923e+00, -8.9920125e+00, -1.0586947e+01, -1.2011935e+01, -1.3395180e+01, -1.4952547e+01, -1.6608668e+01, -1.7951305e+01, -1.8591535e+01, -1.8549725e+01, -1.8252108e+01, -1.8141790e+01, -1.8318869e+01, -1.8575491e+01, -1.8741801e+01, -1.8914335e+01, -1.9290602e+01, -1.9814509e+01, -2.0094930e+01, -1.9773584e+01, -1.8980543e+01, -1.8336045e+01, -1.8390466e+01, -1.9019854e+01, -1.9430191e+01, -1.8860631e+01, -1.7348936e+01, -1.5789651e+01, -1.5165889e+01, -1.5652073e+01, -1.6445816e+01, -1.6504370e+01, -1.5493232e+01, -1.4056082e+01, -1.3178601e+01, -1.3282231e+01, -1.3902060e+01, -1.4191672e+01, -1.3696592e+01, -1.2641544e+01, -1.1534799e+01, -1.0592766e+01, -9.6137302e+00, -8.3936225e+00, -7.1758379e+00, -6.5942829e+00, -7.1180396e+00, -8.5450301e+00, -1.0060282e+01, -1.0819959e+01, -1.0525247e+01, -9.5021048e+00, -8.3105425e+00, -7.3263032e+00, -6.6627749e+00, -6.3716602e+00, -6.5725897e+00, -7.3132731e+00, -8.3458747e+00, -9.1616642e+00, -9.3603606e+00, -9.0306639e+00, -8.7375755e+00, -9.0702293e+00, -1.0146647e+01, -1.1538230e+01, -1.2684562e+01, -1.3404490e+01, -1.4031644e+01, -1.5077970e+01, -1.6774377e+01, -1.8918491e+01, -2.1123039e+01, -2.3164691e+01, -2.5073742e+01, -2.6911458e+01, -2.8518953e+01, -2.9544271e+01, -2.9753335e+01, -2.9321582e+01, -2.8797744e+01, -2.8731789e+01, -2.9272798e+01, -3.0076325e+01, -3.0593087e+01, -3.0492032e+01, -2.9877717e+01, -2.9155113e+01, -2.8689180e+01, -2.8552519e+01, -2.8549538e+01, -2.8459967e+01, -2.8270478e+01, -2.8196953e+01, -2.8498448e+01, -2.9267595e+01, -3.0387694e+01, -3.1670565e+01, -3.3000472e+01, -3.4303518e+01, -3.5366550e+01, -3.5747276e+01, -3.4994489e+01, -3.3092496e+01, -3.0727115e+01, -2.9002054e+01, -2.8687239e+01, -2.9584905e+01, -3.0634093e+01, -3.0790166e+01, -2.9975719e+01, -2.9218821e+01, -2.9750300e+01, -3.1802832e+01, -3.4227528e+01, -3.5378915e+01, -3.4550941e+01, -3.2661712e+01, -3.1500174e+01, -3.2159240e+01, -3.4068830e+01, -3.5524391e+01, -3.5225334e+01, -3.3391802e+01, -3.1435562e+01, -3.0547798e+01, -3.0598566e+01, -3.0413182e+01, -2.9118143e+01, -2.7181751e+01, -2.6070995e+01, -2.6823163e+01, -2.8930973e+01, -3.0668816e+01, -3.0598370e+01, -2.8841271e+01, -2.6918715e+01, -2.6321725e+01, -2.7163776e+01, -2.8146881e+01, -2.7800178e+01, -2.5782049e+01, -2.3071288e+01, -2.0998653e+01, -2.0139283e+01, -2.0088419e+01, -2.0175277e+01, -2.0262271e+01, -2.0809001e+01, -2.2226302e+01, -2.4279988e+01, -2.6193747e+01, -2.7329512e+01, -2.7733677e+01, -2.8019111e+01, -2.8758430e+01, -3.0026392e+01, -3.1495971e+01, -3.2873171e+01, -3.4138849e+01, -3.5361453e+01, -3.6376086e+01, -3.6779598e+01, -3.6304844e+01, -3.5163298e+01, -3.3935100e+01, -3.3067921e+01, -3.2490825e+01, -3.1753151e+01, -3.0546669e+01, -2.9054032e+01, -2.7746226e+01, -2.6845444e+01, -2.6042018e+01, -2.4795933e+01, -2.2929332e+01, -2.0889649e+01, -1.9389050e+01, -1.8768854e+01, -1.8722669e+01, -1.8640513e+01, -1.8201598e+01, -1.7611850e+01, -1.7284984e+01, -1.7360558e+01, -1.7600865e+01, -1.7761991e+01, -1.7987987e+01, -1.8733498e+01, -2.0236984e+01, -2.2089395e+01, -2.3397704e+01, -2.3454400e+01, -2.2300171e+01, -2.0657870e+01, -1.9331735e+01, -1.8670070e+01, -1.8569315e+01, -1.8900013e+01, -1.9804077e+01, -2.1499737e+01, -2.3818669e+01, -2.6041201e+01, -2.7308381e+01, -2.7270505e+01, -2.6341935e+01, -2.5294957e+01, -2.4576814e+01, -2.4002114e+01, -2.3081906e+01, -2.1609968e+01, -1.9897521e+01, -1.8451501e+01, -1.7486498e+01, -1.6815115e+01, -1.6222424e+01, -1.5878127e+01, -1.6275089e+01, -1.7686981e+01, -1.9684628e+01, -2.1256093e+01, -2.1508724e+01, -2.0352004e+01, -1.8548084e+01, -1.7087830e+01, -1.6450238e+01, -1.6369310e+01, -1.6237810e+01, -1.5719484e+01, -1.5026776e+01, -1.4689678e+01, -1.5091097e+01, -1.6171961e+01, -1.7482938e+01, -1.8465949e+01, -1.8745600e+01, -1.8292610e+01, -1.7419245e+01, -1.6599722e+01, -1.6155952e+01, -1.5974977e+01, -1.5513362e+01, -1.4204108e+01, -1.2025162e+01, -9.7293638e+00, -8.4115388e+00, -8.6550701e+00, -9.9664056e+00, -1.1067033e+01, -1.0893407e+01, -9.4783380e+00, -7.9187406e+00, -7.4149295e+00, -8.2089001e+00, -9.3619000e+00, -9.5657856e+00, -8.2599367e+00, -6.0779918e+00, -4.2851507e+00, -3.7654840e+00, -4.4453816e+00, -5.5488140e+00, -6.3096380e+00, -6.4579871e+00, -6.1642961e+00, -5.6978692e+00, -5.2339346e+00, -4.9188296e+00, -4.9274860e+00, -5.2817561e+00, -5.5876576e+00, -5.0953957e+00, -3.2287389e+00, -1.9212844e-01,  2.9579905e+00,  4.9771001e+00,  5.3321341e+00,  4.5549416e+00,  3.7315109e+00,  3.5994895e+00,  4.0742714e+00,  4.5831619e+00,  4.7970247e+00,  4.9947873e+00,  5.7152735e+00,  7.0962231e+00,  8.6083518e+00,  9.4661075e+00,  9.2977675e+00,  8.4112771e+00,  7.4334075e+00,  6.7432469e+00,  6.2879028e+00,  5.9041000e+00,  5.6966087e+00,  5.9745007e+00,  6.7772355e+00,  7.5502352e+00,  7.4499406e+00,  6.1071750e+00,  4.1229660e+00,  2.7281529e+00,  2.8116487e+00,  4.1661220e+00,  5.6553599e+00,  6.1767389e+00,  5.5590956e+00,  4.6039304e+00,  4.2796973e+00,  4.8470027e+00,  5.7084883e+00,  6.0588482e+00,  5.6679400e+00,  5.0590550e+00,  4.9667778e+00,  5.6417091e+00,  6.6674424e+00,  7.4219692e+00,  7.7014648e+00,  7.9093457e+00,  8.6603321e+00,  1.0193341e+01,  1.2122511e+01,  1.3708125e+01,  1.4371190e+01,  1.4024922e+01,  1.3028666e+01,  1.1905979e+01,  1.1094999e+01,  1.0863081e+01,  1.1321301e+01,  1.2425131e+01,  1.3951170e+01,  1.5535559e+01,  1.6822124e+01,  1.7641500e+01,  1.8076715e+01,  1.8349981e+01,  1.8619041e+01,  1.8851565e+01,  1.8877897e+01,  1.8570257e+01,  1.7994298e+01,  1.7406634e+01,  1.7096905e+01,  1.7192286e+01,  1.7569431e+01,  1.7939918e+01,  1.8048214e+01,  1.7835085e+01,  1.7440469e+01,  1.7043817e+01,  1.6679714e+01,  1.6202350e+01,  1.5451866e+01,  1.4482487e+01,  1.3621325e+01,  1.3249717e+01,  1.3456251e+01,  1.3870410e+01,  1.3870167e+01,  1.3034174e+01,  1.1465085e+01,  9.6930092e+00,  8.2325719e+00,  7.1872832e+00,  6.2587246e+00,  5.1392891e+00,  3.8971901e+00,  2.9636878e+00,  2.7189212e+00,  3.0770748e+00,  3.4928877e+00,  3.4134458e+00,  2.7611290e+00,  1.9878020e+00,  1.6436224e+00,  1.8704807e+00,  2.3037806e+00,  2.4703247e+00,  2.2883947e+00,  2.1786437e+00,  2.6746270e+00,  3.9053801e+00,  5.4384871e+00,  6.6170793e+00,  7.0572044e+00,  6.8500805e+00,  6.3372527e+00,  5.7504078e+00,  5.1010862e+00,  4.3915106e+00,  3.8430486e+00,  3.8090117e+00,  4.3934708e+00,  5.1650785e+00,  5.3316924e+00,  4.3166081e+00,  2.2590544e+00, -2.3229361e-02, -1.6103423e+00, -2.1159666e+00, -1.8572951e+00, -1.4626203e+00, -1.3126487e+00, -1.3110293e+00, -1.1217371e+00, -5.6864467e-01,  2.0778163e-01,  9.3860428e-01,  1.4959005e+00,  1.9306566e+00,  2.2608911e+00,  2.2950260e+00,  1.7500886e+00,  5.9050841e-01, -7.7015016e-01, -1.6747016e+00, -1.7088994e+00, -1.0333755e+00, -2.3295673e-01,  2.0060882e-01,  2.8232320e-01,  4.6227939e-01,  1.1424472e+00,  2.2419621e+00,  3.2174927e+00,  3.5093479e+00,  2.9901891e+00,  2.0140274e+00,  1.0596904e+00,  3.3738414e-01, -2.7644471e-01, -9.6253287e-01, -1.6620882e+00, -2.0749297e+00, -1.9503800e+00, -1.3740842e+00, -7.6770970e-01, -6.0237086e-01, -1.0829983e+00, -2.0508164e+00, -3.1240922e+00, -3.9066268e+00, -4.1120481e+00, -3.6044665e+00, -2.4363154e+00, -8.8721486e-01,  5.9674544e-01,  1.6204980e+00,  2.0903754e+00,  2.2650056e+00,  2.5110317e+00,  2.9571460e+00,  3.3822194e+00,  3.4771356e+00,  3.2412465e+00,  3.0969255e+00,  3.5499971e+00,  4.6847932e+00,  5.9981847e+00,  6.7914337e+00,  6.7942459e+00,  6.4268939e+00,  6.4129880e+00,  7.0747995e+00,  7.9778150e+00,  8.2917418e+00,  7.5627148e+00,  6.1853947e+00,  5.1239182e+00,  5.1206506e+00,  6.1001896e+00,  7.2857313e+00,  7.8898326e+00,  7.7466484e+00,  7.3622706e+00,  7.4241509e+00,  8.2666993e+00,  9.7320687e+00,  1.1421564e+01,  1.2989228e+01,  1.4206488e+01,  1.4871315e+01,  1.4823199e+01,  1.4143475e+01,  1.3299282e+01,  1.2938483e+01,  1.3380677e+01,  1.4241197e+01,  1.4619230e+01,  1.3803872e+01,  1.1930638e+01,  9.9840440e+00,  9.0813145e+00,  9.6166360e+00,  1.0992637e+01,  1.2161097e+01,  1.2490018e+01,  1.2207199e+01,  1.2071119e+01,  1.2607149e+01,  1.3599356e+01,  1.4257716e+01,  1.3871051e+01,  1.2364716e+01,  1.0321715e+01,  8.5148750e+00,  7.3780237e+00,  6.8169330e+00,  6.4203943e+00,  5.8182347e+00,  4.8938197e+00,  3.7555712e+00,  2.5794611e+00,  1.4813865e+00,  4.8392346e-01, -4.5734666e-01, -1.4164468e+00, -2.4546717e+00, -3.5624109e+00, -4.6081446e+00, -5.3491362e+00, -5.5294688e+00, -5.0153689e+00, -3.8707046e+00, -2.3132159e+00, -5.8832000e-01,  1.1342070e+00,  2.7592035e+00,  4.1768476e+00,  5.1869999e+00,  5.5354155e+00,  5.0640128e+00,  3.8650808e+00,  2.2975904e+00,  8.1266807e-01, -3.1155190e-01, -1.1287540e+00, -1.9345729e+00, -2.9733236e+00, -4.1680071e+00, -5.1134960e+00, -5.3761245e+00, -4.8774914e+00, -4.0344660e+00, -3.4997087e+00, -3.6783687e+00, -4.4070850e+00, -5.0705244e+00, -5.0723001e+00, -4.2761079e+00, -3.0600785e+00, -1.9661605e+00, -1.2749679e+00, -8.7892578e-01, -5.2783553e-01, -1.6528259e-01 };
int whiteNoiseIt = 0; //The queue iterator for whitenoise
bool isWhiteNoise = 0;

enum { CUBE_POS_X, CUBE_NEG_X, CUBE_POS_Y, CUBE_NEG_Y, CUBE_POS_Z, CUBE_NEG_Z };
//static unsigned char CubeMap[6][CUBE_MAP_SIZE][CUBE_MAP_SIZE][4];
static unsigned char CubeMap[6][144][256][4];

// for NIDAQ data handling
int32       error = 0;
TaskHandle  taskHandle = 0;
int32       read;
float64     data[1400700];
float64		currentData[1400700];
/*
float64*		currai0 = new float64[20010000];
float64*		currai1 = new float64[20010000];
float64*		currai2 = new float64[20010000];
float64*		currai3 = new float64[20010000];
float64*		currai4 = new float64[20010000];
float64*		currai5 = new float64[20010000];
int64*		currai6 = new int64[20010000];
float64*		currxp = new float64[20010000];
float64*		currxpcl = new float64[20010000];	// closed loop
//*/

///*
const int maxElements = 24000100;
int countdown = maxElements;
float		currai0[maxElements];
float		currai1[maxElements];
float		currai2[maxElements];
float		currai3[maxElements];
float		currai4[maxElements];
float		currai5[maxElements];
float		currai6[maxElements]; //trigger that we're going to normalize to 1 or 0 and multiply by the gain
float		currxp[maxElements];
float		currxpcl[maxElements];	// closed loop
//float		currgain[24000100]; // current gain value
								//*/

								/*
								std::vector<float64> currai0;
								std::vector<float64> currai1;
								std::vector<float64> currai2;
								std::vector<float64> currai3;
								std::vector<float64> currai4;
								std::vector<float64> currai5;
								std::vector<int64> currai6;
								std::vector<float64> currai7;
								std::vector<float64> currxp;
								std::vector<float64> currxpcl;
								//*/
int32		queueit = 0;
float64		bias0, bias1, bias2, bias3, bias4, bias5;

char        errBuff[2048] = { '\0' };


typedef struct
{

	int X;

	int Y;

	int Z;



	double U;

	double V;
}VERTICES;

//const double PI = 3.1415926535897;

//const int space = 10;
const int space = 10;


//const int VertexCount = (90 / space) * (360 / space) * 4;
const int VertexCount = (360 / space) * (360 / space) * 4;


VERTICES VERTEX[VertexCount];

GLfloat vertices[3 * VertexCount];
GLfloat norm[3 * VertexCount];
GLfloat col[3 * VertexCount];
GLfloat arr[9 * VertexCount];
const int VertexCount2 = 2 * (360 / longitudinalSpacing / 1) * ((360 / longitudinalSpacing) + 1) * 9;
const int maxVertexCount2 = 2 * (360 / 2 / 1) * ((360 / 2) + 1) * 9;
GLfloat arr2[maxVertexCount2]; // (360/5) * (360/5) * 2 * 9???

static unsigned int fps_start = 0;
//int fps_start = 0;
static unsigned int fps_frames = 0;

static unsigned int t_0 = 0.0;

static unsigned int freq_start = 0;
bool freq_measured = 0;
//bool isNeg = 0; // True if OLangle is negative.

PFNWGLSWAPINTERVALEXTPROC       wglSwapIntervalEXT = NULL;
PFNWGLGETSWAPINTERVALEXTPROC    wglGetSwapIntervalEXT = NULL;

GLuint LoadTextureRAW(const char * filename);

bool WGLExtensionSupported(const char *extension_name)
{
	// this is pointer to function which returns pointer to string with list of all wgl extensions
	PFNWGLGETEXTENSIONSSTRINGEXTPROC _wglGetExtensionsStringEXT = NULL;

	// determine pointer to wglGetExtensionsStringEXT function
	_wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)wglGetProcAddress("wglGetExtensionsStringEXT");

	if (_wglGetExtensionsStringEXT == 0 ||
		(_wglGetExtensionsStringEXT == (void*)0x1) || (_wglGetExtensionsStringEXT == (void*)0x2) || (_wglGetExtensionsStringEXT == (void*)0x3) ||
		(_wglGetExtensionsStringEXT == (void*)-1))
	{
		int a = 23;
		HMODULE module = LoadLibraryA("opengl32.dll");
		_wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)GetProcAddress(module, "wglGetExtensionsStringEXT");
	}

	if (strstr(_wglGetExtensionsStringEXT(), extension_name) == NULL)
	{
		// string was not found
		printf("\nExtension not supported");
		return false;
	}

	// extension is supported
	printf("\nExtension supported");
	return true;
}


/*
* Tests to see if the file exists.
**/
inline bool exists_test3(const std::string& name) {
	struct stat buffer;
	return (stat(name.c_str(), &buffer) == 0);
}

/*
* Allows for the user to printout data obtain from NIDAQ channels.
* Currently will start outputting to file after trigger has been pressed.
**/
void writeToFile() {
	FILE * fileP = NULL;

	time_t rawtime;
	struct tm *info;
	char buffer[80];

	time(&rawtime);
	info = localtime(&rawtime);
	strftime(buffer, 80, "%m%d%Y", info);

	char filename[80];
	sprintf(filename, "./Data/Moth_FT_%s_%03d.txt", buffer, increment);
	bool exists = exists_test3(filename);

	///*
	while (exists) {
		increment++;
		sprintf(filename, "./Data/Moth_FT_%s_%03d.txt", buffer, increment);
		//printf("\n%s", filename);
		exists = exists_test3(filename);
	}
	//*/

	std::ofstream outfile;
	outfile.open(filename, std::ios_base::app);
	//fileP = fopen(filename, "w");
	printf("\n%s", filename);

	//if (fileP != NULL) {
	if (1) {
		int j;
		if (continuousRecording || queueit < 200100) {
			j = queueit;
		}
		else {
			j = 200100;
			//j = read;
		}
		for (int i = 0; i < j; i++) {
			//int j;
			/*
			if (continuousRecording || currai0.size() < 200100) {
			j = currai0.size();
			}
			else {
			j = 200100;
			}
			//*/
			//for (int i = currai0.size() - j; i < currai0.size(); i++) {
			int helperQueue = queueit + i - j;
			///*
			if (helperQueue >= maxElements) {
				helperQueue -= maxElements;
			}
			//*/
			//fprintf(fileP, "%f, %f, %f, %f, %f, %f, %f, %f, %lld\n", currxp[helperQueue], currxpcl[helperQueue], currai0[helperQueue], currai1[helperQueue], currai2[helperQueue], currai3[helperQueue], currai4[helperQueue], currai5[helperQueue], currai6[helperQueue]);
			//outfile << currxp[helperQueue] << ", " << currxpcl[helperQueue] << ", " << currai0[helperQueue] << ", " << currai1[helperQueue] << ", " << currai2[helperQueue] << ", " << currai3[helperQueue] << ", " << currai4[helperQueue] << ", " << currai5[helperQueue] << ", " << currgain[helperQueue] << ", " << currai6[helperQueue] << "\n";
			outfile << currxp[helperQueue] << ", " << currxpcl[helperQueue] << ", " << currai0[helperQueue] << ", " << currai1[helperQueue] << ", " << currai2[helperQueue] << ", " << currai3[helperQueue] << ", " << currai4[helperQueue] << ", " << currai5[helperQueue] << ", " << currai6[helperQueue] << "\n";
			//outfile << currxp.at(i) << ", " << currxpcl.at(i) << ", " << currai0.at(i) << ", " << currai1.at(i) << ", " << currai2.at(i) << ", " << currai3.at(i) << ", " << currai4.at(i) << ", " << currai5.at(i) << ", " << currai6.at(i) << "\n";
		}
		//fclose(fileP);
		increment++;
		char gs[80];
		char oc[80];
		char dh[80]; //Degrees/s vs Hz
		float dhv;
		char rpy[80]; //Roll, pitch, or yaw
		if (spinning) {
			sprintf(rpy, "Roll");
		}
		else if (horizontal) {
			sprintf(rpy, "Pitch");
		}
		else {
			sprintf(rpy, "Yaw");
		}
		if (isSingle) {
			sprintf(gs, "Single Bar");
		}
		else {
			sprintf(gs, "Grating");
		}
		if (closedLoop) {
			sprintf(oc, "Closed");
		}
		else {
			sprintf(oc, "Open");
		}
		if (drifting) {
			sprintf(dh, "degrees per second");
			dhv = driftVel * 1000.0;
			//dhv = driftVel * 60.0;
		}
		else {
			sprintf(dh, "Hz");
			dhv = 1000.0 / delay;
			//dhv = 60.0 / delay;
		}
		//printf("\nFreq = %f Hz, %s, %s, %f deg", 120.0 / delay, gs, oc, viewingAngle);
		//printf("\nFreq = %f Hz, %s, %s, %f deg", 1000.0 / delay, gs, oc, viewingAngle);
		printf("\n%s stimulus, Freq = %f %s, %s, %s, %f deg, Gain = %f", rpy, dhv, dh, gs, oc, viewingAngle, gain);
	}
	else {
		printf("\nOur file cannot be written to");
	}

}

/*
*  Calculates the force along the x-axis, averaged over the most recent samples. The units are in Newtons for forces, and Newtons * mm for moments.
**/
float64 calcFeedback() {
	float64 avgai0 = 0;
	for (int i = 0; i < read; i++) {
		int32 j = queueit - read + i;
		if (spinning) { //If spinning, read from Ty
			if (j < 0) {
				avgai0 += currai4[j + maxElements];
			}
			else {
				avgai0 += currai4[j];
			}
		}
		else if (horizontal) { //If horizontal, read from Tx
			if (j < 0) {
				avgai0 += currai3[j + maxElements];
			}
			else {
				avgai0 += currai3[j];
			}
		}
		else if (vertical2) { //The second moment is Ty
			if (j < 0) {
				avgai0 += currai4[j + maxElements];
			}
			else {
				avgai0 += currai4[j];
			}
			vertical2 = 0;
		}
		else if (spinning2) { //The second moment is Tz
			if (j < 0) {
				avgai0 += currai5[j + maxElements];
			}
			else {
				avgai0 += currai5[j];
			}
			spinning2 = 0;
		}
		else { //If vertical, read from Tz
			if (j < 0) {
				avgai0 += -currai5[j + maxElements];
			}
			else {
				avgai0 += -currai5[j];
			}
		}
	}
	if (isnan(avgai0 / read)) {
		printf("\nWhy the hell is read an int32");
	}
	avgai0 = avgai0 / read;

	return -avgai0;		// This is negative because the force transducer is backwards.
}

///*
float64 biasing(float *readArray) {
	float64 avgai = 0;
	int ignore = 0;
	for (int i = ignore; i < read; i++) {
		int32 j = queueit - read + i;
		if (j < 0) {
			avgai += readArray[j + 200100];
		}
		else {
			avgai += readArray[j];
		}
	}
	avgai = avgai / (read - ignore);
	return avgai;
}
//*/

/*
float64 biasing(std::vector<float64> readArray) {
float64 avgai = 0;
for (float64 n : readArray) {
avgai += n;
}
avgai = avgai / read;
return avgai;
}
//*/

/*
* Allows for the conversion of voltages into force and torque.
**/
float64 * matrixMult(float64 ai0, float64 ai1, float64 ai2, float64 ai3, float64 ai4, float64 ai5) {

	float64 Fx = ((-0.000352378) * ai0) + (0.020472451 * ai1) + ((-0.02633045) * ai2) + ((-0.688977299) * ai3) + (0.000378075 * ai4) + (0.710008955 * ai5);
	float64 Fy = ((-0.019191418) * ai0) + (0.839003543 * ai1) + ((-0.017177775) * ai2) + ((-0.37643613) * ai3) + (0.004482987 * ai4) + ((-0.434163392) * ai5);
	float64 Fz = (0.830046806 * ai0) + (0.004569748 * ai1) + (0.833562339 * ai2) + (0.021075403 * ai3) + (0.802936538 * ai4) + ((-0.001350335) * ai5);
	float64 Tx = ((-0.316303442) * ai0) + (5.061378026 * ai1) + (4.614179159 * ai2) + ((-2.150699522) * ai3) + ((-4.341889297) * ai4) + ((-2.630773662) * ai5);
	float64 Ty = ((-5.320003676) * ai0) + ((-0.156640061) * ai1) + (2.796170871 * ai2) + (4.206523866 * ai3) + (2.780562472 * ai4) + ((-4.252850011) * ai5);
	float64 Tz = ((-0.056240509) * ai0) + (3.091367987 * ai1) + (0.122101875 * ai2) + (2.941467741 * ai3) + (0.005876647 * ai4) + (3.094672928 * ai5);

	Tx = Tx + 94.5 * Fy;
	Ty = Ty - 94.5 * Fx;

	float64 transformedData[6] = { Fx, Fy, Fz, Tx, Ty, Tz };
	return transformedData;
}

void DisplaySphere(double R, GLuint texture, int ls, bool color) {

	int b;



	//glScalef(0.0125 * R, 0.0125 * R, 0.0125 * R);


	if (horizontal) {
		//glRotatef(90, 0, 1, 0);
		switch ((int)R) {
		case 2:
			//glRotatef(90, 1, 0, 0);
			break;
		case 3:
			//glRotatef(-90, 1, 0, 0);
			break;
		default:
			break;
		}
		//glRotatef(90, 1, 0, 0);
		glRotatef(90, 0, 1, 0);
	}
	else if (vertical) {
		//glRotatef(90, 1, 0, 0);
		switch ((int)R) {
		case 1: //right side
			glRotatef(90, 0, 1, 0);
			//glRotatef(90, 0, 1, 0);
			//glTranslatef(0, 0, R);
			break;
		case 0: //left side
			glRotatef(-90, 0, 1, 0);
			//glTranslatef(0, 0, -R);
			break;
		case 2: //top side
			glRotatef(-90, 1, 0, 0);
			//glTranslatef(0, 0, -R);
			break;
		case 3: //bottom side
			glRotatef(90, 1, 0, 0);
			//glTranslatef(0, 0, -R);
			break;
		case 5: //back side
			glRotatef(-180, 0, 0, 1);
			glRotatef(-180, 1, 0, 0);
			//glRotatef(90, 0, 0, 1);
			//glTranslatef(0, 0, -R);
			break;
		default: //front side
			break;
		}
		//glRotatef(90, 0, 1, 0);
		glRotatef(90, 1, 0, 0);
	}
	else {
		switch ((int)R) {
		case 2:
			//glRotatef(90, 1, 0, 0);
			break;
		case 3:
			//glRotatef(-90, 1, 0, 0);
			break;
		default:
			break;
		}
	}


	//glBindTexture(GL_TEXTURE_2D, texture);


	/*
	glBegin(GL_TRIANGLE_STRIP);

	for (b = 0; b <= VertexCount; b++) {

	if (fmod(b, 1) == 0) {
	glTexCoord2f(VERTEX[b].U, VERTEX[b].V);

	glVertex3f(VERTEX[b].X, VERTEX[b].Y, -VERTEX[b].Z);
	}

	}



	for (b = 0; b <= VertexCount; b++) {

	if (fmod(b, 1) == 0) {
	glTexCoord2f(VERTEX[b].U, -VERTEX[b].V);

	glVertex3f(VERTEX[b].X, VERTEX[b].Y, VERTEX[b].Z);
	}

	}

	glEnd();
	*/

	int lsVertexCount = 2 * (360 / 6 / 1) * ((360 / 6) + 1) * 9;

	glEnableClientState(GL_NORMAL_ARRAY);
	if (color) {
		glEnableClientState(GL_COLOR_ARRAY);
	}
	glEnableClientState(GL_VERTEX_ARRAY);
	//glEnable(GL_NORMAL_ARRAY);
	//glEnable(GL_COLOR_ARRAY);
	//glEnable(GL_VERTEX_ARRAY);

	/*
	glNormalPointer(GL_FLOAT, 9 * sizeof(GLfloat), arr + 3);
	glColorPointer(3, GL_FLOAT, 9 * sizeof(GLfloat), arr + 6);
	glVertexPointer(3, GL_FLOAT, 9 * sizeof(GLfloat), arr);
	//*/

	glNormalPointer(GL_FLOAT, 9 * sizeof(GLfloat), arr2 + 3);
	if (color) {
		glColorPointer(3, GL_FLOAT, 9 * sizeof(GLfloat), arr2 + 6);
	}
	glVertexPointer(3, GL_FLOAT, 9 * sizeof(GLfloat), arr2);

	glPushMatrix();
	//glTranslatef(-2, -2, 0);                // move to bottom-left

	//glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_BYTE, indices);
	//glDrawArrays(GL_TRIANGLE_STRIP, 0, 27 * VertexCount);
	glDrawArrays(GL_TRIANGLE_STRIP, 0, VertexCount2);


	glPopMatrix();

	glDisableClientState(GL_VERTEX_ARRAY);  // disable vertex arrays
	if (color) {
		glDisableClientState(GL_COLOR_ARRAY);
	}
	glDisableClientState(GL_NORMAL_ARRAY);


}
void CreateSphere(double R, double H, double K, double Z) {

	int n;

	double a;

	double b;



	n = 0;



	//for (b = 0; b <= 90 - space; b += space) {
	for (b = 0; b <= 360 - space; b += space) {


		for (a = 0; a <= 360 - space; a += space) {

			if (fmod(b, 2 * viewingAngle) < viewingAngle + yp && b <= single) {

				//VERTEX[n].X = R * sin((a) / 180 * PI) * sin((b) / 180 * PI) - H;
				VERTEX[n].X = R * sin((a) / 180 * PI) * cos((b) / 180 * PI) - H;


				//VERTEX[n].Y = R * cos((a) / 180 * PI) * sin((b) / 180 * PI) + K;
				VERTEX[n].Y = R * sin((a) / 180 * PI) * sin((b) / 180 * PI) + K;


				//VERTEX[n].Z = R * cos((b) / 180 * PI) - Z;
				VERTEX[n].Z = R * cos((a) / 180 * PI) - Z;


				VERTEX[n].V = (2 * b) / 360;

				VERTEX[n].U = (a) / 360;

				n++;



				//VERTEX[n].X = R * sin((a) / 180 * PI) * sin((b + space) / 180 * PI
				VERTEX[n].X = R * sin((a) / 180 * PI) * cos((b + space) / 180 * PI


				) - H;

				//VERTEX[n].Y = R * cos((a) / 180 * PI) * sin((b + space) / 180 * PI
				VERTEX[n].Y = R * sin((a) / 180 * PI) * sin((b + space) / 180 * PI


				) + K;

				//VERTEX[n].Z = R * cos((b + space) / 180 * PI) - Z;
				VERTEX[n].Z = R * cos((a + space) / 180 * PI) - Z;


				VERTEX[n].V = (2 * (b + space)) / 360;

				VERTEX[n].U = (a) / 360;

				n++;



				//VERTEX[n].X = R * sin((a + space) / 180 * PI) * sin((b) / 180 * PI
				VERTEX[n].X = R * sin((a + space) / 180 * PI) * cos((b) / 180 * PI

				) - H;

				//VERTEX[n].Y = R * cos((a + space) / 180 * PI) * sin((b) / 180 * PI
				VERTEX[n].Y = R * sin((a + space) / 180 * PI) * sin((b) / 180 * PI

				) + K;

				//VERTEX[n].Z = R * cos((b) / 180 * PI) - Z;
				VERTEX[n].Z = R * cos((a) / 180 * PI) - Z;


				VERTEX[n].V = (2 * b) / 360;

				VERTEX[n].U = (a + space) / 360;

				n++;



				//VERTEX[n].X = R * sin((a + space) / 180 * PI) * sin((b + space) /
				VERTEX[n].X = R * sin((a + space) / 180 * PI) * cos((b + space) /

					180 * PI) - H;

				//VERTEX[n].Y = R * cos((a + space) / 180 * PI) * sin((b + space) /
				VERTEX[n].Y = R * sin((a + space) / 180 * PI) * sin((b + space) /

					180 * PI) + K;

				//VERTEX[n].Z = R * cos((b + space) / 180 * PI) - Z;
				VERTEX[n].Z = R * cos((a + space) / 180 * PI) - Z;


				VERTEX[n].V = (2 * (b + space)) / 360;

				VERTEX[n].U = (a + space) / 360;

				n++;
			}
			else {
				//VERTEX[n].X = R * sin((a) / 180 * PI) * sin((b) / 180 * PI) - H;
				VERTEX[n].X = 0;


				//VERTEX[n].Y = R * cos((a) / 180 * PI) * sin((b) / 180 * PI) + K;
				VERTEX[n].Y = 0;


				//VERTEX[n].Z = R * cos((b) / 180 * PI) - Z;
				VERTEX[n].Z = 0;


				VERTEX[n].V = 0;

				VERTEX[n].U = 0;

				n++;



				//VERTEX[n].X = R * sin((a) / 180 * PI) * sin((b) / 180 * PI) - H;
				VERTEX[n].X = 0;


				//VERTEX[n].Y = R * cos((a) / 180 * PI) * sin((b) / 180 * PI) + K;
				VERTEX[n].Y = 0;


				//VERTEX[n].Z = R * cos((b) / 180 * PI) - Z;
				VERTEX[n].Z = 0;


				VERTEX[n].V = 0;

				VERTEX[n].U = 0;

				n++;



				//VERTEX[n].X = R * sin((a) / 180 * PI) * sin((b) / 180 * PI) - H;
				VERTEX[n].X = 0;


				//VERTEX[n].Y = R * cos((a) / 180 * PI) * sin((b) / 180 * PI) + K;
				VERTEX[n].Y = 0;


				//VERTEX[n].Z = R * cos((b) / 180 * PI) - Z;
				VERTEX[n].Z = 0;


				VERTEX[n].V = 0;

				VERTEX[n].U = 0;

				n++;



				//VERTEX[n].X = R * sin((a) / 180 * PI) * sin((b) / 180 * PI) - H;
				VERTEX[n].X = 0;


				//VERTEX[n].Y = R * cos((a) / 180 * PI) * sin((b) / 180 * PI) + K;
				VERTEX[n].Y = 0;


				//VERTEX[n].Z = R * cos((b) / 180 * PI) - Z;
				VERTEX[n].Z = 0;


				VERTEX[n].V = 0;

				VERTEX[n].U = 0;

				n++;
			}


		}

	}

	// Array of vertices
	for (int i = 0; i < VertexCount; i++) {
		vertices[3 * i] = (GLfloat)VERTEX[i].X;
		vertices[3 * i + 1] = (GLfloat)VERTEX[i].Y;
		vertices[3 * i + 2] = (GLfloat)VERTEX[i].Z;
		//printf("\n%f,%f,%f", vert[3 * i], vert[3 * i + 1], vert[3 * i + 2]);
		norm[3 * i] = vertices[3 * i] / R;
		norm[3 * i + 1] = vertices[3 * i + 1] / R;
		norm[3 * i + 2] = vertices[3 * i + 2] / R;
		col[3 * i] = 1;
		col[3 * i + 1] = 1;
		col[3 * i + 2] = 1;
		arr[9 * i] = vertices[3 * i];
		arr[9 * i + 1] = vertices[3 * i + 1];
		arr[9 * i + 2] = vertices[3 * i + 2];
		arr[9 * i + 3] = norm[3 * i + 0];
		arr[9 * i + 4] = norm[3 * i + 1];
		arr[9 * i + 5] = norm[3 * i + 2];
		arr[9 * i + 6] = col[3 * i + 0];
		arr[9 * i + 7] = col[3 * i + 1];
		arr[9 * i + 8] = col[3 * i + 2];
		//printf("\n%f,%f,%f,%f,%f,%f,%f,%f,%f", arr[9 * i], arr[9 * i + 1], arr[9 * i + 2], arr[9 * i + 3], arr[9 * i + 4], arr[9 * i + 5], arr[9 * i + 6], arr[9 * i + 7], arr[9 * i + 8]);
	}
}

static void
vert(float theta, float phi, int i, bool color)
{
	float r = 0.75f;
	r = R;
	float x, y, z, nx, ny, nz;

	nx = sin(DTOR * theta) * cos(DTOR * phi);
	ny = sin(DTOR * phi);
	nz = cos(DTOR * theta) * cos(DTOR * phi);
	glNormal3f(nx, ny, nz);

	x = r * sin(DTOR * theta) * cos(DTOR * phi);
	y = r * sin(DTOR * phi);
	//z = -ZTRANS + r * cos(DTOR * theta) * cos(DTOR * phi);
	z = r * cos(DTOR * theta) * cos(DTOR * phi);
	glVertex4f(x, y, z, 1.0);

	arr2[9 * i] = x;
	arr2[9 * i + 1] = z;
	arr2[9 * i + 2] = y;
	arr2[9 * i + 3] = nx;
	arr2[9 * i + 4] = nz;
	arr2[9 * i + 5] = ny;
	/*
	arr2[9 * i + 6] = 1;
	arr2[9 * i + 7] = 1;
	arr2[9 * i + 8] = 1;
	//*/
	///*
	if (color) {
		arr2[9 * i + 6] = (float)0.5 * cosf(PI * theta / viewingAngle) + 0.5;
		arr2[9 * i + 7] = (float)0.5 * cosf(PI * theta / viewingAngle) + 0.5;
		arr2[9 * i + 8] = (float)0.5 * cosf(PI * theta / viewingAngle) + 0.5;
	}
	//*/
	else {
		arr2[9 * i + 6] = 0.0;
		arr2[9 * i + 7] = 0.0;
		arr2[9 * i + 8] = 0.0;
	}

}

static void
vert2(float theta, float phi)
{
	float r = 0.75f;
	float x, y, z, nx, ny, nz;

	nx = sin(DTOR * theta) * cos(DTOR * phi);
	ny = sin(DTOR * phi);
	nz = cos(DTOR * theta) * cos(DTOR * phi);
	glNormal3f(nx, ny, nz);

	x = r * sin(DTOR * theta) * cos(DTOR * phi);
	y = r * sin(DTOR * phi);
	//z = -ZTRANS + r * cos(DTOR * theta) * cos(DTOR * phi);
	z = r * cos(DTOR * theta) * cos(DTOR * phi);
	glVertex4f(x, y, z, 1.0);
}

static void
DrawSphere2(float del)
{
	//glLoadIdentity();
	float phi, phi2, theta;

	glColor4f(1.0, 1.0, 1.0, 1.0);
	for (phi = -90.0f; phi < 90.0f; phi += del) {
		glBegin(GL_TRIANGLE_STRIP);

		phi2 = phi + del;

		for (theta = -90.0f; theta <= 90.0f; theta += del) {
			vert2(theta, phi);
			vert2(theta, phi2);
		}
		glEnd();
	}
}

static void
DrawSphere(float del, bool color)
{
	//glLoadIdentity();
	float phi, phi2, theta;
	int n = 0;

	glColor4f(1.0, 1.0, 1.0, 1.0);
	for (phi = -0.0f; phi < 360.0f; phi += del * 1) {
		//glBegin(GL_TRIANGLE_STRIP);

		phi2 = phi + del * 1;

		for (theta = -0.0f; theta <= 360.0f; theta += del) {
			//if (fmod(theta, 2 * viewingAngle) <= viewingAngle && theta <= single) {
			if ((theta <= 3 * single && theta >= single) || (!isSingle)) {
				vert(theta, phi, n, color);
				vert(theta, phi2, n + 1, color);
			}
			else {
				glNormal3f(0, 0, 0);
				glVertex4f(0, 0, 0, 0);
				glNormal3f(0, 0, 0);
				glVertex4f(0, 0, 0, 0);
				arr2[9 * n] = 0;
				arr2[9 * n + 1] = 0;
				arr2[9 * n + 2] = 0;
				arr2[9 * n + 3] = 0;
				arr2[9 * n + 4] = 0;
				arr2[9 * n + 5] = 0;
				arr2[9 * n + 6] = 0;
				arr2[9 * n + 7] = 0;
				arr2[9 * n + 8] = 0;
				arr2[9 * (n + 1)] = 0;
				arr2[9 * (n + 1) + 1] = 0;
				arr2[9 * (n + 1) + 2] = 0;
				arr2[9 * (n + 1) + 3] = 0;
				arr2[9 * (n + 1) + 4] = 0;
				arr2[9 * (n + 1) + 5] = 0;
				arr2[9 * (n + 1) + 6] = 0;
				arr2[9 * (n + 1) + 7] = 0;
				arr2[9 * (n + 1) + 8] = 0;
			}
			n += 2;
		}
		//glEnd();
	}
	printf("\n%i", n);
}

void display(void) {

	glClearDepth(1);

	glClearColor(0.0, 0.0, 0.0, 1.0);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glColor3f(255, 255, 255); // color white for our rectangle is (255, 255, 255); color yellow is (255, 255, 0)

	glLoadIdentity();


	if (currai6[queueit - 1] == 0 && !written && !centering && !centered) {
		//if (currai6.size() > 0 && currai6[currai6.size() - 1] == 0 && !written) {
		writeToFile();
		written = 1;
	}
	if (currai6[queueit - 1] != 0) {
		//if (currai6.size() > 0 && currai6[currai6.size() - 1] != 0) {
		written = 0;
	}
	centered = 0;

	//glTranslatef(0, 0, -10);
	//glTranslatef(0, 0, -1000);

	//*
	DAQmxErrChk(DAQmxReadAnalogF64(taskHandle, -1, -1.0, DAQmx_Val_GroupByChannel, currentData, 1400700, &read, NULL));
	goto Skip;

Error:
	if (DAQmxFailed(error)) {
		DAQmxGetExtendedErrorInfo(errBuff, 2048);
		printf("\nDAQmx Error: %s\n", errBuff);
	}

Skip:

	countdown -= read;
	for (int i = 0; i < read; i++) {
		if (queueit >= maxElements) {
			queueit = 0;
		}
		//printf("%f\n", currentData[i]);
		float64 * tempData = matrixMult((currentData[i] - bias0), (currentData[i + read] - bias1), (currentData[i + (read * 2)] - bias2), (currentData[i + (read * 3)] - bias3), (currentData[i + (read * 4)] - bias4), (currentData[i + (read * 5)] - bias5));
		///*
		currai0[queueit] = tempData[0];
		//printf("%f", tempData[0]);
		currai1[queueit] = tempData[1];
		currai2[queueit] = tempData[2];
		currai3[queueit] = tempData[3];
		currai4[queueit] = tempData[4];
		currai5[queueit] = tempData[5];
		//currai6[queueit] = (int64)currentData[i + (read * 6)];
		currai6[queueit] = (int)currentData[i + (read * 6)];
		if (centering) {
			currai6[queueit] = 0;
		}
		if (currai6[queueit] != 0) {
			currai6[queueit] = (float)currai6[queueit] * gain / ((float)currai6[queueit]); //We're basically turning this into a measure of the gain.
		}
		//currxp[queueit] = tempxp;
		//currxp[queueit] = fmod(OLangle,360.0);
		currxp[queueit] = OLangle;
		//currxpcl[queueit] = tempxp - aggrlx;
		currxpcl[queueit] = OLangle + CLangle;
		//currgain[queueit] = gain;
		//*/
		/*
		currai0.push_back(tempData[0]);
		currai1.push_back(tempData[1]);
		currai2.push_back(tempData[2]);
		currai3.push_back(tempData[3]);
		currai4.push_back(tempData[4]);
		currai5.push_back(tempData[5]);
		currai6.push_back((int64)currentData[i + (read * 6)]);
		//currxp[queueit] = tempxp;
		currxp.push_back(OLangle);
		//currxpcl[queueit] = tempxp - aggrlx;
		currxpcl.push_back(OLangle + CLangle);
		//*/
		queueit++;
	}
	//*/
	/*
	if (closedLoop) {
	float T = calcFeedback();
	if (abs(T) < threshold) {
	T = 0;
	}
	float angAcc = (float)(T / (2.43 / 10000000.0)) * (1.0 / 120.0) * (1.0 / 120.0);
	CLangle += (float)((angAcc / 2) * (read * (1.0 / 10000.0) * 120.0) * (read * (1.0 / 10000.0) * 120.0) + angVel * (read * (1.0 / 10000.0) * 120.0)) * (180.0 / PI);
	angVel += (float)angAcc * (read * (1.0 / 10000.0) * 120.0);
	printf("\n%f", T);
	}

	//float OLangle = 0;
	if (drifting) {
	OLangle = driftVel * angle;
	//glRotatef(driftVel * angle, horizontal, vertical, spinning);
	}
	else {
	OLangle = (180) * (-1) * cosf(((float)2 * angle * PI / delay)) + 180.0;
	//glRotatef((180) * (-1) * cosf(((float)2 * angle * PI / delay)) + 180.0, horizontal, vertical, spinning);
	}

	if (closedLoop) {
	glRotatef(OLangle + CLangle, horizontal, vertical, spinning);
	//printf("\n%f", CLangle);
	}
	else {
	//glRotatef(OLangle, horizontal, vertical, spinning);
	glRotatef(OLangle, vertical, horizontal, spinning);
	}

	if (!clear) {
	DisplaySphere(5, texture[0]);
	}
	//*/

	fps_frames++;
	if (fps_start > glutGet(GLUT_ELAPSED_TIME)) {
		fps_start = 0;
	}
	int delta_t = glutGet(GLUT_ELAPSED_TIME) - fps_start;
	if (delta_t >= 1000) {
		//std::cout << double(delta_t) / double(fps_frames) << std::endl;
		std::cout << double(fps_frames) << " FPS" << std::endl;
		std::cout << countdown << " elements remaining" << std::endl;
		std::cout << "Approximately " << double(countdown) / (600000.0) << " minutes remaining." << std::endl;
		//std::cout << double(delta_t) << std::endl;
		//std::cout << delta_t << std::endl;
		fps_frames = 0;
		fps_start = glutGet(GLUT_ELAPSED_TIME);
	}
	//int d_t = glutGet(GLUT_ELAPSED_TIME) - t_0;
	d_t = glutGet(GLUT_ELAPSED_TIME) - t_0;

	//std::cout << d_t << std::endl;
	t_0 = glutGet(GLUT_ELAPSED_TIME);

	//glutSwapBuffers();

	//angle++; //Not really the angle, more like the time step incrementing thing.
	angle += d_t;
	glutSetWindow(window1);
	glutPostRedisplay();
	glutSetWindow(window2);
	glutPostRedisplay();
	glutSetWindow(window3);
	glutPostRedisplay();
}

void display1(void) {

	glClearDepth(1);

	glClearColor(0.0, 0.0, 0.0, 1.0);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();

	//glTranslatef(0, 0, -10);
	//glTranslatef(0, 0, -1000);

	if (closedLoop) {
		float T = calcFeedback();
		if (abs(T) < threshold * 10.0) {
			T = 0;
			angVel = 0.0;
		}
		float angAcc = 0.0;
		if (horizontal) {
			//float angAcc = (float)(T / (2.43 / 10000000.0)) * (1.0 / 120.0) * (1.0 / 120.0);
			angAcc = (float)((T / 1000.0) / Iyy) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
		}
		else if (spinning) {
			//angAcc = (float)((T / 1000.0) / Ixx) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
			spinning2 = 1;
			float T2 = calcFeedback();
			//angAcc = ((Izz * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
			angAcc = ((T / 1000.0) / Ixx) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
		}
		else if (vertical) {
			float I = weight * ((length / 2.0) * (length / 2.0) + (mothWidth / 2.0) * (mothWidth / 2.0)) / 5.0;
			//angAcc = (float)((T / 1000.0) / Izz) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
			//vertical2 = 1;
			//float T2 = calcFeedback();
			//if (isnan((Ixx * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t))) {
			//printf("\nWhat the hell is going on");
			//}
			//angAcc = ((Ixx * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
			//angAcc = ((T / 1000.0) / Izz) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
			angAcc = ((T / 1000.0) / I) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
			//angAcc = that thingy
		}
		else {
			printf("\nWhat kind of stimulus is this?");
		}
		if (isnan(angAcc)) {
			angAcc = 0.0;
		}
		//CLangle += (float)((angAcc / 2) * (read * (1.0 / 10000.0) * 120.0) * (read * (1.0 / 10000.0) * 120.0) + angVel * (read * (1.0 / 10000.0) * 120.0)) * (180.0 / PI);
		//CLangle += (float)((angAcc / 2.0) * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) + angVel * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t))) * (180.0 / PI);
		if (isnan(CLangle + (float)angVel * ((float)read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) * (180.0 / PI))) {
			printf("\nWhat the hell");
		}
		CLangle += (float)angVel * ((float)read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) * (180.0 / PI);
		//angVel += (float)angAcc * (read * (1.0 / 10000.0) * 120.0);
		if (isnan(angVel + (float)angAcc * ((float)read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) / 1000.0)) {
			printf("\nWhat the hell again");
		}
		//angVel += (float)angAcc * ((float)read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) / 1000.0;
		angVel = (float)angAcc * gain;
		/*
		printf("\nRead is %i", read);
		printf("\nAngular Acceleration is %f", angAcc);
		printf("\nAngular Velocity is %f", angVel);
		printf("\nCL angle is %f", CLangle);
		//*/
		//printf("\n%f", Iyy);
		if (locust) {
			CLangle = -45.0 * (-angVel / driftVel);
			if (CLangle > 0.0) {
				CLangle = 0.0;
			}
			else if (CLangle < -90.0) {
				CLangle = -90.0;
			}
		}

		if (centering) {
			//printf("\n%f", lx);
			//centering = 0;
			angAcc = 0.0;
			angVel = 0.0;
			CLangle = 0.0;
			angle = 0;
			printf("\nCentering");
		}
	}

	//float OLangle = 0;
	if (drifting) {
		OLangle = driftVel * angle;
		//glRotatef(driftVel * angle, horizontal, vertical, spinning);
	}
	else if (isWhiteNoise) {
		OLangle = whiteNoise[whiteNoiseIt];
		whiteNoiseIt++;
		if (whiteNoiseIt >= 5100) {
			whiteNoiseIt = 0;
		}
	}
	else if (locust) {
		OLangle = 45.0 - 2 * viewingAngle;
	}
	else {
		OLangle = (oscillationAmp) * (-1) * cosf(((float)2 * angle * PI / delay)) + (oscillationAmp);
		//glRotatef((180) * (-1) * cosf(((float)2 * angle * PI / delay)) + 180.0, horizontal, vertical, spinning);
		if ((OLangle < (oscillationAmp) && !freq_measured) || (OLangle >(oscillationAmp) && freq_measured)) {
			float delta = (float)(glutGet(GLUT_ELAPSED_TIME) - freq_start) / 1000.0;
			std::cout << 1.0 / (2 * delta) << " Hz" << std::endl;
			freq_start = glutGet(GLUT_ELAPSED_TIME);
			freq_measured = !freq_measured;
		}
		else {
			//freq_measured = 0;
		}
	}

	if (closedLoop) {
		gluLookAt(0, 0, 0, 0, 0, -1, 0, 1, 0);
		glRotatef(OLangle + CLangle, horizontal, vertical, spinning);
		//printf("\n%f", CLangle);
	}
	else {
		//gluLookAt(0, 0, 0, 0, 0, 1, 1, 0, 0);
		gluLookAt(0, 0, 0, 0, 0, -1, 0, 1, 0);
		glRotatef(OLangle, horizontal, vertical, spinning);
		//glRotatef(OLangle, vertical, horizontal, spinning);
	}

	if (!clear) {
		DisplaySphere(6, texture[0], longitudinalSpacing, 1);
		//DrawSphere2(5.0);
	}


	glutSwapBuffers();

	angle; //Not really the angle, more like the time step incrementing thing.
}

void display2(void) {

	glClearDepth(1);

	glClearColor(0.0, 0.0, 0.0, 1.0);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();



	//glTranslatef(0, 0, -10);
	//glTranslatef(0, 0, -1000);

	/*
	if (closedLoop) {

	float T = calcFeedback();
	if (abs(T) < threshold) {
	T = 0;
	}
	float angAcc;
	if (horizontal) {
	//float angAcc = (float)(T / (2.43 / 10000000.0)) * (1.0 / 120.0) * (1.0 / 120.0);
	angAcc = (float)((T / 1000.0) / Iyy) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	}
	else if (spinning) {
	//angAcc = (float)((T / 1000.0) / Ixx) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	spinning2 = 1;
	float T2 = calcFeedback();
	angAcc = ((Izz * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	}
	else if (vertical) {
	//angAcc = (float)((T / 1000.0) / Izz) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	vertical2 = 1;
	float T2 = calcFeedback();
	angAcc = ((Ixx * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	//angAcc = that thingy
	}
	else {
	printf("\nWhat kind of stimulus is this?");
	}
	//CLangle += (float)((angAcc / 2) * (read * (1.0 / 10000.0) * 120.0) * (read * (1.0 / 10000.0) * 120.0) + angVel * (read * (1.0 / 10000.0) * 120.0)) * (180.0 / PI);
	//CLangle += (float)((angAcc / 2) * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) + angVel * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t))) * (180.0 / PI);
	//angVel += (float)angAcc * (read * (1.0 / 10000.0) * 120.0);
	//angVel += (float)angAcc * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t));
	//printf("\n%f", T);
	}

	//float OLangle = 0;
	if (drifting) {
	OLangle = driftVel * angle;
	//glRotatef(driftVel * angle, horizontal, vertical, spinning);
	}
	else {
	OLangle = (oscillationAmp) * (-1) * cosf(((float)2 * angle * PI / delay)) + (oscillationAmp);
	//glRotatef((180) * (-1) * cosf(((float)2 * angle * PI / delay)) + 180.0, horizontal, vertical, spinning);
	}
	//*/

	if (closedLoop) {
		gluLookAt(0, 0, 0, 1, 0, 0, 0, 1, 0);
		glRotatef(OLangle + CLangle, horizontal, vertical, spinning);
		//printf("\n%f", CLangle);
	}
	else {
		//gluLookAt(0, 0, 0, 1, 0, 0, 0, 0, -1);
		gluLookAt(0, 0, 0, 1, 0, 0, 0, 1, 0);
		glRotatef(OLangle, horizontal, vertical, spinning);
		//glRotatef(OLangle, vertical, spinning, -horizontal);
	}

	if (!clear) {
		//glRotatef(90, 1, 0, 0);
		DisplaySphere(6, texture[0], longitudinalSpacing, 1);
	}



	glutSwapBuffers();
	//wglSwapIntervalEXT(-1);

	//angle++; //Not really the angle, more like the time step incrementing thing.
}

void display3(void) {

	glClearDepth(1);

	glClearColor(0.0, 0.0, 0.0, 1.0);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();



	//glTranslatef(0, 0, -10);
	//glTranslatef(0, 0, -1000);

	/*
	if (closedLoop) {
	float T = calcFeedback();
	if (abs(T) < threshold) {
	T = 0;
	}
	float angAcc;
	if (horizontal) {
	//float angAcc = (float)(T / (2.43 / 10000000.0)) * (1.0 / 120.0) * (1.0 / 120.0);
	angAcc = (float)((T / 1000.0) / Iyy) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	}
	else if (spinning) {
	//angAcc = (float)((T / 1000.0) / Ixx) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	spinning2 = 1;
	float T2 = calcFeedback();
	angAcc = ((Izz * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	}
	else if (vertical) {
	//angAcc = (float)((T / 1000.0) / Izz) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	vertical2 = 1;
	float T2 = calcFeedback();
	angAcc = ((Ixx * (T / 1000.0) + Ixz * (T2 / 1000.0)) / (Ixx * Izz - Ixz * Ixz)) * (1.0 / (1000.0 / (float)d_t)) * (1.0 / (1000.0 / (float)d_t));
	//angAcc = that thingy
	}
	else {
	printf("\nWhat kind of stimulus is this?");
	}
	//CLangle += (float)((angAcc / 2) * (read * (1.0 / 10000.0) * 120.0) * (read * (1.0 / 10000.0) * 120.0) + angVel * (read * (1.0 / 10000.0) * 120.0)) * (180.0 / PI);
	//CLangle += (float)((angAcc / 2) * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t)) + angVel * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t))) * (180.0 / PI);
	//angVel += (float)angAcc * (read * (1.0 / 10000.0) * 120.0);
	//angVel += (float)angAcc * (read * (1.0 / 10000.0) * (1000.0 / (float)d_t));
	//printf("\n%f", T);
	}

	//float OLangle = 0;
	if (drifting) {
	OLangle = driftVel * angle;
	//glRotatef(driftVel * angle, horizontal, vertical, spinning);
	}
	else {
	OLangle = (oscillationAmp) * (-1) * cosf(((float)2 * angle * PI / delay)) + (oscillationAmp);
	//glRotatef((180) * (-1) * cosf(((float)2 * angle * PI / delay)) + 180.0, horizontal, vertical, spinning);
	}
	//*/

	if (closedLoop) {
		gluLookAt(0, 0, 0, -1, 0, 0, 0, 1, 0);
		glRotatef(OLangle + CLangle, horizontal, vertical, spinning);
		//printf("\n%f", CLangle);
	}
	else {
		//gluLookAt(0, 0, 0, -1, 0, 0, 0, 0, 1);
		gluLookAt(0, 0, 0, -1, 0, 0, 0, 1, 0);
		glRotatef(OLangle, horizontal, vertical, spinning);
		//glRotatef(OLangle, vertical, spinning, horizontal);
	}

	if (!clear) {
		//glRotatef(-90, 1, 1, 1);
		DisplaySphere(6, texture[0], longitudinalSpacing, 1);
	}



	glutSwapBuffers();
	//wglSwapIntervalEXT(-1);

	//angle++; //Not really the angle, more like the time step incrementing thing.
}

static float
Dot3(float *a, float *b)
{
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

static float *
Scale3(float *result, float *a, float scale)
{
	result[0] = a[0] * scale;
	result[1] = a[1] * scale;
	result[2] = a[2] * scale;
	return result;
}

static float *
Normalize3(float *result, float *a)
{
	float length1;

	length1 = (float)sqrt(Dot3(a, a));
	return Scale3(result, a, 1 / length1);
}

static unsigned char *
CubeFunc(unsigned char resultColor[3], float vec[3])
{
	int i;
	float faceVec[3];

	if (vec[0] == 1.0) {
		resultColor[0] = 255;
		resultColor[1] = 0;
		resultColor[2] = 0;
	}
	else if (vec[1] == 1.0) {
		resultColor[0] = 0;
		resultColor[1] = 255;
		resultColor[2] = 0;
	}
	else if (vec[2] == 1.0) {
		resultColor[0] = 0;
		resultColor[1] = 0;
		resultColor[2] = 255;
	}
	else if (vec[0] == -1.0) {
		resultColor[0] = 255;
		resultColor[1] = 0;
		resultColor[2] = 255;
	}
	else if (vec[1] == -1.0) {
		resultColor[0] = 255;
		resultColor[1] = 255;
		resultColor[2] = 0;
	}
	else if (vec[2] == -1.0) {
		resultColor[0] = 0;
		resultColor[1] = 255;
		resultColor[2] = 255;
	}
	return resultColor;

	Normalize3(faceVec, vec);
	for (i = 0; i < 3; i++) {
		resultColor[i] = 255 * (sin(6 * (faceVec[i] + faceVec[(i + 1) % 3])) + 1) / 2.0;
	}
	return resultColor;
}

GLenum cubefaces[6] = {
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT,
};


void init(void) {

	glEnable(GL_DEPTH_TEST);

	glEnable(GL_TEXTURE_2D);

	glDepthFunc(GL_LEQUAL);

	glCullFace(GL_BACK);

	glFrontFace(GL_CCW);

	glEnable(GL_CULL_FACE);

	//texture[0] = LoadTextureRAW(?earth.raw?);

	int i, j, k;

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluPerspective(120, (GLfloat)144 / (GLfloat)256, 0.1, 1000.0);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	//gluLookAt(0, 0, 2, 0, 0, 0, 0, 1, 0);

	/*
	for (i = 0; i < CUBE_MAP_SIZE; i++) {
	float t = 1.0 / (2 * CUBE_MAP_SIZE) + (float)i / CUBE_MAP_SIZE;
	t = 2.0 * t - 1.0;
	for (j = 0; j < CUBE_MAP_SIZE; j++) {
	float s = 1.0 / (2 * CUBE_MAP_SIZE) + (float)j / CUBE_MAP_SIZE;
	float pt[3];
	s = 2.0 * s - 1.0;
	pt[0] = 1;
	pt[1] = t;
	pt[2] = -s;
	CubeFunc(CubeMap[CUBE_POS_X][i][j], pt);
	pt[0] = -1;
	pt[1] = t;
	pt[2] = s;
	CubeFunc(CubeMap[CUBE_NEG_X][i][j], pt);

	pt[1] = 1;
	pt[0] = s;
	pt[2] = -t;
	CubeFunc(CubeMap[CUBE_POS_Y][i][j], pt);
	pt[1] = -1;
	pt[0] = s;
	pt[2] = t;
	CubeFunc(CubeMap[CUBE_NEG_Y][i][j], pt);

	pt[2] = 1;
	pt[0] = s;
	pt[1] = t;
	CubeFunc(CubeMap[CUBE_POS_Z][i][j], pt);
	pt[2] = -1;
	pt[0] = -s;
	pt[1] = t;
	CubeFunc(CubeMap[CUBE_NEG_Z][i][j], pt);
	for (k = CUBE_POS_X; k <= CUBE_NEG_Z; k++) {
	CubeMap[k][i][j][3] = 255;
	}
	}
	}
	//*/

	//CreateSphere(70, 0, 0, 0);
	//CreateSphere(R, 0, 0, 0);
	DrawSphere(2, 1);

	glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);

	for (i = 0; i < 6; i++) {
		glPushMatrix();
		glClearDepth(1);

		glClearColor(0.0, 0.0, 0.0, 1.0);

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glLoadIdentity();

		DisplaySphere((double)i, texture[0], 2, 1);
		glPopMatrix();

		/*
		glTexImage2D(
		cubefaces[i],
		0,                  // level
		GL_RGBA8,          // internal format
		CUBE_MAP_SIZE,     // width
		CUBE_MAP_SIZE,     // height
		0,                 // border
		GL_RGBA,           // format
		GL_UNSIGNED_BYTE,   // type
		CubeMap[CUBE_POS_X + i]); // pixel data
		*/

		glCopyTexImage2D(cubefaces[i], 0, GL_RGBA, 0, 0, 144, 256, 0);
		//glLoadIdentity();
	}

	glTexParameteri(GL_TEXTURE_CUBE_MAP_EXT, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_CUBE_MAP_EXT, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_REFLECTION_MAP_EXT);
	glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_REFLECTION_MAP_EXT);
	glTexGeni(GL_R, GL_TEXTURE_GEN_MODE, GL_REFLECTION_MAP_EXT);

	//glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);
	//glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);
	//glTexGeni(GL_R, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);

	glEnable(GL_TEXTURE_CUBE_MAP_EXT);
	//glEnable(GL_TEXTURE_2D);
	glEnable(GL_TEXTURE_GEN_S);
	glEnable(GL_TEXTURE_GEN_T);
	glEnable(GL_TEXTURE_GEN_R);
	glEnable(GL_NORMALIZE);

	/*
	glEnableClientState(GL_NORMAL_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);
	glEnableClientState(GL_VERTEX_ARRAY);
	//glEnable(GL_NORMAL_ARRAY);
	//glEnable(GL_COLOR_ARRAY);
	//glEnable(GL_VERTEX_ARRAY);
	glNormalPointer(GL_FLOAT, 9 * sizeof(GLfloat), arr + 3);
	glColorPointer(3, GL_FLOAT, 9 * sizeof(GLfloat), arr + 6);
	glVertexPointer(3, GL_FLOAT, 9 * sizeof(GLfloat), arr);

	glDisableClientState(GL_VERTEX_ARRAY);  // disable vertex arrays
	glDisableClientState(GL_COLOR_ARRAY);
	glDisableClientState(GL_NORMAL_ARRAY);
	//*/

}

/*
* Callback function to retrieve key value movement
* @param key - ASCII value for key input
* @param x -  n/a
* @param y - n/a
*/
void letter_pressed(unsigned char key, int x, int y) {
	float degree;
	float frequency;
	float driftDeg; //drift in degrees/sec
	float oscAmp; //oscillation amplitude in degrees
	float tempGain; //gain
	switch (key) {
	case 98: //b
		if (clear) {
			yp = 0;
			clear = false;
		}
		else {
			yp = -800;
			clear = true;
		}
		glutPostRedisplay();
		break;
	case 66: //B
		if (clear) {
			yp = 0;
			clear = false;
		}
		else {
			yp = -800;
			clear = true;
		}
		glutPostRedisplay();
		break;
	case 99: //c
		//centering = 1;
		centering = !centering;
		centered = 1; //This will be changed to 0 after the check for trigger == 0.
		break;
	case 67: //C
		//centering = 1;
		centering = !centering;
		centered = 1;
		break;
	case 27: // ESC to exit fullscreen
			 /*
			 free(currai0);
			 free(currai1);
			 free(currai2);
			 free(currai3);
			 free(currai4);
			 free(currai5);
			 free(currai6);
			 free(currxp);
			 free(currxpcl);
			 //*/
		exit(0);
		break;

		//Not implemented yet
		/*
		case 114: //r

		printf("We are entering our switch case\n");
		glPushMatrix();
		glTranslatef(200, 300, 0);
		glRotatef(90, 0, 0, 1);
		glBegin(GL_QUADS);
		{
		glVertex2f(-num / 2, -num2 / 2);
		glVertex2f(-num2 / 2, -num2 / 2);
		glVertex2f(num2 / 2, num3 / 2);
		glVertex2f(num / 2, num3 / 2);
		}
		glEnd();
		glPopMatrix();
		break;
		*/
		/*
		case 45: //- will shrink bar
		if (barwidthIt > 0) {
		barwidthIt--;
		barwidth = barwidthArr[barwidthIt];
		if (horizontal) {
		//barwidth *= 1.763313609;
		}
		}
		glutPostRedisplay();
		break;
		case 61: //= will enlarge bar
		if (barwidthIt < 2) {
		barwidthIt++;
		barwidth = barwidthArr[barwidthIt];
		if (horizontal) {
		//barwidth *= 1.763313609;
		}
		}
		glutPostRedisplay();
		break;
		*/
	case 49: //1 will make stimulus single bar
		single = viewingAngle;
		isSingle = 1;
		//CreateSphere(R, 0, 0, 0);
		//DrawSphere(longitudinalSpacing, 0);
		init();
		glutPostRedisplay();
		break;
	case 50: //2 will make stimulus 5-bar grate
		single = 360;
		isSingle = 0;
		//CreateSphere(R, 0, 0, 0);
		//DrawSphere(longitudinalSpacing, 0);
		init();
		glutPostRedisplay();
		break;
	case 86: //V will request viewing angle
		printf("\nInput viewing angle in degrees: ");
		scanf("%f", &degree);
		viewingAngle = degree;
		//barwidth = (float) 0.307975 * tanf(degree * PI / (2.0 * 180.0)) * 1342.281879;
		printf("%f", viewingAngle);
		//CreateSphere(R, 0, 0, 0);
		//DrawSphere(longitudinalSpacing, 0);
		init();
		glutPostRedisplay();
		break;
	case 118: //v will request viewing angle
		printf("\nInput viewing angle in degrees: ");
		scanf("%f", &degree);
		viewingAngle = degree;
		//barwidth = (float) 0.307975 * tanf(degree * PI / (2.0 * 180.0)) * 1342.281879;
		printf("%f", viewingAngle);
		//CreateSphere(R, 0, 0, 0);
		//DrawSphere(longitudinalSpacing, 0);
		init();
		glutPostRedisplay();
		break;
	case 70: //F will request frequency
		printf("\nInput oscillation frequency in Hz: ");
		scanf("%f", &frequency);
		//delay = 120.0 / frequency;
		delay = 1000.0 / frequency;
		drifting = 0;
		isWhiteNoise = 0;
		locust = 0;
		glutPostRedisplay();
		break;
	case 102: //f will request frequency
		printf("\nInput oscillation frequency in Hz: ");
		scanf("%f", &frequency);
		//delay = 120.0 / frequency;
		delay = 1000.0 / frequency;
		drifting = 0;
		isWhiteNoise = 0;
		locust = 0;
		glutPostRedisplay();
		break;
	case 68: //D will request driftDeg
		printf("\nInput drift velocity in degrees/sec: ");
		scanf("%f", &driftDeg);
		//driftVel = 2.0*PI*0.307975*(driftDeg / 360.0)*1342.281879*(1.0 / 120.0);
		//driftVel = driftDeg / 120.0;
		driftVel = driftDeg / 1000.0;
		drifting = 1;
		isWhiteNoise = 0;
		locust = 0;
		glutPostRedisplay();
		break;
	case 100: //d will request driftDeg
		printf("\nInput drift velocity in degrees/sec: ");
		scanf("%f", &driftDeg);
		//driftVel = 2.0*PI*0.307975*(driftDeg / 360.0)*1342.281879*(1.0 / 120.0);
		//driftVel = driftDeg / 120.0;
		driftVel = driftDeg / 1000.0;
		drifting = 1;
		isWhiteNoise = 0;
		locust = 0;
		glutPostRedisplay();
		break;
	case 79: //O will make open-loop
		printf("\nNow in open-loop.");
		closedLoop = 0;
		//centering = 1;
		glutPostRedisplay();
		break;
	case 111: //o will make open-loop
		printf("\nNow in open-loop.");
		closedLoop = 0;
		//centering = 1;
		glutPostRedisplay();
		break;
	case 80: //P will make closed-loop
		printf("\nNow in closed-loop.");
		closedLoop = 1;
		glutPostRedisplay();
		break;
	case 112: //p will make closed-loop
		printf("\nNow in closed-loop.");
		closedLoop = 1;
		glutPostRedisplay();
		break;
	case 72: //H will make horizontal bars
		printf("\nBars are now horizontal.");
		horizontal = 1;
		spinning = 0;
		vertical = 0;		//barwidth = barwidthArr[barwidthIt] * 1.763313609;
		glutPostRedisplay();
		break;
	case 104: //h will make horizontal bars
		printf("\nBars are now horizontal.");
		horizontal = 1;
		spinning = 0;
		vertical = 0;		//barwidth = barwidthArr[barwidthIt] * 1.763313609;
		glutPostRedisplay();
		break;
	case 76: //L will make vertical bars
		printf("\nBars are now vertical.");
		horizontal = 0;
		spinning = 0;
		vertical = 1;
		//barwidth = barwidthArr[barwidthIt];
		glutPostRedisplay();
		break;
	case 108: //l will make vertical bars
		printf("\nBars are now vertical.");
		horizontal = 0;
		spinning = 0;
		vertical = 1;
		//barwidth = barwidthArr[barwidthIt];
		glutPostRedisplay();
		break;
	case 83: //S will make spinny stuff
		horizontal = 0;
		spinning = 1;
		vertical = 0;
		printf("\nSpinning.");
		break;
	case 115: //s will make spinny stuff
		horizontal = 0;
		spinning = 1;
		vertical = 0;
		printf("\nSpinning.");
		break;
	case 65: //A will request oscillation amplitude in degrees
		printf("\nInput oscillation amplitude in degrees: ");
		scanf("%f", &oscAmp);
		oscillationAmp = oscAmp;
		glutPostRedisplay();
		break;
	case 97: //a will request oscillation amplitude in degrees
		printf("\nInput oscillation amplitude in degrees: ");
		scanf("%f", &oscAmp);
		oscillationAmp = oscAmp;
		glutPostRedisplay();
		break;
	case 87: //W will start whitenoise stimuli
		isWhiteNoise = 1;
		printf("\nWhite noise stimulus");
		drifting = 0;
		glutPostRedisplay();
		break;
	case 119: //w will start whitenoise stimuli
		isWhiteNoise = 1;
		printf("\nWhite noise stimulus");
		drifting = 0;
		glutPostRedisplay();
		break;
	case 82: //R will change the recording timescale between continuous and 20 second intervals
		continuousRecording = !continuousRecording;
		if (continuousRecording) {
			printf("\nRecording continously.");
		}
		else {
			printf("\nRecording 20 second intervals.");
		}
		break;
	case 114: //R will change the recording timescale between continuous and 20 second intervals
		continuousRecording = !continuousRecording;
		if (continuousRecording) {
			printf("\nRecording continously.");
		}
		else {
			printf("\nRecording 20 second intervals.");
		}
		break;
	case 71: //G will prompt the user for gain.
		printf("\nInput gain: ");
		scanf("%f", &tempGain);
		gain = tempGain;
		glutPostRedisplay();
		break;
	case 103: //g will prompt the user for gain.
		printf("\nInput gain: ");
		scanf("%f", &tempGain);
		gain = tempGain;
		glutPostRedisplay();
		break;
	case 45: //- Will lessen gain
		if (gainIt > 0) {
			gainIt--;
			gain = gains[gainIt];
		}
		printf("\nGain is now %f", gain);
		glutPostRedisplay();
		break;
	case 61: //= will enlarge bar
		if (gainIt < 4) {
			gainIt++;
			gain = gains[gainIt];
		}
		printf("\nGain is now %f", gain);
		glutPostRedisplay();
		break;
	case 84: //T will start the locust stimuli
		printf("\nInput drift velocity for locust stimuli in degrees/sec: ");
		scanf("%f", &driftDeg);
		//driftVel = 2.0*PI*0.307975*(driftDeg / 360.0)*1342.281879*(1.0 / 120.0);
		//driftVel = driftDeg / 120.0;
		driftVel = driftDeg / 1000.0;
		locust = 1;
		isWhiteNoise = 0;
		drifting = 0;
		glutPostRedisplay();
		break;
	case 116: //t will start the locust stimuli
		printf("\nInput drift velocity for locust stimuli in degrees/sec: ");
		scanf("%f", &driftDeg);
		//driftVel = 2.0*PI*0.307975*(driftDeg / 360.0)*1342.281879*(1.0 / 120.0);
		//driftVel = driftDeg / 120.0;
		driftVel = driftDeg / 1000.0;
		locust = 1;
		isWhiteNoise = 0;
		drifting = 0;
		glutPostRedisplay();
		break;
	}
}

void reshape(int w, int h) {

	glViewport(0, 0, (GLsizei)w, (GLsizei)h);

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	//gluPerspective(60, (GLfloat)w / (GLfloat)h, 0.1, 100.0);
	gluPerspective(120, (GLfloat)w / (GLfloat)h, 0.1, 1000.0);


	glMatrixMode(GL_MODELVIEW);
}

void reshape2(int w, int h) {

	glViewport(0, 0, (GLsizei)w, (GLsizei)h);

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	//gluPerspective(60, (GLfloat)w / (GLfloat)h, 0.1, 100.0);
	gluPerspective(120, (GLfloat)w / (GLfloat)h, 0.1, 1000.0);


	glMatrixMode(GL_MODELVIEW);
}

void reshape3(int w, int h) {

	glViewport(0, 0, (GLsizei)w, (GLsizei)h);

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	//gluPerspective(60, (GLfloat)w / (GLfloat)h, 0.1, 100.0);
	gluPerspective(120, (GLfloat)w / (GLfloat)h, 0.1, 1000.0);


	glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char **argv) {

	//PFNWGLSWAPINTERVALEXTPROC       wglSwapIntervalEXT = NULL;
	//PFNWGLGETSWAPINTERVALEXTPROC    wglGetSwapIntervalEXT = NULL;
	float tempWeight;
	float tempLength;
	float tempMothWidth;
	//printf("Press left or right arrows to move our rectangle\n");
	///*
	printf("Enter the weight of the moth in grams: ");
	scanf("%f", &tempWeight);
	weight = tempWeight / 1000.0;
	printf("\nEnter the length of the moth in centimeters: ");
	scanf("%f", &tempLength);
	length = tempLength / 100.0;
	printf("\nEnter the width of the moth in centimeters: ");
	scanf("%f", &tempMothWidth);
	mothWidth = tempMothWidth / 100.0;
	printf("Please wait about 20 seconds\n");
	//*/
	//printf("Please wait about 20 seconds\n");
	/*
	** Add the closed-loop stuff here.
	*/

	// DAQmx analog voltage channel and timing parameters

	//*
	DAQmxErrChk(DAQmxCreateTask("", &taskHandle));

	// IMPORTANT
	//changed Dev1 to Dev5 as the connection established. So verify what Dev is being used to update this code. DEV5 is our force torque.
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai0:6", "", DAQmx_Val_Diff, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle, "", 10000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 200100));
	// DAQmx Start Code
	DAQmxErrChk(DAQmxStartTask(taskHandle));
	//printf("\ngot here");
	// DAQmx Read Code
	//printf("%f\n", data[0]);
	DAQmxErrChk(DAQmxReadAnalogF64(taskHandle, 200100, -1.0, DAQmx_Val_GroupByChannel, data, 1400700, &read, NULL));
	//printf("%f\n", data[0]);
	//printf("\ngot passed through analog");
	//printf("%f\n", data[199999]);
	//bias = data[0];
	// Stop and clear task
	printf("Acquired %d samples\n", (int)read);
	//printf("%f\n", data[199999]);
	//printf("Acquired %d samples\n", (int)read);
	printf("\ngot passed through analog");
	printf("\n%f\n", data[1199999]);
	for (int i = 0; i < read; i++) {
		if (queueit >= maxElements) {
			queueit = 0;
		}
		///*
		currai0[queueit] = data[i];
		currai1[queueit] = data[i + read];
		currai2[queueit] = data[i + (read * 2)];
		currai3[queueit] = data[i + (read * 3)];
		currai4[queueit] = data[i + (read * 4)];
		currai5[queueit] = data[i + (read * 5)];
		//currai6[queueit] = (int64)data[i + (read * 6)]; //our trigger buttom. Must be floored to 0 or 1.
		currai6[queueit] = (int)data[i + (read * 6)];
		if (currai6[queueit] != 0) {
			currai6[queueit] = (float)currai6[queueit] * gain / ((float)currai6[queueit]); //We're basically turning this into a measure of the gain.
		}
														//*/

														/*
														currai0.push_back(data[i]);
														currai1.push_back(data[i + read]);
														currai2.push_back(data[i + (read * 2)]);
														currai3.push_back(data[i + (read * 3)]);
														currai4.push_back(data[i + (read * 4)]);
														currai5.push_back(data[i + (read * 5)]);
														currai6.push_back((int64)data[i + (read * 6)]); //our trigger buttom. Must be floored to 0 or 1.
														currxp.push_back(0);
														currxpcl.push_back(0);
														//*/

		queueit++;
	}
	bias0 = biasing(currai0);
	bias1 = biasing(currai1);
	bias2 = biasing(currai2);
	bias3 = biasing(currai3);
	bias4 = biasing(currai4);
	bias5 = biasing(currai5);

	writeToFile();

	/*
	currai0.clear();
	currai1.clear();
	currai2.clear();
	currai3.clear();
	currai4.clear();
	currai5.clear();
	currai6.clear();
	//*/

	//*/

	/*
	** This is where the closed-loop stuff ends
	*/

	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);

	//glutInitWindowSize(800, 454);
	//glutInitWindowSize(450, 800);
	glutInitWindowSize(144, 256);

	glutInitWindowPosition(2400, 100);
	glutIdleFunc(display);

	glutCreateWindow("A basic OpenGL Window");
	window1 = glutGetWindow();

	glutInitWindowSize(144, 256);
	glutInitWindowPosition(4000, 100);
	glutCreateWindow("Second basic OpenGL Window");
	window2 = glutGetWindow();

	glutInitWindowPosition(5600, 100);
	glutCreateWindow("Don't put me in a box");
	window3 = glutGetWindow();

	glutSetWindow(window1);

	init();



	if (WGLExtensionSupported("WGL_EXT_swap_control"))
	{
		// Extension is supported, init pointers.
		wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)wglGetProcAddress("wglSwapIntervalEXT");

		// this is another function from WGL_EXT_swap_control extension
		wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)wglGetProcAddress("wglGetSwapIntervalEXT");
		wglSwapIntervalEXT(-1);
	}

	glutFullScreen(); //This makes shit fullscreen

	glutDisplayFunc(display1);

	glutReshapeFunc(reshape);

	glutKeyboardFunc(letter_pressed);


	// Second window
	glutSetWindow(window2);
	init();


	/*
	if (WGLExtensionSupported("WGL_EXT_swap_control"))
	{
	// Extension is supported, init pointers.
	wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)wglGetProcAddress("wglSwapIntervalEXT");

	// this is another function from WGL_EXT_swap_control extension
	wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)wglGetProcAddress("wglGetSwapIntervalEXT");
	wglSwapIntervalEXT(-1);
	}
	*/

	glutFullScreen(); //This makes shit fullscreen

	glutDisplayFunc(display2);

	//glutIdleFunc(display2);

	glutReshapeFunc(reshape2);

	//glutKeyboardFunc(letter_pressed);


	// Third window
	glutSetWindow(window3);
	init();


	/*
	if (WGLExtensionSupported("WGL_EXT_swap_control"))
	{
	// Extension is supported, init pointers.
	wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)wglGetProcAddress("wglSwapIntervalEXT");

	// this is another function from WGL_EXT_swap_control extension
	wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)wglGetProcAddress("wglGetSwapIntervalEXT");
	wglSwapIntervalEXT(-1);
	}
	*/

	glutFullScreen(); //This makes shit fullscreen

	glutDisplayFunc(display3);

	//glutIdleFunc(display2);

	glutReshapeFunc(reshape3);

	//glutKeyboardFunc(letter_pressed);

	goto Skip;
Error:
	if (DAQmxFailed(error))
		DAQmxGetExtendedErrorInfo(errBuff, 2048);
	if (taskHandle != 0) {
		DAQmxStopTask(taskHandle);
		DAQmxClearTask(taskHandle);
	}
	if (DAQmxFailed(error))
		printf("\nDAQmx Error: %s\n", errBuff);
	getchar();
Skip:
	glutMainLoop();

	return 0;
}

GLuint LoadTextureRAW(const char * filename)
{

	GLuint texture;

	int width, height;

	unsigned char * data;

	FILE * file;



	file = fopen(filename, "rb");

	if (file == NULL) return 0;



	width = 1024;

	height = 512;

	data = (unsigned char *)malloc(width * height * 3);



	fread(data, width * height * 3, 1, file);

	fclose(file);



	glGenTextures(1, &texture);



	glBindTexture(GL_TEXTURE_2D, texture);



	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE,

		GL_MODULATE);



	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,

		GL_LINEAR_MIPMAP_NEAREST);



	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,

		GL_LINEAR);



	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,

		GL_REPEAT);

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,

		GL_REPEAT);



	gluBuild2DMipmaps(GL_TEXTURE_2D, 3, width, height,

		GL_RGB, GL_UNSIGNED_BYTE, data);



	free(data);



	return texture;


}